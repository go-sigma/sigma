// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.3
// Revision: 8e2c93debfc66888870b2dfd86e70c79a70c920f
// Build Date: 2022-11-09T16:39:46Z
// Built By: goreleaser

package daemon

import (
	"errors"
	"fmt"
)

const (
	// DaemonVulnerability is a Daemon of type Vulnerability.
	DaemonVulnerability Daemon = "Vulnerability"
	// DaemonSbom is a Daemon of type Sbom.
	DaemonSbom Daemon = "Sbom"
	// DaemonProxyArtifact is a Daemon of type ProxyArtifact.
	DaemonProxyArtifact Daemon = "ProxyArtifact"
	// DaemonProxyTag is a Daemon of type ProxyTag.
	DaemonProxyTag Daemon = "ProxyTag"
)

var ErrInvalidDaemon = errors.New("not a valid Daemon")

// String implements the Stringer interface.
func (x Daemon) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x Daemon) IsValid() bool {
	_, err := ParseDaemon(string(x))
	return err == nil
}

var _DaemonValue = map[string]Daemon{
	"Vulnerability": DaemonVulnerability,
	"Sbom":          DaemonSbom,
	"ProxyArtifact": DaemonProxyArtifact,
	"ProxyTag":      DaemonProxyTag,
}

// ParseDaemon attempts to convert a string to a Daemon.
func ParseDaemon(name string) (Daemon, error) {
	if x, ok := _DaemonValue[name]; ok {
		return x, nil
	}
	return Daemon(""), fmt.Errorf("%s is %w", name, ErrInvalidDaemon)
}
