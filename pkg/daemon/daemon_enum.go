// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package daemon

import (
	"errors"
	"fmt"
)

const (
	// DaemonVulnerability is a Daemon of type Vulnerability.
	DaemonVulnerability Daemon = "Vulnerability"
	// DaemonSbom is a Daemon of type Sbom.
	DaemonSbom Daemon = "Sbom"
	// DaemonProxyArtifact is a Daemon of type ProxyArtifact.
	DaemonProxyArtifact Daemon = "ProxyArtifact"
	// DaemonProxyTag is a Daemon of type ProxyTag.
	DaemonProxyTag Daemon = "ProxyTag"
)

var ErrInvalidDaemon = errors.New("not a valid Daemon")

// String implements the Stringer interface.
func (x Daemon) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Daemon) IsValid() bool {
	_, err := ParseDaemon(string(x))
	return err == nil
}

var _DaemonValue = map[string]Daemon{
	"Vulnerability": DaemonVulnerability,
	"Sbom":          DaemonSbom,
	"ProxyArtifact": DaemonProxyArtifact,
	"ProxyTag":      DaemonProxyTag,
}

// ParseDaemon attempts to convert a string to a Daemon.
func ParseDaemon(name string) (Daemon, error) {
	if x, ok := _DaemonValue[name]; ok {
		return x, nil
	}
	return Daemon(""), fmt.Errorf("%s is %w", name, ErrInvalidDaemon)
}

// MustParseDaemon converts a string to a Daemon, and panics if is not valid.
func MustParseDaemon(name string) Daemon {
	val, err := ParseDaemon(name)
	if err != nil {
		panic(err)
	}
	return val
}
