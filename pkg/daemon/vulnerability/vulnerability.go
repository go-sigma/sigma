// Copyright 2023 sigma
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package scan

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"time"

	trivyTypes "github.com/aquasecurity/trivy/pkg/types"
	"github.com/google/uuid"
	"github.com/rs/zerolog/log"
	"github.com/spf13/viper"

	"github.com/go-sigma/sigma/pkg/daemon"
	"github.com/go-sigma/sigma/pkg/dal/models"
	"github.com/go-sigma/sigma/pkg/modules/workq"
	"github.com/go-sigma/sigma/pkg/types/enums"
	"github.com/go-sigma/sigma/pkg/utils"
	"github.com/go-sigma/sigma/pkg/utils/compress"
)

func init() {
	workq.TopicConsumers[enums.DaemonVulnerability.String()] = workq.Consumer{
		Handler:     daemon.DecoratorArtifact(runner),
		MaxRetry:    6,
		Concurrency: 10,
		Timeout:     time.Minute * 10,
	}
}

// Report ...
type Report struct {
	Critical int64 `json:"critical"`
	High     int64 `json:"high"`
	Medium   int64 `json:"medium"`
	Low      int64 `json:"low"`
}

func runner(ctx context.Context, artifact *models.Artifact, statusChan chan daemon.DecoratorArtifactStatus) error {
	statusChan <- daemon.DecoratorArtifactStatus{Daemon: enums.DaemonVulnerability, Status: enums.TaskCommonStatusDoing, Message: ""}
	image := fmt.Sprintf("%s/%s@%s", utils.TrimHTTP(viper.GetString("server.internalEndpoint")), artifact.Repository.Name, artifact.Digest)
	filename := fmt.Sprintf("%s.trivy.json", uuid.New().String())
	cmd := exec.Command("trivy", "image", "-q", "--format", "json", "--output", filename, "--skip-db-update", "--offline-scan", image)
	var stdout bytes.Buffer
	var stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr
	err := cmd.Run()

	log.Info().Str("artifactDigest", artifact.Digest).Str("command", cmd.String()).Msg("Start scan artifact")

	defer func() {
		err := os.Remove(filename)
		if err != nil {
			log.Error().Err(err).Msg("Remove file failed")
		}
	}()

	if err != nil {
		log.Error().Err(err).Msg("Run trivy failed")
		statusChan <- daemon.DecoratorArtifactStatus{
			Daemon:  enums.DaemonVulnerability,
			Status:  enums.TaskCommonStatusFailed,
			Stdout:  stdout.Bytes(),
			Stderr:  stderr.Bytes(),
			Message: fmt.Sprintf("Run trivy failed: %s", err.Error()),
		}
		return err
	}

	var trivyObj trivyTypes.Report
	fileContent, err := os.Open(filename)
	if err != nil {
		log.Error().Err(err).Str("filename", filename).Msg("Open trivy file failed")
		statusChan <- daemon.DecoratorArtifactStatus{
			Daemon:  enums.DaemonVulnerability,
			Status:  enums.TaskCommonStatusFailed,
			Stdout:  []byte(""),
			Stderr:  []byte(""),
			Message: fmt.Sprintf("Open trivy file(%s) failed: %v", filename, err),
		}
		return err
	}
	err = json.NewDecoder(fileContent).Decode(&trivyObj)
	if err != nil {
		log.Error().Err(err).Str("filename", filename).Msg("Decode trivy file failed")
		statusChan <- daemon.DecoratorArtifactStatus{
			Daemon:  enums.DaemonVulnerability,
			Status:  enums.TaskCommonStatusFailed,
			Stdout:  []byte(""),
			Stderr:  []byte(""),
			Message: fmt.Sprintf("Decode trivy file(%s) failed: %v", filename, err),
		}
		return err
	}
	var report Report
	for _, result := range trivyObj.Results {
		for _, v := range result.Vulnerabilities {
			switch v.Severity {
			case "CRITICAL":
				report.Critical++
			case "HIGH":
				report.High++
			case "MEDIUM":
				report.Medium++
			case "LOW":
				report.Low++
			}
		}
	}
	reportBytes, err := json.Marshal(report)
	if err != nil {
		log.Error().Err(err).Msg("Marshal report failed")
		statusChan <- daemon.DecoratorArtifactStatus{Daemon: enums.DaemonVulnerability, Status: enums.TaskCommonStatusFailed, Message: err.Error()}
		return err
	}

	compressed, err := compress.Compress(filename)
	if err != nil {
		log.Error().Err(err).Msg("Compress file failed")
		statusChan <- daemon.DecoratorArtifactStatus{Daemon: enums.DaemonVulnerability, Status: enums.TaskCommonStatusFailed, Message: err.Error()}
		return err
	}

	log.Info().Str("artifactDigest", artifact.Digest).Msg("Success scan artifact")

	statusChan <- daemon.DecoratorArtifactStatus{Daemon: enums.DaemonVulnerability, Status: enums.TaskCommonStatusSuccess, Message: "", Raw: compressed, Result: reportBytes}

	return nil
}
