// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/auth (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=mocks/service.go -package=mocks github.com/go-sigma/sigma/pkg/auth Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	enums "github.com/go-sigma/sigma/pkg/types/enums"
	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Artifact mocks base method.
func (m *MockService) Artifact(arg0 echo.Context, arg1 int64, arg2 enums.Auth) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Artifact", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Artifact indicates an expected call of Artifact.
func (mr *MockServiceMockRecorder) Artifact(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Artifact", reflect.TypeOf((*MockService)(nil).Artifact), arg0, arg1, arg2)
}

// Namespace mocks base method.
func (m *MockService) Namespace(arg0 echo.Context, arg1 int64, arg2 enums.Auth) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Namespace indicates an expected call of Namespace.
func (mr *MockServiceMockRecorder) Namespace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockService)(nil).Namespace), arg0, arg1, arg2)
}

// Repository mocks base method.
func (m *MockService) Repository(arg0 echo.Context, arg1 int64, arg2 enums.Auth) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repository", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Repository indicates an expected call of Repository.
func (mr *MockServiceMockRecorder) Repository(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockService)(nil).Repository), arg0, arg1, arg2)
}

// Tag mocks base method.
func (m *MockService) Tag(arg0 echo.Context, arg1 int64, arg2 enums.Auth) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tag indicates an expected call of Tag.
func (mr *MockServiceMockRecorder) Tag(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockService)(nil).Tag), arg0, arg1, arg2)
}
