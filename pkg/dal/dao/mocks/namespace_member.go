// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/dal/dao (interfaces: NamespaceMemberService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/namespace_member.go -package=mocks github.com/go-sigma/sigma/pkg/dal/dao NamespaceMemberService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-sigma/sigma/pkg/dal/models"
	types "github.com/go-sigma/sigma/pkg/types"
	enums "github.com/go-sigma/sigma/pkg/types/enums"
	gomock "go.uber.org/mock/gomock"
)

// MockNamespaceMemberService is a mock of NamespaceMemberService interface.
type MockNamespaceMemberService struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceMemberServiceMockRecorder
}

// MockNamespaceMemberServiceMockRecorder is the mock recorder for MockNamespaceMemberService.
type MockNamespaceMemberServiceMockRecorder struct {
	mock *MockNamespaceMemberService
}

// NewMockNamespaceMemberService creates a new mock instance.
func NewMockNamespaceMemberService(ctrl *gomock.Controller) *MockNamespaceMemberService {
	mock := &MockNamespaceMemberService{ctrl: ctrl}
	mock.recorder = &MockNamespaceMemberServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceMemberService) EXPECT() *MockNamespaceMemberServiceMockRecorder {
	return m.recorder
}

// AddNamespaceMember mocks base method.
func (m *MockNamespaceMemberService) AddNamespaceMember(arg0 context.Context, arg1 int64, arg2 models.Namespace, arg3 enums.NamespaceRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamespaceMember", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNamespaceMember indicates an expected call of AddNamespaceMember.
func (mr *MockNamespaceMemberServiceMockRecorder) AddNamespaceMember(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamespaceMember", reflect.TypeOf((*MockNamespaceMemberService)(nil).AddNamespaceMember), arg0, arg1, arg2, arg3)
}

// CountNamespaceRole mocks base method.
func (m *MockNamespaceMemberService) CountNamespaceRole(arg0 context.Context, arg1, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountNamespaceRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountNamespaceRole indicates an expected call of CountNamespaceRole.
func (mr *MockNamespaceMemberServiceMockRecorder) CountNamespaceRole(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountNamespaceRole", reflect.TypeOf((*MockNamespaceMemberService)(nil).CountNamespaceRole), arg0, arg1, arg2)
}

// DeleteNamespaceRole mocks base method.
func (m *MockNamespaceMemberService) DeleteNamespaceRole(arg0 context.Context, arg1 int64, arg2 models.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespaceRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespaceRole indicates an expected call of DeleteNamespaceRole.
func (mr *MockNamespaceMemberServiceMockRecorder) DeleteNamespaceRole(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceRole", reflect.TypeOf((*MockNamespaceMemberService)(nil).DeleteNamespaceRole), arg0, arg1, arg2)
}

// GetNamespaceRole mocks base method.
func (m *MockNamespaceMemberService) GetNamespaceRole(arg0 context.Context, arg1, arg2 int64) (*models.NamespaceRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.NamespaceRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceRole indicates an expected call of GetNamespaceRole.
func (mr *MockNamespaceMemberServiceMockRecorder) GetNamespaceRole(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceRole", reflect.TypeOf((*MockNamespaceMemberService)(nil).GetNamespaceRole), arg0, arg1, arg2)
}

// ListNamespaceRole mocks base method.
func (m *MockNamespaceMemberService) ListNamespaceRole(arg0 context.Context, arg1 int64, arg2 *string, arg3 types.Pagination, arg4 types.Sortable) ([]*models.NamespaceRole, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaceRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.NamespaceRole)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNamespaceRole indicates an expected call of ListNamespaceRole.
func (mr *MockNamespaceMemberServiceMockRecorder) ListNamespaceRole(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaceRole", reflect.TypeOf((*MockNamespaceMemberService)(nil).ListNamespaceRole), arg0, arg1, arg2, arg3, arg4)
}

// UpdateNamespaceRole mocks base method.
func (m *MockNamespaceMemberService) UpdateNamespaceRole(arg0 context.Context, arg1 int64, arg2 models.Namespace, arg3 enums.NamespaceRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNamespaceRole indicates an expected call of UpdateNamespaceRole.
func (mr *MockNamespaceMemberServiceMockRecorder) UpdateNamespaceRole(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceRole", reflect.TypeOf((*MockNamespaceMemberService)(nil).UpdateNamespaceRole), arg0, arg1, arg2, arg3)
}
