// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/dal/dao (interfaces: CacheServiceFactory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/cache_factory.go -package=mocks github.com/go-sigma/sigma/pkg/dal/dao CacheServiceFactory
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dao "github.com/go-sigma/sigma/pkg/dal/dao"
	query "github.com/go-sigma/sigma/pkg/dal/query"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheServiceFactory is a mock of CacheServiceFactory interface.
type MockCacheServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceFactoryMockRecorder
}

// MockCacheServiceFactoryMockRecorder is the mock recorder for MockCacheServiceFactory.
type MockCacheServiceFactoryMockRecorder struct {
	mock *MockCacheServiceFactory
}

// NewMockCacheServiceFactory creates a new mock instance.
func NewMockCacheServiceFactory(ctrl *gomock.Controller) *MockCacheServiceFactory {
	mock := &MockCacheServiceFactory{ctrl: ctrl}
	mock.recorder = &MockCacheServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheServiceFactory) EXPECT() *MockCacheServiceFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockCacheServiceFactory) New(arg0 ...*query.Query) dao.CacheService {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(dao.CacheService)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockCacheServiceFactoryMockRecorder) New(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockCacheServiceFactory)(nil).New), arg0...)
}
