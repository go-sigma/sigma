// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/dal/dao (interfaces: LockerService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/locker.go -package=mocks github.com/go-sigma/sigma/pkg/dal/dao LockerService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLockerService is a mock of LockerService interface.
type MockLockerService struct {
	ctrl     *gomock.Controller
	recorder *MockLockerServiceMockRecorder
}

// MockLockerServiceMockRecorder is the mock recorder for MockLockerService.
type MockLockerServiceMockRecorder struct {
	mock *MockLockerService
}

// NewMockLockerService creates a new mock instance.
func NewMockLockerService(ctrl *gomock.Controller) *MockLockerService {
	mock := &MockLockerService{ctrl: ctrl}
	mock.recorder = &MockLockerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockerService) EXPECT() *MockLockerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLockerService) Create(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLockerServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLockerService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockLockerService) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLockerServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLockerService)(nil).Delete), arg0, arg1)
}
