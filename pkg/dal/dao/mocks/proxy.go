// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ximager/ximager/pkg/dal/dao (interfaces: ProxyTaskService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ximager/ximager/pkg/dal/models"
)

// MockProxyTaskService is a mock of ProxyTaskService interface.
type MockProxyTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockProxyTaskServiceMockRecorder
}

// MockProxyTaskServiceMockRecorder is the mock recorder for MockProxyTaskService.
type MockProxyTaskServiceMockRecorder struct {
	mock *MockProxyTaskService
}

// NewMockProxyTaskService creates a new mock instance.
func NewMockProxyTaskService(ctrl *gomock.Controller) *MockProxyTaskService {
	mock := &MockProxyTaskService{ctrl: ctrl}
	mock.recorder = &MockProxyTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyTaskService) EXPECT() *MockProxyTaskServiceMockRecorder {
	return m.recorder
}

// FindProxyTaskArtifactByBlob mocks base method.
func (m *MockProxyTaskService) FindProxyTaskArtifactByBlob(arg0 context.Context, arg1 string) ([]*models.ProxyTaskArtifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProxyTaskArtifactByBlob", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProxyTaskArtifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProxyTaskArtifactByBlob indicates an expected call of FindProxyTaskArtifactByBlob.
func (mr *MockProxyTaskServiceMockRecorder) FindProxyTaskArtifactByBlob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProxyTaskArtifactByBlob", reflect.TypeOf((*MockProxyTaskService)(nil).FindProxyTaskArtifactByBlob), arg0, arg1)
}

// FindProxyTaskTagByManifest mocks base method.
func (m *MockProxyTaskService) FindProxyTaskTagByManifest(arg0 context.Context, arg1 string) ([]*models.ProxyTaskTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProxyTaskTagByManifest", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProxyTaskTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProxyTaskTagByManifest indicates an expected call of FindProxyTaskTagByManifest.
func (mr *MockProxyTaskServiceMockRecorder) FindProxyTaskTagByManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProxyTaskTagByManifest", reflect.TypeOf((*MockProxyTaskService)(nil).FindProxyTaskTagByManifest), arg0, arg1)
}

// SaveProxyTaskArtifact mocks base method.
func (m *MockProxyTaskService) SaveProxyTaskArtifact(arg0 context.Context, arg1 *models.ProxyTaskArtifact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProxyTaskArtifact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProxyTaskArtifact indicates an expected call of SaveProxyTaskArtifact.
func (mr *MockProxyTaskServiceMockRecorder) SaveProxyTaskArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProxyTaskArtifact", reflect.TypeOf((*MockProxyTaskService)(nil).SaveProxyTaskArtifact), arg0, arg1)
}

// SaveProxyTaskTag mocks base method.
func (m *MockProxyTaskService) SaveProxyTaskTag(arg0 context.Context, arg1 *models.ProxyTaskTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProxyTaskTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProxyTaskTag indicates an expected call of SaveProxyTaskTag.
func (mr *MockProxyTaskServiceMockRecorder) SaveProxyTaskTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProxyTaskTag", reflect.TypeOf((*MockProxyTaskService)(nil).SaveProxyTaskTag), arg0, arg1)
}
