// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/dal/dao (interfaces: BuilderService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/builder.go -package=mocks github.com/go-sigma/sigma/pkg/dal/dao BuilderService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/go-sigma/sigma/pkg/dal/models"
	types "github.com/go-sigma/sigma/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockBuilderService is a mock of BuilderService interface.
type MockBuilderService struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderServiceMockRecorder
}

// MockBuilderServiceMockRecorder is the mock recorder for MockBuilderService.
type MockBuilderServiceMockRecorder struct {
	mock *MockBuilderService
}

// NewMockBuilderService creates a new mock instance.
func NewMockBuilderService(ctrl *gomock.Controller) *MockBuilderService {
	mock := &MockBuilderService{ctrl: ctrl}
	mock.recorder = &MockBuilderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderService) EXPECT() *MockBuilderServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBuilderService) Create(arg0 context.Context, arg1 *models.Builder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBuilderServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBuilderService)(nil).Create), arg0, arg1)
}

// CreateRunner mocks base method.
func (m *MockBuilderService) CreateRunner(arg0 context.Context, arg1 *models.BuilderRunner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRunner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRunner indicates an expected call of CreateRunner.
func (mr *MockBuilderServiceMockRecorder) CreateRunner(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRunner", reflect.TypeOf((*MockBuilderService)(nil).CreateRunner), arg0, arg1)
}

// Get mocks base method.
func (m *MockBuilderService) Get(arg0 context.Context, arg1 int64) (*models.Builder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*models.Builder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBuilderServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBuilderService)(nil).Get), arg0, arg1)
}

// GetByNextTrigger mocks base method.
func (m *MockBuilderService) GetByNextTrigger(arg0 context.Context, arg1 time.Time, arg2 int) ([]*models.Builder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNextTrigger", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Builder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNextTrigger indicates an expected call of GetByNextTrigger.
func (mr *MockBuilderServiceMockRecorder) GetByNextTrigger(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNextTrigger", reflect.TypeOf((*MockBuilderService)(nil).GetByNextTrigger), arg0, arg1, arg2)
}

// GetByRepositoryID mocks base method.
func (m *MockBuilderService) GetByRepositoryID(arg0 context.Context, arg1 int64) (*models.Builder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRepositoryID", arg0, arg1)
	ret0, _ := ret[0].(*models.Builder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRepositoryID indicates an expected call of GetByRepositoryID.
func (mr *MockBuilderServiceMockRecorder) GetByRepositoryID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRepositoryID", reflect.TypeOf((*MockBuilderService)(nil).GetByRepositoryID), arg0, arg1)
}

// GetByRepositoryIDs mocks base method.
func (m *MockBuilderService) GetByRepositoryIDs(arg0 context.Context, arg1 []int64) (map[int64]*models.Builder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRepositoryIDs", arg0, arg1)
	ret0, _ := ret[0].(map[int64]*models.Builder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRepositoryIDs indicates an expected call of GetByRepositoryIDs.
func (mr *MockBuilderServiceMockRecorder) GetByRepositoryIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRepositoryIDs", reflect.TypeOf((*MockBuilderService)(nil).GetByRepositoryIDs), arg0, arg1)
}

// GetRunner mocks base method.
func (m *MockBuilderService) GetRunner(arg0 context.Context, arg1 int64) (*models.BuilderRunner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunner", arg0, arg1)
	ret0, _ := ret[0].(*models.BuilderRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunner indicates an expected call of GetRunner.
func (mr *MockBuilderServiceMockRecorder) GetRunner(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunner", reflect.TypeOf((*MockBuilderService)(nil).GetRunner), arg0, arg1)
}

// ListRunners mocks base method.
func (m *MockBuilderService) ListRunners(arg0 context.Context, arg1 int64, arg2 types.Pagination, arg3 types.Sortable) ([]*models.BuilderRunner, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunners", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.BuilderRunner)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunners indicates an expected call of ListRunners.
func (mr *MockBuilderServiceMockRecorder) ListRunners(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunners", reflect.TypeOf((*MockBuilderService)(nil).ListRunners), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockBuilderService) Update(arg0 context.Context, arg1 int64, arg2 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBuilderServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBuilderService)(nil).Update), arg0, arg1, arg2)
}

// UpdateNextTrigger mocks base method.
func (m *MockBuilderService) UpdateNextTrigger(arg0 context.Context, arg1 int64, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNextTrigger", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNextTrigger indicates an expected call of UpdateNextTrigger.
func (mr *MockBuilderServiceMockRecorder) UpdateNextTrigger(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNextTrigger", reflect.TypeOf((*MockBuilderService)(nil).UpdateNextTrigger), arg0, arg1, arg2)
}

// UpdateRunner mocks base method.
func (m *MockBuilderService) UpdateRunner(arg0 context.Context, arg1, arg2 int64, arg3 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRunner", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRunner indicates an expected call of UpdateRunner.
func (mr *MockBuilderServiceMockRecorder) UpdateRunner(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunner", reflect.TypeOf((*MockBuilderService)(nil).UpdateRunner), arg0, arg1, arg2, arg3)
}
