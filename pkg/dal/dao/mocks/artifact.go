// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ximager/ximager/pkg/dal/dao (interfaces: ArtifactService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/ximager/ximager/pkg/dal/models"
	types "github.com/ximager/ximager/pkg/types"
	enums "github.com/ximager/ximager/pkg/types/enums"
	gomock "go.uber.org/mock/gomock"
)

// MockArtifactService is a mock of ArtifactService interface.
type MockArtifactService struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactServiceMockRecorder
}

// MockArtifactServiceMockRecorder is the mock recorder for MockArtifactService.
type MockArtifactServiceMockRecorder struct {
	mock *MockArtifactService
}

// NewMockArtifactService creates a new mock instance.
func NewMockArtifactService(ctrl *gomock.Controller) *MockArtifactService {
	mock := &MockArtifactService{ctrl: ctrl}
	mock.recorder = &MockArtifactServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactService) EXPECT() *MockArtifactServiceMockRecorder {
	return m.recorder
}

// AssociateArtifact mocks base method.
func (m *MockArtifactService) AssociateArtifact(arg0 context.Context, arg1 *models.Artifact, arg2 []*models.Artifact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateArtifact", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateArtifact indicates an expected call of AssociateArtifact.
func (mr *MockArtifactServiceMockRecorder) AssociateArtifact(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateArtifact", reflect.TypeOf((*MockArtifactService)(nil).AssociateArtifact), arg0, arg1, arg2)
}

// AssociateBlobs mocks base method.
func (m *MockArtifactService) AssociateBlobs(arg0 context.Context, arg1 *models.Artifact, arg2 []*models.Blob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateBlobs", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateBlobs indicates an expected call of AssociateBlobs.
func (mr *MockArtifactServiceMockRecorder) AssociateBlobs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateBlobs", reflect.TypeOf((*MockArtifactService)(nil).AssociateBlobs), arg0, arg1, arg2)
}

// CountArtifact mocks base method.
func (m *MockArtifactService) CountArtifact(arg0 context.Context, arg1 types.ListArtifactRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountArtifact", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountArtifact indicates an expected call of CountArtifact.
func (mr *MockArtifactServiceMockRecorder) CountArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountArtifact", reflect.TypeOf((*MockArtifactService)(nil).CountArtifact), arg0, arg1)
}

// CountByNamespace mocks base method.
func (m *MockArtifactService) CountByNamespace(arg0 context.Context, arg1 []int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByNamespace", arg0, arg1)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByNamespace indicates an expected call of CountByNamespace.
func (mr *MockArtifactServiceMockRecorder) CountByNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByNamespace", reflect.TypeOf((*MockArtifactService)(nil).CountByNamespace), arg0, arg1)
}

// CountByRepository mocks base method.
func (m *MockArtifactService) CountByRepository(arg0 context.Context, arg1 []int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByRepository", arg0, arg1)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByRepository indicates an expected call of CountByRepository.
func (mr *MockArtifactServiceMockRecorder) CountByRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByRepository", reflect.TypeOf((*MockArtifactService)(nil).CountByRepository), arg0, arg1)
}

// Create mocks base method.
func (m *MockArtifactService) Create(arg0 context.Context, arg1 *models.Artifact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockArtifactServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArtifactService)(nil).Create), arg0, arg1)
}

// DeleteByDigest mocks base method.
func (m *MockArtifactService) DeleteByDigest(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByDigest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByDigest indicates an expected call of DeleteByDigest.
func (mr *MockArtifactServiceMockRecorder) DeleteByDigest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByDigest", reflect.TypeOf((*MockArtifactService)(nil).DeleteByDigest), arg0, arg1, arg2)
}

// DeleteByID mocks base method.
func (m *MockArtifactService) DeleteByID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockArtifactServiceMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockArtifactService)(nil).DeleteByID), arg0, arg1)
}

// DeleteByIDs mocks base method.
func (m *MockArtifactService) DeleteByIDs(arg0 context.Context, arg1 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIDs indicates an expected call of DeleteByIDs.
func (mr *MockArtifactServiceMockRecorder) DeleteByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDs", reflect.TypeOf((*MockArtifactService)(nil).DeleteByIDs), arg0, arg1)
}

// FindAssociateWithArtifact mocks base method.
func (m *MockArtifactService) FindAssociateWithArtifact(arg0 context.Context, arg1 []int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAssociateWithArtifact", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAssociateWithArtifact indicates an expected call of FindAssociateWithArtifact.
func (mr *MockArtifactServiceMockRecorder) FindAssociateWithArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssociateWithArtifact", reflect.TypeOf((*MockArtifactService)(nil).FindAssociateWithArtifact), arg0, arg1)
}

// FindAssociateWithTag mocks base method.
func (m *MockArtifactService) FindAssociateWithTag(arg0 context.Context, arg1 []int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAssociateWithTag", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAssociateWithTag indicates an expected call of FindAssociateWithTag.
func (mr *MockArtifactServiceMockRecorder) FindAssociateWithTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssociateWithTag", reflect.TypeOf((*MockArtifactService)(nil).FindAssociateWithTag), arg0, arg1)
}

// FindWithLastPull mocks base method.
func (m *MockArtifactService) FindWithLastPull(arg0 context.Context, arg1 int64, arg2 time.Time, arg3, arg4 int64) ([]*models.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWithLastPull", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWithLastPull indicates an expected call of FindWithLastPull.
func (mr *MockArtifactServiceMockRecorder) FindWithLastPull(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWithLastPull", reflect.TypeOf((*MockArtifactService)(nil).FindWithLastPull), arg0, arg1, arg2, arg3, arg4)
}

// Get mocks base method.
func (m *MockArtifactService) Get(arg0 context.Context, arg1 int64) (*models.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*models.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockArtifactServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArtifactService)(nil).Get), arg0, arg1)
}

// GetByDigest mocks base method.
func (m *MockArtifactService) GetByDigest(arg0 context.Context, arg1 int64, arg2 string) (*models.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDigest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDigest indicates an expected call of GetByDigest.
func (mr *MockArtifactServiceMockRecorder) GetByDigest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDigest", reflect.TypeOf((*MockArtifactService)(nil).GetByDigest), arg0, arg1, arg2)
}

// GetByDigests mocks base method.
func (m *MockArtifactService) GetByDigests(arg0 context.Context, arg1 string, arg2 []string) ([]*models.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDigests", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDigests indicates an expected call of GetByDigests.
func (mr *MockArtifactServiceMockRecorder) GetByDigests(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDigests", reflect.TypeOf((*MockArtifactService)(nil).GetByDigests), arg0, arg1, arg2)
}

// Incr mocks base method.
func (m *MockArtifactService) Incr(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockArtifactServiceMockRecorder) Incr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockArtifactService)(nil).Incr), arg0, arg1)
}

// ListArtifact mocks base method.
func (m *MockArtifactService) ListArtifact(arg0 context.Context, arg1 types.ListArtifactRequest) ([]*models.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifact", arg0, arg1)
	ret0, _ := ret[0].([]*models.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifact indicates an expected call of ListArtifact.
func (mr *MockArtifactServiceMockRecorder) ListArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifact", reflect.TypeOf((*MockArtifactService)(nil).ListArtifact), arg0, arg1)
}

// SaveSbom mocks base method.
func (m *MockArtifactService) SaveSbom(arg0 context.Context, arg1 *models.ArtifactSbom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSbom", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSbom indicates an expected call of SaveSbom.
func (mr *MockArtifactServiceMockRecorder) SaveSbom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSbom", reflect.TypeOf((*MockArtifactService)(nil).SaveSbom), arg0, arg1)
}

// SaveVulnerability mocks base method.
func (m *MockArtifactService) SaveVulnerability(arg0 context.Context, arg1 *models.ArtifactVulnerability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVulnerability", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVulnerability indicates an expected call of SaveVulnerability.
func (mr *MockArtifactServiceMockRecorder) SaveVulnerability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVulnerability", reflect.TypeOf((*MockArtifactService)(nil).SaveVulnerability), arg0, arg1)
}

// UpdateSbomStatus mocks base method.
func (m *MockArtifactService) UpdateSbomStatus(arg0 context.Context, arg1 int64, arg2 enums.TaskCommonStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSbomStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSbomStatus indicates an expected call of UpdateSbomStatus.
func (mr *MockArtifactServiceMockRecorder) UpdateSbomStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSbomStatus", reflect.TypeOf((*MockArtifactService)(nil).UpdateSbomStatus), arg0, arg1, arg2)
}

// UpdateVulnerabilityStatus mocks base method.
func (m *MockArtifactService) UpdateVulnerabilityStatus(arg0 context.Context, arg1 int64, arg2 enums.TaskCommonStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVulnerabilityStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVulnerabilityStatus indicates an expected call of UpdateVulnerabilityStatus.
func (mr *MockArtifactServiceMockRecorder) UpdateVulnerabilityStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVulnerabilityStatus", reflect.TypeOf((*MockArtifactService)(nil).UpdateVulnerabilityStatus), arg0, arg1, arg2)
}
