// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/dal/dao (interfaces: ArtifactServiceFactory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/artifact_factory.go -package=mocks github.com/go-sigma/sigma/pkg/dal/dao ArtifactServiceFactory
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dao "github.com/go-sigma/sigma/pkg/dal/dao"
	query "github.com/go-sigma/sigma/pkg/dal/query"
	gomock "go.uber.org/mock/gomock"
)

// MockArtifactServiceFactory is a mock of ArtifactServiceFactory interface.
type MockArtifactServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactServiceFactoryMockRecorder
}

// MockArtifactServiceFactoryMockRecorder is the mock recorder for MockArtifactServiceFactory.
type MockArtifactServiceFactoryMockRecorder struct {
	mock *MockArtifactServiceFactory
}

// NewMockArtifactServiceFactory creates a new mock instance.
func NewMockArtifactServiceFactory(ctrl *gomock.Controller) *MockArtifactServiceFactory {
	mock := &MockArtifactServiceFactory{ctrl: ctrl}
	mock.recorder = &MockArtifactServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactServiceFactory) EXPECT() *MockArtifactServiceFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockArtifactServiceFactory) New(arg0 ...*query.Query) dao.ArtifactService {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(dao.ArtifactService)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockArtifactServiceFactoryMockRecorder) New(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockArtifactServiceFactory)(nil).New), arg0...)
}
