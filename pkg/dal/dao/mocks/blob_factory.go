// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ximager/ximager/pkg/dal/dao (interfaces: BlobServiceFactory)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	dao "github.com/ximager/ximager/pkg/dal/dao"
	query "github.com/ximager/ximager/pkg/dal/query"
	reflect "reflect"
)

// MockBlobServiceFactory is a mock of BlobServiceFactory interface
type MockBlobServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockBlobServiceFactoryMockRecorder
}

// MockBlobServiceFactoryMockRecorder is the mock recorder for MockBlobServiceFactory
type MockBlobServiceFactoryMockRecorder struct {
	mock *MockBlobServiceFactory
}

// NewMockBlobServiceFactory creates a new mock instance
func NewMockBlobServiceFactory(ctrl *gomock.Controller) *MockBlobServiceFactory {
	mock := &MockBlobServiceFactory{ctrl: ctrl}
	mock.recorder = &MockBlobServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobServiceFactory) EXPECT() *MockBlobServiceFactoryMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *MockBlobServiceFactory) New(arg0 ...*query.Query) dao.BlobService {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(dao.BlobService)
	return ret0
}

// New indicates an expected call of New
func (mr *MockBlobServiceFactoryMockRecorder) New(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockBlobServiceFactory)(nil).New), arg0...)
}
