// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/dal/dao (interfaces: UserService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-sigma/sigma/pkg/dal/models"
	enums "github.com/go-sigma/sigma/pkg/types/enums"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockUserService) Count(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUserServiceMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUserService)(nil).Count), arg0)
}

// Create mocks base method.
func (m *MockUserService) Create(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), arg0, arg1)
}

// CreateRecoverCode mocks base method.
func (m *MockUserService) CreateRecoverCode(arg0 context.Context, arg1 *models.UserRecoverCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoverCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecoverCode indicates an expected call of CreateRecoverCode.
func (mr *MockUserServiceMockRecorder) CreateRecoverCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoverCode", reflect.TypeOf((*MockUserService)(nil).CreateRecoverCode), arg0, arg1)
}

// DeleteRecoverCode mocks base method.
func (m *MockUserService) DeleteRecoverCode(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoverCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecoverCode indicates an expected call of DeleteRecoverCode.
func (mr *MockUserServiceMockRecorder) DeleteRecoverCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoverCode", reflect.TypeOf((*MockUserService)(nil).DeleteRecoverCode), arg0, arg1)
}

// GetByProvider mocks base method.
func (m *MockUserService) GetByProvider(arg0 context.Context, arg1 enums.Provider, arg2 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProvider", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProvider indicates an expected call of GetByProvider.
func (mr *MockUserServiceMockRecorder) GetByProvider(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProvider", reflect.TypeOf((*MockUserService)(nil).GetByProvider), arg0, arg1, arg2)
}

// GetByRecoverCode mocks base method.
func (m *MockUserService) GetByRecoverCode(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRecoverCode", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRecoverCode indicates an expected call of GetByRecoverCode.
func (mr *MockUserServiceMockRecorder) GetByRecoverCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRecoverCode", reflect.TypeOf((*MockUserService)(nil).GetByRecoverCode), arg0, arg1)
}

// GetByUsername mocks base method.
func (m *MockUserService) GetByUsername(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserServiceMockRecorder) GetByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserService)(nil).GetByUsername), arg0, arg1)
}

// GetRecoverCodeByUserID mocks base method.
func (m *MockUserService) GetRecoverCodeByUserID(arg0 context.Context, arg1 int64) (*models.UserRecoverCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoverCodeByUserID", arg0, arg1)
	ret0, _ := ret[0].(*models.UserRecoverCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoverCodeByUserID indicates an expected call of GetRecoverCodeByUserID.
func (mr *MockUserServiceMockRecorder) GetRecoverCodeByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoverCodeByUserID", reflect.TypeOf((*MockUserService)(nil).GetRecoverCodeByUserID), arg0, arg1)
}

// UpdateByID mocks base method.
func (m *MockUserService) UpdateByID(arg0 context.Context, arg1 int64, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockUserServiceMockRecorder) UpdateByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserService)(nil).UpdateByID), arg0, arg1, arg2)
}
