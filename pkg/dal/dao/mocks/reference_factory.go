// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ximager/ximager/pkg/dal/dao (interfaces: ReferenceServiceFactory)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	dao "github.com/ximager/ximager/pkg/dal/dao"
	query "github.com/ximager/ximager/pkg/dal/query"
	reflect "reflect"
)

// MockReferenceServiceFactory is a mock of ReferenceServiceFactory interface
type MockReferenceServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceServiceFactoryMockRecorder
}

// MockReferenceServiceFactoryMockRecorder is the mock recorder for MockReferenceServiceFactory
type MockReferenceServiceFactoryMockRecorder struct {
	mock *MockReferenceServiceFactory
}

// NewMockReferenceServiceFactory creates a new mock instance
func NewMockReferenceServiceFactory(ctrl *gomock.Controller) *MockReferenceServiceFactory {
	mock := &MockReferenceServiceFactory{ctrl: ctrl}
	mock.recorder = &MockReferenceServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReferenceServiceFactory) EXPECT() *MockReferenceServiceFactoryMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *MockReferenceServiceFactory) New(arg0 ...*query.Query) dao.ReferenceService {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(dao.ReferenceService)
	return ret0
}

// New indicates an expected call of New
func (mr *MockReferenceServiceFactoryMockRecorder) New(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockReferenceServiceFactory)(nil).New), arg0...)
}
