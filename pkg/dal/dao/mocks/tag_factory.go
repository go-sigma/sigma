// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/dal/dao (interfaces: TagServiceFactory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/tag_factory.go -package=mocks github.com/go-sigma/sigma/pkg/dal/dao TagServiceFactory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dao "github.com/go-sigma/sigma/pkg/dal/dao"
	query "github.com/go-sigma/sigma/pkg/dal/query"
	gomock "go.uber.org/mock/gomock"
)

// MockTagServiceFactory is a mock of TagServiceFactory interface.
type MockTagServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTagServiceFactoryMockRecorder
}

// MockTagServiceFactoryMockRecorder is the mock recorder for MockTagServiceFactory.
type MockTagServiceFactoryMockRecorder struct {
	mock *MockTagServiceFactory
}

// NewMockTagServiceFactory creates a new mock instance.
func NewMockTagServiceFactory(ctrl *gomock.Controller) *MockTagServiceFactory {
	mock := &MockTagServiceFactory{ctrl: ctrl}
	mock.recorder = &MockTagServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagServiceFactory) EXPECT() *MockTagServiceFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockTagServiceFactory) New(arg0 ...*query.Query) dao.TagService {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(dao.TagService)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockTagServiceFactoryMockRecorder) New(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockTagServiceFactory)(nil).New), arg0...)
}
