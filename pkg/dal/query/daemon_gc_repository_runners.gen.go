// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newDaemonGcRepositoryRunner(db *gorm.DB, opts ...gen.DOOption) daemonGcRepositoryRunner {
	_daemonGcRepositoryRunner := daemonGcRepositoryRunner{}

	_daemonGcRepositoryRunner.daemonGcRepositoryRunnerDo.UseDB(db, opts...)
	_daemonGcRepositoryRunner.daemonGcRepositoryRunnerDo.UseModel(&models.DaemonGcRepositoryRunner{})

	tableName := _daemonGcRepositoryRunner.daemonGcRepositoryRunnerDo.TableName()
	_daemonGcRepositoryRunner.ALL = field.NewAsterisk(tableName)
	_daemonGcRepositoryRunner.CreatedAt = field.NewTime(tableName, "created_at")
	_daemonGcRepositoryRunner.UpdatedAt = field.NewTime(tableName, "updated_at")
	_daemonGcRepositoryRunner.DeletedAt = field.NewUint(tableName, "deleted_at")
	_daemonGcRepositoryRunner.ID = field.NewInt64(tableName, "id")
	_daemonGcRepositoryRunner.Status = field.NewField(tableName, "status")
	_daemonGcRepositoryRunner.Message = field.NewBytes(tableName, "message")
	_daemonGcRepositoryRunner.NamespaceID = field.NewInt64(tableName, "namespace_id")
	_daemonGcRepositoryRunner.StartedAt = field.NewTime(tableName, "started_at")
	_daemonGcRepositoryRunner.EndedAt = field.NewTime(tableName, "ended_at")
	_daemonGcRepositoryRunner.Duration = field.NewInt64(tableName, "duration")
	_daemonGcRepositoryRunner.Namespace = daemonGcRepositoryRunnerBelongsToNamespace{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Namespace", "models.Namespace"),
	}

	_daemonGcRepositoryRunner.fillFieldMap()

	return _daemonGcRepositoryRunner
}

type daemonGcRepositoryRunner struct {
	daemonGcRepositoryRunnerDo daemonGcRepositoryRunnerDo

	ALL         field.Asterisk
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Uint
	ID          field.Int64
	Status      field.Field
	Message     field.Bytes
	NamespaceID field.Int64
	StartedAt   field.Time
	EndedAt     field.Time
	Duration    field.Int64
	Namespace   daemonGcRepositoryRunnerBelongsToNamespace

	fieldMap map[string]field.Expr
}

func (d daemonGcRepositoryRunner) Table(newTableName string) *daemonGcRepositoryRunner {
	d.daemonGcRepositoryRunnerDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d daemonGcRepositoryRunner) As(alias string) *daemonGcRepositoryRunner {
	d.daemonGcRepositoryRunnerDo.DO = *(d.daemonGcRepositoryRunnerDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *daemonGcRepositoryRunner) updateTableName(table string) *daemonGcRepositoryRunner {
	d.ALL = field.NewAsterisk(table)
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewUint(table, "deleted_at")
	d.ID = field.NewInt64(table, "id")
	d.Status = field.NewField(table, "status")
	d.Message = field.NewBytes(table, "message")
	d.NamespaceID = field.NewInt64(table, "namespace_id")
	d.StartedAt = field.NewTime(table, "started_at")
	d.EndedAt = field.NewTime(table, "ended_at")
	d.Duration = field.NewInt64(table, "duration")

	d.fillFieldMap()

	return d
}

func (d *daemonGcRepositoryRunner) WithContext(ctx context.Context) *daemonGcRepositoryRunnerDo {
	return d.daemonGcRepositoryRunnerDo.WithContext(ctx)
}

func (d daemonGcRepositoryRunner) TableName() string { return d.daemonGcRepositoryRunnerDo.TableName() }

func (d daemonGcRepositoryRunner) Alias() string { return d.daemonGcRepositoryRunnerDo.Alias() }

func (d daemonGcRepositoryRunner) Columns(cols ...field.Expr) gen.Columns {
	return d.daemonGcRepositoryRunnerDo.Columns(cols...)
}

func (d *daemonGcRepositoryRunner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *daemonGcRepositoryRunner) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["id"] = d.ID
	d.fieldMap["status"] = d.Status
	d.fieldMap["message"] = d.Message
	d.fieldMap["namespace_id"] = d.NamespaceID
	d.fieldMap["started_at"] = d.StartedAt
	d.fieldMap["ended_at"] = d.EndedAt
	d.fieldMap["duration"] = d.Duration

}

func (d daemonGcRepositoryRunner) clone(db *gorm.DB) daemonGcRepositoryRunner {
	d.daemonGcRepositoryRunnerDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d daemonGcRepositoryRunner) replaceDB(db *gorm.DB) daemonGcRepositoryRunner {
	d.daemonGcRepositoryRunnerDo.ReplaceDB(db)
	return d
}

type daemonGcRepositoryRunnerBelongsToNamespace struct {
	db *gorm.DB

	field.RelationField
}

func (a daemonGcRepositoryRunnerBelongsToNamespace) Where(conds ...field.Expr) *daemonGcRepositoryRunnerBelongsToNamespace {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a daemonGcRepositoryRunnerBelongsToNamespace) WithContext(ctx context.Context) *daemonGcRepositoryRunnerBelongsToNamespace {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a daemonGcRepositoryRunnerBelongsToNamespace) Session(session *gorm.Session) *daemonGcRepositoryRunnerBelongsToNamespace {
	a.db = a.db.Session(session)
	return &a
}

func (a daemonGcRepositoryRunnerBelongsToNamespace) Model(m *models.DaemonGcRepositoryRunner) *daemonGcRepositoryRunnerBelongsToNamespaceTx {
	return &daemonGcRepositoryRunnerBelongsToNamespaceTx{a.db.Model(m).Association(a.Name())}
}

type daemonGcRepositoryRunnerBelongsToNamespaceTx struct{ tx *gorm.Association }

func (a daemonGcRepositoryRunnerBelongsToNamespaceTx) Find() (result *models.Namespace, err error) {
	return result, a.tx.Find(&result)
}

func (a daemonGcRepositoryRunnerBelongsToNamespaceTx) Append(values ...*models.Namespace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a daemonGcRepositoryRunnerBelongsToNamespaceTx) Replace(values ...*models.Namespace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a daemonGcRepositoryRunnerBelongsToNamespaceTx) Delete(values ...*models.Namespace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a daemonGcRepositoryRunnerBelongsToNamespaceTx) Clear() error {
	return a.tx.Clear()
}

func (a daemonGcRepositoryRunnerBelongsToNamespaceTx) Count() int64 {
	return a.tx.Count()
}

type daemonGcRepositoryRunnerDo struct{ gen.DO }

func (d daemonGcRepositoryRunnerDo) Debug() *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Debug())
}

func (d daemonGcRepositoryRunnerDo) WithContext(ctx context.Context) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d daemonGcRepositoryRunnerDo) ReadDB() *daemonGcRepositoryRunnerDo {
	return d.Clauses(dbresolver.Read)
}

func (d daemonGcRepositoryRunnerDo) WriteDB() *daemonGcRepositoryRunnerDo {
	return d.Clauses(dbresolver.Write)
}

func (d daemonGcRepositoryRunnerDo) Session(config *gorm.Session) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Session(config))
}

func (d daemonGcRepositoryRunnerDo) Clauses(conds ...clause.Expression) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d daemonGcRepositoryRunnerDo) Returning(value interface{}, columns ...string) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d daemonGcRepositoryRunnerDo) Not(conds ...gen.Condition) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d daemonGcRepositoryRunnerDo) Or(conds ...gen.Condition) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d daemonGcRepositoryRunnerDo) Select(conds ...field.Expr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d daemonGcRepositoryRunnerDo) Where(conds ...gen.Condition) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d daemonGcRepositoryRunnerDo) Order(conds ...field.Expr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d daemonGcRepositoryRunnerDo) Distinct(cols ...field.Expr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d daemonGcRepositoryRunnerDo) Omit(cols ...field.Expr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d daemonGcRepositoryRunnerDo) Join(table schema.Tabler, on ...field.Expr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d daemonGcRepositoryRunnerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d daemonGcRepositoryRunnerDo) RightJoin(table schema.Tabler, on ...field.Expr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d daemonGcRepositoryRunnerDo) Group(cols ...field.Expr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d daemonGcRepositoryRunnerDo) Having(conds ...gen.Condition) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d daemonGcRepositoryRunnerDo) Limit(limit int) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d daemonGcRepositoryRunnerDo) Offset(offset int) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d daemonGcRepositoryRunnerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d daemonGcRepositoryRunnerDo) Unscoped() *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Unscoped())
}

func (d daemonGcRepositoryRunnerDo) Create(values ...*models.DaemonGcRepositoryRunner) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d daemonGcRepositoryRunnerDo) CreateInBatches(values []*models.DaemonGcRepositoryRunner, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d daemonGcRepositoryRunnerDo) Save(values ...*models.DaemonGcRepositoryRunner) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d daemonGcRepositoryRunnerDo) First() (*models.DaemonGcRepositoryRunner, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRunner), nil
	}
}

func (d daemonGcRepositoryRunnerDo) Take() (*models.DaemonGcRepositoryRunner, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRunner), nil
	}
}

func (d daemonGcRepositoryRunnerDo) Last() (*models.DaemonGcRepositoryRunner, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRunner), nil
	}
}

func (d daemonGcRepositoryRunnerDo) Find() ([]*models.DaemonGcRepositoryRunner, error) {
	result, err := d.DO.Find()
	return result.([]*models.DaemonGcRepositoryRunner), err
}

func (d daemonGcRepositoryRunnerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DaemonGcRepositoryRunner, err error) {
	buf := make([]*models.DaemonGcRepositoryRunner, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d daemonGcRepositoryRunnerDo) FindInBatches(result *[]*models.DaemonGcRepositoryRunner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d daemonGcRepositoryRunnerDo) Attrs(attrs ...field.AssignExpr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d daemonGcRepositoryRunnerDo) Assign(attrs ...field.AssignExpr) *daemonGcRepositoryRunnerDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d daemonGcRepositoryRunnerDo) Joins(fields ...field.RelationField) *daemonGcRepositoryRunnerDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d daemonGcRepositoryRunnerDo) Preload(fields ...field.RelationField) *daemonGcRepositoryRunnerDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d daemonGcRepositoryRunnerDo) FirstOrInit() (*models.DaemonGcRepositoryRunner, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRunner), nil
	}
}

func (d daemonGcRepositoryRunnerDo) FirstOrCreate() (*models.DaemonGcRepositoryRunner, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRunner), nil
	}
}

func (d daemonGcRepositoryRunnerDo) FindByPage(offset int, limit int) (result []*models.DaemonGcRepositoryRunner, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d daemonGcRepositoryRunnerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d daemonGcRepositoryRunnerDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d daemonGcRepositoryRunnerDo) Delete(models ...*models.DaemonGcRepositoryRunner) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *daemonGcRepositoryRunnerDo) withDO(do gen.Dao) *daemonGcRepositoryRunnerDo {
	d.DO = *do.(*gen.DO)
	return d
}
