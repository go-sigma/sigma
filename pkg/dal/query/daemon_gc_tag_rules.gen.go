// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newDaemonGcTagRule(db *gorm.DB, opts ...gen.DOOption) daemonGcTagRule {
	_daemonGcTagRule := daemonGcTagRule{}

	_daemonGcTagRule.daemonGcTagRuleDo.UseDB(db, opts...)
	_daemonGcTagRule.daemonGcTagRuleDo.UseModel(&models.DaemonGcTagRule{})

	tableName := _daemonGcTagRule.daemonGcTagRuleDo.TableName()
	_daemonGcTagRule.ALL = field.NewAsterisk(tableName)
	_daemonGcTagRule.CreatedAt = field.NewInt64(tableName, "created_at")
	_daemonGcTagRule.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_daemonGcTagRule.DeletedAt = field.NewUint64(tableName, "deleted_at")
	_daemonGcTagRule.ID = field.NewInt64(tableName, "id")
	_daemonGcTagRule.NamespaceID = field.NewInt64(tableName, "namespace_id")
	_daemonGcTagRule.IsRunning = field.NewBool(tableName, "is_running")
	_daemonGcTagRule.CronEnabled = field.NewBool(tableName, "cron_enabled")
	_daemonGcTagRule.CronRule = field.NewString(tableName, "cron_rule")
	_daemonGcTagRule.CronNextTrigger = field.NewTime(tableName, "cron_next_trigger")
	_daemonGcTagRule.RetentionRuleType = field.NewField(tableName, "retention_rule_type")
	_daemonGcTagRule.RetentionRuleAmount = field.NewInt64(tableName, "retention_rule_amount")
	_daemonGcTagRule.RetentionPattern = field.NewString(tableName, "retention_pattern")
	_daemonGcTagRule.Namespace = daemonGcTagRuleBelongsToNamespace{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Namespace", "models.Namespace"),
	}

	_daemonGcTagRule.fillFieldMap()

	return _daemonGcTagRule
}

type daemonGcTagRule struct {
	daemonGcTagRuleDo daemonGcTagRuleDo

	ALL                 field.Asterisk
	CreatedAt           field.Int64
	UpdatedAt           field.Int64
	DeletedAt           field.Uint64
	ID                  field.Int64
	NamespaceID         field.Int64
	IsRunning           field.Bool
	CronEnabled         field.Bool
	CronRule            field.String
	CronNextTrigger     field.Time
	RetentionRuleType   field.Field
	RetentionRuleAmount field.Int64
	RetentionPattern    field.String
	Namespace           daemonGcTagRuleBelongsToNamespace

	fieldMap map[string]field.Expr
}

func (d daemonGcTagRule) Table(newTableName string) *daemonGcTagRule {
	d.daemonGcTagRuleDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d daemonGcTagRule) As(alias string) *daemonGcTagRule {
	d.daemonGcTagRuleDo.DO = *(d.daemonGcTagRuleDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *daemonGcTagRule) updateTableName(table string) *daemonGcTagRule {
	d.ALL = field.NewAsterisk(table)
	d.CreatedAt = field.NewInt64(table, "created_at")
	d.UpdatedAt = field.NewInt64(table, "updated_at")
	d.DeletedAt = field.NewUint64(table, "deleted_at")
	d.ID = field.NewInt64(table, "id")
	d.NamespaceID = field.NewInt64(table, "namespace_id")
	d.IsRunning = field.NewBool(table, "is_running")
	d.CronEnabled = field.NewBool(table, "cron_enabled")
	d.CronRule = field.NewString(table, "cron_rule")
	d.CronNextTrigger = field.NewTime(table, "cron_next_trigger")
	d.RetentionRuleType = field.NewField(table, "retention_rule_type")
	d.RetentionRuleAmount = field.NewInt64(table, "retention_rule_amount")
	d.RetentionPattern = field.NewString(table, "retention_pattern")

	d.fillFieldMap()

	return d
}

func (d *daemonGcTagRule) WithContext(ctx context.Context) *daemonGcTagRuleDo {
	return d.daemonGcTagRuleDo.WithContext(ctx)
}

func (d daemonGcTagRule) TableName() string { return d.daemonGcTagRuleDo.TableName() }

func (d daemonGcTagRule) Alias() string { return d.daemonGcTagRuleDo.Alias() }

func (d daemonGcTagRule) Columns(cols ...field.Expr) gen.Columns {
	return d.daemonGcTagRuleDo.Columns(cols...)
}

func (d *daemonGcTagRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *daemonGcTagRule) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["id"] = d.ID
	d.fieldMap["namespace_id"] = d.NamespaceID
	d.fieldMap["is_running"] = d.IsRunning
	d.fieldMap["cron_enabled"] = d.CronEnabled
	d.fieldMap["cron_rule"] = d.CronRule
	d.fieldMap["cron_next_trigger"] = d.CronNextTrigger
	d.fieldMap["retention_rule_type"] = d.RetentionRuleType
	d.fieldMap["retention_rule_amount"] = d.RetentionRuleAmount
	d.fieldMap["retention_pattern"] = d.RetentionPattern

}

func (d daemonGcTagRule) clone(db *gorm.DB) daemonGcTagRule {
	d.daemonGcTagRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d daemonGcTagRule) replaceDB(db *gorm.DB) daemonGcTagRule {
	d.daemonGcTagRuleDo.ReplaceDB(db)
	return d
}

type daemonGcTagRuleBelongsToNamespace struct {
	db *gorm.DB

	field.RelationField
}

func (a daemonGcTagRuleBelongsToNamespace) Where(conds ...field.Expr) *daemonGcTagRuleBelongsToNamespace {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a daemonGcTagRuleBelongsToNamespace) WithContext(ctx context.Context) *daemonGcTagRuleBelongsToNamespace {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a daemonGcTagRuleBelongsToNamespace) Session(session *gorm.Session) *daemonGcTagRuleBelongsToNamespace {
	a.db = a.db.Session(session)
	return &a
}

func (a daemonGcTagRuleBelongsToNamespace) Model(m *models.DaemonGcTagRule) *daemonGcTagRuleBelongsToNamespaceTx {
	return &daemonGcTagRuleBelongsToNamespaceTx{a.db.Model(m).Association(a.Name())}
}

type daemonGcTagRuleBelongsToNamespaceTx struct{ tx *gorm.Association }

func (a daemonGcTagRuleBelongsToNamespaceTx) Find() (result *models.Namespace, err error) {
	return result, a.tx.Find(&result)
}

func (a daemonGcTagRuleBelongsToNamespaceTx) Append(values ...*models.Namespace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a daemonGcTagRuleBelongsToNamespaceTx) Replace(values ...*models.Namespace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a daemonGcTagRuleBelongsToNamespaceTx) Delete(values ...*models.Namespace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a daemonGcTagRuleBelongsToNamespaceTx) Clear() error {
	return a.tx.Clear()
}

func (a daemonGcTagRuleBelongsToNamespaceTx) Count() int64 {
	return a.tx.Count()
}

type daemonGcTagRuleDo struct{ gen.DO }

func (d daemonGcTagRuleDo) Debug() *daemonGcTagRuleDo {
	return d.withDO(d.DO.Debug())
}

func (d daemonGcTagRuleDo) WithContext(ctx context.Context) *daemonGcTagRuleDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d daemonGcTagRuleDo) ReadDB() *daemonGcTagRuleDo {
	return d.Clauses(dbresolver.Read)
}

func (d daemonGcTagRuleDo) WriteDB() *daemonGcTagRuleDo {
	return d.Clauses(dbresolver.Write)
}

func (d daemonGcTagRuleDo) Session(config *gorm.Session) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Session(config))
}

func (d daemonGcTagRuleDo) Clauses(conds ...clause.Expression) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d daemonGcTagRuleDo) Returning(value interface{}, columns ...string) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d daemonGcTagRuleDo) Not(conds ...gen.Condition) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d daemonGcTagRuleDo) Or(conds ...gen.Condition) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d daemonGcTagRuleDo) Select(conds ...field.Expr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d daemonGcTagRuleDo) Where(conds ...gen.Condition) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d daemonGcTagRuleDo) Order(conds ...field.Expr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d daemonGcTagRuleDo) Distinct(cols ...field.Expr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d daemonGcTagRuleDo) Omit(cols ...field.Expr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d daemonGcTagRuleDo) Join(table schema.Tabler, on ...field.Expr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d daemonGcTagRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d daemonGcTagRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d daemonGcTagRuleDo) Group(cols ...field.Expr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d daemonGcTagRuleDo) Having(conds ...gen.Condition) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d daemonGcTagRuleDo) Limit(limit int) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d daemonGcTagRuleDo) Offset(offset int) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d daemonGcTagRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d daemonGcTagRuleDo) Unscoped() *daemonGcTagRuleDo {
	return d.withDO(d.DO.Unscoped())
}

func (d daemonGcTagRuleDo) Create(values ...*models.DaemonGcTagRule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d daemonGcTagRuleDo) CreateInBatches(values []*models.DaemonGcTagRule, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d daemonGcTagRuleDo) Save(values ...*models.DaemonGcTagRule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d daemonGcTagRuleDo) First() (*models.DaemonGcTagRule, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcTagRule), nil
	}
}

func (d daemonGcTagRuleDo) Take() (*models.DaemonGcTagRule, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcTagRule), nil
	}
}

func (d daemonGcTagRuleDo) Last() (*models.DaemonGcTagRule, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcTagRule), nil
	}
}

func (d daemonGcTagRuleDo) Find() ([]*models.DaemonGcTagRule, error) {
	result, err := d.DO.Find()
	return result.([]*models.DaemonGcTagRule), err
}

func (d daemonGcTagRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DaemonGcTagRule, err error) {
	buf := make([]*models.DaemonGcTagRule, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d daemonGcTagRuleDo) FindInBatches(result *[]*models.DaemonGcTagRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d daemonGcTagRuleDo) Attrs(attrs ...field.AssignExpr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d daemonGcTagRuleDo) Assign(attrs ...field.AssignExpr) *daemonGcTagRuleDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d daemonGcTagRuleDo) Joins(fields ...field.RelationField) *daemonGcTagRuleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d daemonGcTagRuleDo) Preload(fields ...field.RelationField) *daemonGcTagRuleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d daemonGcTagRuleDo) FirstOrInit() (*models.DaemonGcTagRule, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcTagRule), nil
	}
}

func (d daemonGcTagRuleDo) FirstOrCreate() (*models.DaemonGcTagRule, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcTagRule), nil
	}
}

func (d daemonGcTagRuleDo) FindByPage(offset int, limit int) (result []*models.DaemonGcTagRule, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d daemonGcTagRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d daemonGcTagRuleDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d daemonGcTagRuleDo) Delete(models ...*models.DaemonGcTagRule) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *daemonGcTagRuleDo) withDO(do gen.Dao) *daemonGcTagRuleDo {
	d.DO = *do.(*gen.DO)
	return d
}
