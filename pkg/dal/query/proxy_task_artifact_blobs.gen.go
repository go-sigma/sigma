// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ximager/ximager/pkg/dal/models"
)

func newProxyTaskArtifactBlob(db *gorm.DB, opts ...gen.DOOption) proxyTaskArtifactBlob {
	_proxyTaskArtifactBlob := proxyTaskArtifactBlob{}

	_proxyTaskArtifactBlob.proxyTaskArtifactBlobDo.UseDB(db, opts...)
	_proxyTaskArtifactBlob.proxyTaskArtifactBlobDo.UseModel(&models.ProxyTaskArtifactBlob{})

	tableName := _proxyTaskArtifactBlob.proxyTaskArtifactBlobDo.TableName()
	_proxyTaskArtifactBlob.ALL = field.NewAsterisk(tableName)
	_proxyTaskArtifactBlob.CreatedAt = field.NewTime(tableName, "created_at")
	_proxyTaskArtifactBlob.UpdatedAt = field.NewTime(tableName, "updated_at")
	_proxyTaskArtifactBlob.DeletedAt = field.NewUint(tableName, "deleted_at")
	_proxyTaskArtifactBlob.ID = field.NewInt64(tableName, "id")
	_proxyTaskArtifactBlob.ProxyTaskArtifactID = field.NewInt64(tableName, "proxy_task_artifact_id")
	_proxyTaskArtifactBlob.Blob = field.NewString(tableName, "blob")

	_proxyTaskArtifactBlob.fillFieldMap()

	return _proxyTaskArtifactBlob
}

type proxyTaskArtifactBlob struct {
	proxyTaskArtifactBlobDo proxyTaskArtifactBlobDo

	ALL                 field.Asterisk
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Uint
	ID                  field.Int64
	ProxyTaskArtifactID field.Int64
	Blob                field.String

	fieldMap map[string]field.Expr
}

func (p proxyTaskArtifactBlob) Table(newTableName string) *proxyTaskArtifactBlob {
	p.proxyTaskArtifactBlobDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p proxyTaskArtifactBlob) As(alias string) *proxyTaskArtifactBlob {
	p.proxyTaskArtifactBlobDo.DO = *(p.proxyTaskArtifactBlobDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *proxyTaskArtifactBlob) updateTableName(table string) *proxyTaskArtifactBlob {
	p.ALL = field.NewAsterisk(table)
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewUint(table, "deleted_at")
	p.ID = field.NewInt64(table, "id")
	p.ProxyTaskArtifactID = field.NewInt64(table, "proxy_task_artifact_id")
	p.Blob = field.NewString(table, "blob")

	p.fillFieldMap()

	return p
}

func (p *proxyTaskArtifactBlob) WithContext(ctx context.Context) *proxyTaskArtifactBlobDo {
	return p.proxyTaskArtifactBlobDo.WithContext(ctx)
}

func (p proxyTaskArtifactBlob) TableName() string { return p.proxyTaskArtifactBlobDo.TableName() }

func (p proxyTaskArtifactBlob) Alias() string { return p.proxyTaskArtifactBlobDo.Alias() }

func (p *proxyTaskArtifactBlob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *proxyTaskArtifactBlob) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["id"] = p.ID
	p.fieldMap["proxy_task_artifact_id"] = p.ProxyTaskArtifactID
	p.fieldMap["blob"] = p.Blob
}

func (p proxyTaskArtifactBlob) clone(db *gorm.DB) proxyTaskArtifactBlob {
	p.proxyTaskArtifactBlobDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p proxyTaskArtifactBlob) replaceDB(db *gorm.DB) proxyTaskArtifactBlob {
	p.proxyTaskArtifactBlobDo.ReplaceDB(db)
	return p
}

type proxyTaskArtifactBlobDo struct{ gen.DO }

func (p proxyTaskArtifactBlobDo) Debug() *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Debug())
}

func (p proxyTaskArtifactBlobDo) WithContext(ctx context.Context) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p proxyTaskArtifactBlobDo) ReadDB() *proxyTaskArtifactBlobDo {
	return p.Clauses(dbresolver.Read)
}

func (p proxyTaskArtifactBlobDo) WriteDB() *proxyTaskArtifactBlobDo {
	return p.Clauses(dbresolver.Write)
}

func (p proxyTaskArtifactBlobDo) Session(config *gorm.Session) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Session(config))
}

func (p proxyTaskArtifactBlobDo) Clauses(conds ...clause.Expression) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p proxyTaskArtifactBlobDo) Returning(value interface{}, columns ...string) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p proxyTaskArtifactBlobDo) Not(conds ...gen.Condition) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p proxyTaskArtifactBlobDo) Or(conds ...gen.Condition) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p proxyTaskArtifactBlobDo) Select(conds ...field.Expr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p proxyTaskArtifactBlobDo) Where(conds ...gen.Condition) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p proxyTaskArtifactBlobDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *proxyTaskArtifactBlobDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p proxyTaskArtifactBlobDo) Order(conds ...field.Expr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p proxyTaskArtifactBlobDo) Distinct(cols ...field.Expr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p proxyTaskArtifactBlobDo) Omit(cols ...field.Expr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p proxyTaskArtifactBlobDo) Join(table schema.Tabler, on ...field.Expr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p proxyTaskArtifactBlobDo) LeftJoin(table schema.Tabler, on ...field.Expr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p proxyTaskArtifactBlobDo) RightJoin(table schema.Tabler, on ...field.Expr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p proxyTaskArtifactBlobDo) Group(cols ...field.Expr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p proxyTaskArtifactBlobDo) Having(conds ...gen.Condition) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p proxyTaskArtifactBlobDo) Limit(limit int) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p proxyTaskArtifactBlobDo) Offset(offset int) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p proxyTaskArtifactBlobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p proxyTaskArtifactBlobDo) Unscoped() *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Unscoped())
}

func (p proxyTaskArtifactBlobDo) Create(values ...*models.ProxyTaskArtifactBlob) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p proxyTaskArtifactBlobDo) CreateInBatches(values []*models.ProxyTaskArtifactBlob, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p proxyTaskArtifactBlobDo) Save(values ...*models.ProxyTaskArtifactBlob) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p proxyTaskArtifactBlobDo) First() (*models.ProxyTaskArtifactBlob, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTaskArtifactBlob), nil
	}
}

func (p proxyTaskArtifactBlobDo) Take() (*models.ProxyTaskArtifactBlob, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTaskArtifactBlob), nil
	}
}

func (p proxyTaskArtifactBlobDo) Last() (*models.ProxyTaskArtifactBlob, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTaskArtifactBlob), nil
	}
}

func (p proxyTaskArtifactBlobDo) Find() ([]*models.ProxyTaskArtifactBlob, error) {
	result, err := p.DO.Find()
	return result.([]*models.ProxyTaskArtifactBlob), err
}

func (p proxyTaskArtifactBlobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ProxyTaskArtifactBlob, err error) {
	buf := make([]*models.ProxyTaskArtifactBlob, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p proxyTaskArtifactBlobDo) FindInBatches(result *[]*models.ProxyTaskArtifactBlob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p proxyTaskArtifactBlobDo) Attrs(attrs ...field.AssignExpr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p proxyTaskArtifactBlobDo) Assign(attrs ...field.AssignExpr) *proxyTaskArtifactBlobDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p proxyTaskArtifactBlobDo) Joins(fields ...field.RelationField) *proxyTaskArtifactBlobDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p proxyTaskArtifactBlobDo) Preload(fields ...field.RelationField) *proxyTaskArtifactBlobDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p proxyTaskArtifactBlobDo) FirstOrInit() (*models.ProxyTaskArtifactBlob, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTaskArtifactBlob), nil
	}
}

func (p proxyTaskArtifactBlobDo) FirstOrCreate() (*models.ProxyTaskArtifactBlob, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTaskArtifactBlob), nil
	}
}

func (p proxyTaskArtifactBlobDo) FindByPage(offset int, limit int) (result []*models.ProxyTaskArtifactBlob, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p proxyTaskArtifactBlobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p proxyTaskArtifactBlobDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p proxyTaskArtifactBlobDo) Delete(models ...*models.ProxyTaskArtifactBlob) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *proxyTaskArtifactBlobDo) withDO(do gen.Dao) *proxyTaskArtifactBlobDo {
	p.DO = *do.(*gen.DO)
	return p
}
