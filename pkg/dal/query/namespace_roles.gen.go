// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newNamespaceRole(db *gorm.DB, opts ...gen.DOOption) namespaceRole {
	_namespaceRole := namespaceRole{}

	_namespaceRole.namespaceRoleDo.UseDB(db, opts...)
	_namespaceRole.namespaceRoleDo.UseModel(&models.NamespaceRole{})

	tableName := _namespaceRole.namespaceRoleDo.TableName()
	_namespaceRole.ALL = field.NewAsterisk(tableName)
	_namespaceRole.CreatedAt = field.NewTime(tableName, "created_at")
	_namespaceRole.UpdatedAt = field.NewTime(tableName, "updated_at")
	_namespaceRole.DeletedAt = field.NewUint(tableName, "deleted_at")
	_namespaceRole.ID = field.NewInt64(tableName, "id")
	_namespaceRole.UserID = field.NewInt64(tableName, "user_id")
	_namespaceRole.NamespaceID = field.NewInt64(tableName, "namespace_id")
	_namespaceRole.Role = field.NewField(tableName, "role")
	_namespaceRole.User = namespaceRoleBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "models.User"),
	}

	_namespaceRole.Namespace = namespaceRoleBelongsToNamespace{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Namespace", "models.Namespace"),
	}

	_namespaceRole.fillFieldMap()

	return _namespaceRole
}

type namespaceRole struct {
	namespaceRoleDo namespaceRoleDo

	ALL         field.Asterisk
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Uint
	ID          field.Int64
	UserID      field.Int64
	NamespaceID field.Int64
	Role        field.Field
	User        namespaceRoleBelongsToUser

	Namespace namespaceRoleBelongsToNamespace

	fieldMap map[string]field.Expr
}

func (n namespaceRole) Table(newTableName string) *namespaceRole {
	n.namespaceRoleDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n namespaceRole) As(alias string) *namespaceRole {
	n.namespaceRoleDo.DO = *(n.namespaceRoleDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *namespaceRole) updateTableName(table string) *namespaceRole {
	n.ALL = field.NewAsterisk(table)
	n.CreatedAt = field.NewTime(table, "created_at")
	n.UpdatedAt = field.NewTime(table, "updated_at")
	n.DeletedAt = field.NewUint(table, "deleted_at")
	n.ID = field.NewInt64(table, "id")
	n.UserID = field.NewInt64(table, "user_id")
	n.NamespaceID = field.NewInt64(table, "namespace_id")
	n.Role = field.NewField(table, "role")

	n.fillFieldMap()

	return n
}

func (n *namespaceRole) WithContext(ctx context.Context) *namespaceRoleDo {
	return n.namespaceRoleDo.WithContext(ctx)
}

func (n namespaceRole) TableName() string { return n.namespaceRoleDo.TableName() }

func (n namespaceRole) Alias() string { return n.namespaceRoleDo.Alias() }

func (n namespaceRole) Columns(cols ...field.Expr) gen.Columns {
	return n.namespaceRoleDo.Columns(cols...)
}

func (n *namespaceRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *namespaceRole) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 9)
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
	n.fieldMap["deleted_at"] = n.DeletedAt
	n.fieldMap["id"] = n.ID
	n.fieldMap["user_id"] = n.UserID
	n.fieldMap["namespace_id"] = n.NamespaceID
	n.fieldMap["role"] = n.Role

}

func (n namespaceRole) clone(db *gorm.DB) namespaceRole {
	n.namespaceRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n namespaceRole) replaceDB(db *gorm.DB) namespaceRole {
	n.namespaceRoleDo.ReplaceDB(db)
	return n
}

type namespaceRoleBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a namespaceRoleBelongsToUser) Where(conds ...field.Expr) *namespaceRoleBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a namespaceRoleBelongsToUser) WithContext(ctx context.Context) *namespaceRoleBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a namespaceRoleBelongsToUser) Session(session *gorm.Session) *namespaceRoleBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a namespaceRoleBelongsToUser) Model(m *models.NamespaceRole) *namespaceRoleBelongsToUserTx {
	return &namespaceRoleBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type namespaceRoleBelongsToUserTx struct{ tx *gorm.Association }

func (a namespaceRoleBelongsToUserTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a namespaceRoleBelongsToUserTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a namespaceRoleBelongsToUserTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a namespaceRoleBelongsToUserTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a namespaceRoleBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a namespaceRoleBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type namespaceRoleBelongsToNamespace struct {
	db *gorm.DB

	field.RelationField
}

func (a namespaceRoleBelongsToNamespace) Where(conds ...field.Expr) *namespaceRoleBelongsToNamespace {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a namespaceRoleBelongsToNamespace) WithContext(ctx context.Context) *namespaceRoleBelongsToNamespace {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a namespaceRoleBelongsToNamespace) Session(session *gorm.Session) *namespaceRoleBelongsToNamespace {
	a.db = a.db.Session(session)
	return &a
}

func (a namespaceRoleBelongsToNamespace) Model(m *models.NamespaceRole) *namespaceRoleBelongsToNamespaceTx {
	return &namespaceRoleBelongsToNamespaceTx{a.db.Model(m).Association(a.Name())}
}

type namespaceRoleBelongsToNamespaceTx struct{ tx *gorm.Association }

func (a namespaceRoleBelongsToNamespaceTx) Find() (result *models.Namespace, err error) {
	return result, a.tx.Find(&result)
}

func (a namespaceRoleBelongsToNamespaceTx) Append(values ...*models.Namespace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a namespaceRoleBelongsToNamespaceTx) Replace(values ...*models.Namespace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a namespaceRoleBelongsToNamespaceTx) Delete(values ...*models.Namespace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a namespaceRoleBelongsToNamespaceTx) Clear() error {
	return a.tx.Clear()
}

func (a namespaceRoleBelongsToNamespaceTx) Count() int64 {
	return a.tx.Count()
}

type namespaceRoleDo struct{ gen.DO }

func (n namespaceRoleDo) Debug() *namespaceRoleDo {
	return n.withDO(n.DO.Debug())
}

func (n namespaceRoleDo) WithContext(ctx context.Context) *namespaceRoleDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n namespaceRoleDo) ReadDB() *namespaceRoleDo {
	return n.Clauses(dbresolver.Read)
}

func (n namespaceRoleDo) WriteDB() *namespaceRoleDo {
	return n.Clauses(dbresolver.Write)
}

func (n namespaceRoleDo) Session(config *gorm.Session) *namespaceRoleDo {
	return n.withDO(n.DO.Session(config))
}

func (n namespaceRoleDo) Clauses(conds ...clause.Expression) *namespaceRoleDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n namespaceRoleDo) Returning(value interface{}, columns ...string) *namespaceRoleDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n namespaceRoleDo) Not(conds ...gen.Condition) *namespaceRoleDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n namespaceRoleDo) Or(conds ...gen.Condition) *namespaceRoleDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n namespaceRoleDo) Select(conds ...field.Expr) *namespaceRoleDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n namespaceRoleDo) Where(conds ...gen.Condition) *namespaceRoleDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n namespaceRoleDo) Order(conds ...field.Expr) *namespaceRoleDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n namespaceRoleDo) Distinct(cols ...field.Expr) *namespaceRoleDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n namespaceRoleDo) Omit(cols ...field.Expr) *namespaceRoleDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n namespaceRoleDo) Join(table schema.Tabler, on ...field.Expr) *namespaceRoleDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n namespaceRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *namespaceRoleDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n namespaceRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *namespaceRoleDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n namespaceRoleDo) Group(cols ...field.Expr) *namespaceRoleDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n namespaceRoleDo) Having(conds ...gen.Condition) *namespaceRoleDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n namespaceRoleDo) Limit(limit int) *namespaceRoleDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n namespaceRoleDo) Offset(offset int) *namespaceRoleDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n namespaceRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *namespaceRoleDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n namespaceRoleDo) Unscoped() *namespaceRoleDo {
	return n.withDO(n.DO.Unscoped())
}

func (n namespaceRoleDo) Create(values ...*models.NamespaceRole) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n namespaceRoleDo) CreateInBatches(values []*models.NamespaceRole, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n namespaceRoleDo) Save(values ...*models.NamespaceRole) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n namespaceRoleDo) First() (*models.NamespaceRole, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.NamespaceRole), nil
	}
}

func (n namespaceRoleDo) Take() (*models.NamespaceRole, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.NamespaceRole), nil
	}
}

func (n namespaceRoleDo) Last() (*models.NamespaceRole, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.NamespaceRole), nil
	}
}

func (n namespaceRoleDo) Find() ([]*models.NamespaceRole, error) {
	result, err := n.DO.Find()
	return result.([]*models.NamespaceRole), err
}

func (n namespaceRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.NamespaceRole, err error) {
	buf := make([]*models.NamespaceRole, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n namespaceRoleDo) FindInBatches(result *[]*models.NamespaceRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n namespaceRoleDo) Attrs(attrs ...field.AssignExpr) *namespaceRoleDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n namespaceRoleDo) Assign(attrs ...field.AssignExpr) *namespaceRoleDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n namespaceRoleDo) Joins(fields ...field.RelationField) *namespaceRoleDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n namespaceRoleDo) Preload(fields ...field.RelationField) *namespaceRoleDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n namespaceRoleDo) FirstOrInit() (*models.NamespaceRole, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.NamespaceRole), nil
	}
}

func (n namespaceRoleDo) FirstOrCreate() (*models.NamespaceRole, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.NamespaceRole), nil
	}
}

func (n namespaceRoleDo) FindByPage(offset int, limit int) (result []*models.NamespaceRole, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n namespaceRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n namespaceRoleDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n namespaceRoleDo) Delete(models ...*models.NamespaceRole) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *namespaceRoleDo) withDO(do gen.Dao) *namespaceRoleDo {
	n.DO = *do.(*gen.DO)
	return n
}
