// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newDaemonGcArtifactRecord(db *gorm.DB, opts ...gen.DOOption) daemonGcArtifactRecord {
	_daemonGcArtifactRecord := daemonGcArtifactRecord{}

	_daemonGcArtifactRecord.daemonGcArtifactRecordDo.UseDB(db, opts...)
	_daemonGcArtifactRecord.daemonGcArtifactRecordDo.UseModel(&models.DaemonGcArtifactRecord{})

	tableName := _daemonGcArtifactRecord.daemonGcArtifactRecordDo.TableName()
	_daemonGcArtifactRecord.ALL = field.NewAsterisk(tableName)
	_daemonGcArtifactRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_daemonGcArtifactRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_daemonGcArtifactRecord.DeletedAt = field.NewUint64(tableName, "deleted_at")
	_daemonGcArtifactRecord.ID = field.NewInt64(tableName, "id")
	_daemonGcArtifactRecord.RunnerID = field.NewInt64(tableName, "runner_id")
	_daemonGcArtifactRecord.Digest = field.NewString(tableName, "digest")
	_daemonGcArtifactRecord.Status = field.NewField(tableName, "status")
	_daemonGcArtifactRecord.Message = field.NewBytes(tableName, "message")
	_daemonGcArtifactRecord.Runner = daemonGcArtifactRecordBelongsToRunner{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Runner", "models.DaemonGcArtifactRunner"),
		Rule: struct {
			field.RelationField
			Namespace struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Runner.Rule", "models.DaemonGcArtifactRule"),
			Namespace: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Runner.Rule.Namespace", "models.Namespace"),
			},
		},
		OperateUser: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Runner.OperateUser", "models.User"),
		},
	}

	_daemonGcArtifactRecord.fillFieldMap()

	return _daemonGcArtifactRecord
}

type daemonGcArtifactRecord struct {
	daemonGcArtifactRecordDo daemonGcArtifactRecordDo

	ALL       field.Asterisk
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Uint64
	ID        field.Int64
	RunnerID  field.Int64
	Digest    field.String
	Status    field.Field
	Message   field.Bytes
	Runner    daemonGcArtifactRecordBelongsToRunner

	fieldMap map[string]field.Expr
}

func (d daemonGcArtifactRecord) Table(newTableName string) *daemonGcArtifactRecord {
	d.daemonGcArtifactRecordDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d daemonGcArtifactRecord) As(alias string) *daemonGcArtifactRecord {
	d.daemonGcArtifactRecordDo.DO = *(d.daemonGcArtifactRecordDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *daemonGcArtifactRecord) updateTableName(table string) *daemonGcArtifactRecord {
	d.ALL = field.NewAsterisk(table)
	d.CreatedAt = field.NewInt64(table, "created_at")
	d.UpdatedAt = field.NewInt64(table, "updated_at")
	d.DeletedAt = field.NewUint64(table, "deleted_at")
	d.ID = field.NewInt64(table, "id")
	d.RunnerID = field.NewInt64(table, "runner_id")
	d.Digest = field.NewString(table, "digest")
	d.Status = field.NewField(table, "status")
	d.Message = field.NewBytes(table, "message")

	d.fillFieldMap()

	return d
}

func (d *daemonGcArtifactRecord) WithContext(ctx context.Context) *daemonGcArtifactRecordDo {
	return d.daemonGcArtifactRecordDo.WithContext(ctx)
}

func (d daemonGcArtifactRecord) TableName() string { return d.daemonGcArtifactRecordDo.TableName() }

func (d daemonGcArtifactRecord) Alias() string { return d.daemonGcArtifactRecordDo.Alias() }

func (d daemonGcArtifactRecord) Columns(cols ...field.Expr) gen.Columns {
	return d.daemonGcArtifactRecordDo.Columns(cols...)
}

func (d *daemonGcArtifactRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *daemonGcArtifactRecord) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["id"] = d.ID
	d.fieldMap["runner_id"] = d.RunnerID
	d.fieldMap["digest"] = d.Digest
	d.fieldMap["status"] = d.Status
	d.fieldMap["message"] = d.Message

}

func (d daemonGcArtifactRecord) clone(db *gorm.DB) daemonGcArtifactRecord {
	d.daemonGcArtifactRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d daemonGcArtifactRecord) replaceDB(db *gorm.DB) daemonGcArtifactRecord {
	d.daemonGcArtifactRecordDo.ReplaceDB(db)
	return d
}

type daemonGcArtifactRecordBelongsToRunner struct {
	db *gorm.DB

	field.RelationField

	Rule struct {
		field.RelationField
		Namespace struct {
			field.RelationField
		}
	}
	OperateUser struct {
		field.RelationField
	}
}

func (a daemonGcArtifactRecordBelongsToRunner) Where(conds ...field.Expr) *daemonGcArtifactRecordBelongsToRunner {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a daemonGcArtifactRecordBelongsToRunner) WithContext(ctx context.Context) *daemonGcArtifactRecordBelongsToRunner {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a daemonGcArtifactRecordBelongsToRunner) Session(session *gorm.Session) *daemonGcArtifactRecordBelongsToRunner {
	a.db = a.db.Session(session)
	return &a
}

func (a daemonGcArtifactRecordBelongsToRunner) Model(m *models.DaemonGcArtifactRecord) *daemonGcArtifactRecordBelongsToRunnerTx {
	return &daemonGcArtifactRecordBelongsToRunnerTx{a.db.Model(m).Association(a.Name())}
}

type daemonGcArtifactRecordBelongsToRunnerTx struct{ tx *gorm.Association }

func (a daemonGcArtifactRecordBelongsToRunnerTx) Find() (result *models.DaemonGcArtifactRunner, err error) {
	return result, a.tx.Find(&result)
}

func (a daemonGcArtifactRecordBelongsToRunnerTx) Append(values ...*models.DaemonGcArtifactRunner) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a daemonGcArtifactRecordBelongsToRunnerTx) Replace(values ...*models.DaemonGcArtifactRunner) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a daemonGcArtifactRecordBelongsToRunnerTx) Delete(values ...*models.DaemonGcArtifactRunner) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a daemonGcArtifactRecordBelongsToRunnerTx) Clear() error {
	return a.tx.Clear()
}

func (a daemonGcArtifactRecordBelongsToRunnerTx) Count() int64 {
	return a.tx.Count()
}

type daemonGcArtifactRecordDo struct{ gen.DO }

func (d daemonGcArtifactRecordDo) Debug() *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Debug())
}

func (d daemonGcArtifactRecordDo) WithContext(ctx context.Context) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d daemonGcArtifactRecordDo) ReadDB() *daemonGcArtifactRecordDo {
	return d.Clauses(dbresolver.Read)
}

func (d daemonGcArtifactRecordDo) WriteDB() *daemonGcArtifactRecordDo {
	return d.Clauses(dbresolver.Write)
}

func (d daemonGcArtifactRecordDo) Session(config *gorm.Session) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Session(config))
}

func (d daemonGcArtifactRecordDo) Clauses(conds ...clause.Expression) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d daemonGcArtifactRecordDo) Returning(value interface{}, columns ...string) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d daemonGcArtifactRecordDo) Not(conds ...gen.Condition) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d daemonGcArtifactRecordDo) Or(conds ...gen.Condition) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d daemonGcArtifactRecordDo) Select(conds ...field.Expr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d daemonGcArtifactRecordDo) Where(conds ...gen.Condition) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d daemonGcArtifactRecordDo) Order(conds ...field.Expr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d daemonGcArtifactRecordDo) Distinct(cols ...field.Expr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d daemonGcArtifactRecordDo) Omit(cols ...field.Expr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d daemonGcArtifactRecordDo) Join(table schema.Tabler, on ...field.Expr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d daemonGcArtifactRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d daemonGcArtifactRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d daemonGcArtifactRecordDo) Group(cols ...field.Expr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d daemonGcArtifactRecordDo) Having(conds ...gen.Condition) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d daemonGcArtifactRecordDo) Limit(limit int) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d daemonGcArtifactRecordDo) Offset(offset int) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d daemonGcArtifactRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d daemonGcArtifactRecordDo) Unscoped() *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Unscoped())
}

func (d daemonGcArtifactRecordDo) Create(values ...*models.DaemonGcArtifactRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d daemonGcArtifactRecordDo) CreateInBatches(values []*models.DaemonGcArtifactRecord, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d daemonGcArtifactRecordDo) Save(values ...*models.DaemonGcArtifactRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d daemonGcArtifactRecordDo) First() (*models.DaemonGcArtifactRecord, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcArtifactRecord), nil
	}
}

func (d daemonGcArtifactRecordDo) Take() (*models.DaemonGcArtifactRecord, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcArtifactRecord), nil
	}
}

func (d daemonGcArtifactRecordDo) Last() (*models.DaemonGcArtifactRecord, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcArtifactRecord), nil
	}
}

func (d daemonGcArtifactRecordDo) Find() ([]*models.DaemonGcArtifactRecord, error) {
	result, err := d.DO.Find()
	return result.([]*models.DaemonGcArtifactRecord), err
}

func (d daemonGcArtifactRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DaemonGcArtifactRecord, err error) {
	buf := make([]*models.DaemonGcArtifactRecord, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d daemonGcArtifactRecordDo) FindInBatches(result *[]*models.DaemonGcArtifactRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d daemonGcArtifactRecordDo) Attrs(attrs ...field.AssignExpr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d daemonGcArtifactRecordDo) Assign(attrs ...field.AssignExpr) *daemonGcArtifactRecordDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d daemonGcArtifactRecordDo) Joins(fields ...field.RelationField) *daemonGcArtifactRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d daemonGcArtifactRecordDo) Preload(fields ...field.RelationField) *daemonGcArtifactRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d daemonGcArtifactRecordDo) FirstOrInit() (*models.DaemonGcArtifactRecord, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcArtifactRecord), nil
	}
}

func (d daemonGcArtifactRecordDo) FirstOrCreate() (*models.DaemonGcArtifactRecord, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcArtifactRecord), nil
	}
}

func (d daemonGcArtifactRecordDo) FindByPage(offset int, limit int) (result []*models.DaemonGcArtifactRecord, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d daemonGcArtifactRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d daemonGcArtifactRecordDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d daemonGcArtifactRecordDo) Delete(models ...*models.DaemonGcArtifactRecord) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *daemonGcArtifactRecordDo) withDO(do gen.Dao) *daemonGcArtifactRecordDo {
	d.DO = *do.(*gen.DO)
	return d
}
