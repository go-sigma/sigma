// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newBuilder(db *gorm.DB, opts ...gen.DOOption) builder {
	_builder := builder{}

	_builder.builderDo.UseDB(db, opts...)
	_builder.builderDo.UseModel(&models.Builder{})

	tableName := _builder.builderDo.TableName()
	_builder.ALL = field.NewAsterisk(tableName)
	_builder.CreatedAt = field.NewTime(tableName, "created_at")
	_builder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_builder.DeletedAt = field.NewUint(tableName, "deleted_at")
	_builder.ID = field.NewInt64(tableName, "id")

	_builder.fillFieldMap()

	return _builder
}

type builder struct {
	builderDo builderDo

	ALL       field.Asterisk
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Uint
	ID        field.Int64

	fieldMap map[string]field.Expr
}

func (b builder) Table(newTableName string) *builder {
	b.builderDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b builder) As(alias string) *builder {
	b.builderDo.DO = *(b.builderDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *builder) updateTableName(table string) *builder {
	b.ALL = field.NewAsterisk(table)
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewUint(table, "deleted_at")
	b.ID = field.NewInt64(table, "id")

	b.fillFieldMap()

	return b
}

func (b *builder) WithContext(ctx context.Context) *builderDo { return b.builderDo.WithContext(ctx) }

func (b builder) TableName() string { return b.builderDo.TableName() }

func (b builder) Alias() string { return b.builderDo.Alias() }

func (b builder) Columns(cols ...field.Expr) gen.Columns { return b.builderDo.Columns(cols...) }

func (b *builder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *builder) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
	b.fieldMap["id"] = b.ID
}

func (b builder) clone(db *gorm.DB) builder {
	b.builderDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b builder) replaceDB(db *gorm.DB) builder {
	b.builderDo.ReplaceDB(db)
	return b
}

type builderDo struct{ gen.DO }

func (b builderDo) Debug() *builderDo {
	return b.withDO(b.DO.Debug())
}

func (b builderDo) WithContext(ctx context.Context) *builderDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b builderDo) ReadDB() *builderDo {
	return b.Clauses(dbresolver.Read)
}

func (b builderDo) WriteDB() *builderDo {
	return b.Clauses(dbresolver.Write)
}

func (b builderDo) Session(config *gorm.Session) *builderDo {
	return b.withDO(b.DO.Session(config))
}

func (b builderDo) Clauses(conds ...clause.Expression) *builderDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b builderDo) Returning(value interface{}, columns ...string) *builderDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b builderDo) Not(conds ...gen.Condition) *builderDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b builderDo) Or(conds ...gen.Condition) *builderDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b builderDo) Select(conds ...field.Expr) *builderDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b builderDo) Where(conds ...gen.Condition) *builderDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b builderDo) Order(conds ...field.Expr) *builderDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b builderDo) Distinct(cols ...field.Expr) *builderDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b builderDo) Omit(cols ...field.Expr) *builderDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b builderDo) Join(table schema.Tabler, on ...field.Expr) *builderDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b builderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *builderDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b builderDo) RightJoin(table schema.Tabler, on ...field.Expr) *builderDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b builderDo) Group(cols ...field.Expr) *builderDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b builderDo) Having(conds ...gen.Condition) *builderDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b builderDo) Limit(limit int) *builderDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b builderDo) Offset(offset int) *builderDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b builderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *builderDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b builderDo) Unscoped() *builderDo {
	return b.withDO(b.DO.Unscoped())
}

func (b builderDo) Create(values ...*models.Builder) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b builderDo) CreateInBatches(values []*models.Builder, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b builderDo) Save(values ...*models.Builder) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b builderDo) First() (*models.Builder, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) Take() (*models.Builder, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) Last() (*models.Builder, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) Find() ([]*models.Builder, error) {
	result, err := b.DO.Find()
	return result.([]*models.Builder), err
}

func (b builderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Builder, err error) {
	buf := make([]*models.Builder, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b builderDo) FindInBatches(result *[]*models.Builder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b builderDo) Attrs(attrs ...field.AssignExpr) *builderDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b builderDo) Assign(attrs ...field.AssignExpr) *builderDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b builderDo) Joins(fields ...field.RelationField) *builderDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b builderDo) Preload(fields ...field.RelationField) *builderDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b builderDo) FirstOrInit() (*models.Builder, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) FirstOrCreate() (*models.Builder, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) FindByPage(offset int, limit int) (result []*models.Builder, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b builderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b builderDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b builderDo) Delete(models ...*models.Builder) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *builderDo) withDO(do gen.Dao) *builderDo {
	b.DO = *do.(*gen.DO)
	return b
}
