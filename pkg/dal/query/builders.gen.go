// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newBuilder(db *gorm.DB, opts ...gen.DOOption) builder {
	_builder := builder{}

	_builder.builderDo.UseDB(db, opts...)
	_builder.builderDo.UseModel(&models.Builder{})

	tableName := _builder.builderDo.TableName()
	_builder.ALL = field.NewAsterisk(tableName)
	_builder.CreatedAt = field.NewTime(tableName, "created_at")
	_builder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_builder.DeletedAt = field.NewUint(tableName, "deleted_at")
	_builder.ID = field.NewInt64(tableName, "id")
	_builder.RepositoryID = field.NewInt64(tableName, "repository_id")
	_builder.Active = field.NewBool(tableName, "active")
	_builder.Source = field.NewField(tableName, "source")
	_builder.CodeRepositoryID = field.NewInt64(tableName, "code_repository_id")
	_builder.Dockerfile = field.NewBytes(tableName, "dockerfile")
	_builder.ScmRepository = field.NewString(tableName, "scm_repository")
	_builder.ScmCredentialType = field.NewField(tableName, "scm_credential_type")
	_builder.ScmToken = field.NewString(tableName, "scm_token")
	_builder.ScmSshKey = field.NewString(tableName, "scm_ssh_key")
	_builder.ScmUsername = field.NewString(tableName, "scm_username")
	_builder.ScmPassword = field.NewString(tableName, "scm_password")
	_builder.ScmDepth = field.NewInt(tableName, "scm_depth")
	_builder.ScmSubmodule = field.NewBool(tableName, "scm_submodule")
	_builder.CronRule = field.NewString(tableName, "cron_rule")
	_builder.CronBranch = field.NewString(tableName, "cron_branch")
	_builder.CronTagTemplate = field.NewString(tableName, "cron_tag_template")
	_builder.CronNextTrigger = field.NewTime(tableName, "cron_next_trigger")
	_builder.WebhookBranchName = field.NewString(tableName, "webhook_branch_name")
	_builder.WebhookBranchTagTemplate = field.NewString(tableName, "webhook_branch_tag_template")
	_builder.WebhookTagTagTemplate = field.NewString(tableName, "webhook_tag_tag_template")
	_builder.BuildkitInsecureRegistries = field.NewString(tableName, "buildkit_insecure_registries")
	_builder.BuildkitContext = field.NewString(tableName, "buildkit_context")
	_builder.BuildkitDockerfile = field.NewString(tableName, "buildkit_dockerfile")
	_builder.BuildkitPlatforms = field.NewString(tableName, "buildkit_platforms")
	_builder.Repository = builderBelongsToRepository{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Repository", "models.Repository"),
		Namespace: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Repository.Namespace", "models.Namespace"),
		},
	}

	_builder.fillFieldMap()

	return _builder
}

type builder struct {
	builderDo builderDo

	ALL                        field.Asterisk
	CreatedAt                  field.Time
	UpdatedAt                  field.Time
	DeletedAt                  field.Uint
	ID                         field.Int64
	RepositoryID               field.Int64
	Active                     field.Bool
	Source                     field.Field
	CodeRepositoryID           field.Int64
	Dockerfile                 field.Bytes
	ScmRepository              field.String
	ScmCredentialType          field.Field
	ScmToken                   field.String
	ScmSshKey                  field.String
	ScmUsername                field.String
	ScmPassword                field.String
	ScmDepth                   field.Int
	ScmSubmodule               field.Bool
	CronRule                   field.String
	CronBranch                 field.String
	CronTagTemplate            field.String
	CronNextTrigger            field.Time
	WebhookBranchName          field.String
	WebhookBranchTagTemplate   field.String
	WebhookTagTagTemplate      field.String
	BuildkitInsecureRegistries field.String
	BuildkitContext            field.String
	BuildkitDockerfile         field.String
	BuildkitPlatforms          field.String
	Repository                 builderBelongsToRepository

	fieldMap map[string]field.Expr
}

func (b builder) Table(newTableName string) *builder {
	b.builderDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b builder) As(alias string) *builder {
	b.builderDo.DO = *(b.builderDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *builder) updateTableName(table string) *builder {
	b.ALL = field.NewAsterisk(table)
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewUint(table, "deleted_at")
	b.ID = field.NewInt64(table, "id")
	b.RepositoryID = field.NewInt64(table, "repository_id")
	b.Active = field.NewBool(table, "active")
	b.Source = field.NewField(table, "source")
	b.CodeRepositoryID = field.NewInt64(table, "code_repository_id")
	b.Dockerfile = field.NewBytes(table, "dockerfile")
	b.ScmRepository = field.NewString(table, "scm_repository")
	b.ScmCredentialType = field.NewField(table, "scm_credential_type")
	b.ScmToken = field.NewString(table, "scm_token")
	b.ScmSshKey = field.NewString(table, "scm_ssh_key")
	b.ScmUsername = field.NewString(table, "scm_username")
	b.ScmPassword = field.NewString(table, "scm_password")
	b.ScmDepth = field.NewInt(table, "scm_depth")
	b.ScmSubmodule = field.NewBool(table, "scm_submodule")
	b.CronRule = field.NewString(table, "cron_rule")
	b.CronBranch = field.NewString(table, "cron_branch")
	b.CronTagTemplate = field.NewString(table, "cron_tag_template")
	b.CronNextTrigger = field.NewTime(table, "cron_next_trigger")
	b.WebhookBranchName = field.NewString(table, "webhook_branch_name")
	b.WebhookBranchTagTemplate = field.NewString(table, "webhook_branch_tag_template")
	b.WebhookTagTagTemplate = field.NewString(table, "webhook_tag_tag_template")
	b.BuildkitInsecureRegistries = field.NewString(table, "buildkit_insecure_registries")
	b.BuildkitContext = field.NewString(table, "buildkit_context")
	b.BuildkitDockerfile = field.NewString(table, "buildkit_dockerfile")
	b.BuildkitPlatforms = field.NewString(table, "buildkit_platforms")

	b.fillFieldMap()

	return b
}

func (b *builder) WithContext(ctx context.Context) *builderDo { return b.builderDo.WithContext(ctx) }

func (b builder) TableName() string { return b.builderDo.TableName() }

func (b builder) Alias() string { return b.builderDo.Alias() }

func (b builder) Columns(cols ...field.Expr) gen.Columns { return b.builderDo.Columns(cols...) }

func (b *builder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *builder) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 29)
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
	b.fieldMap["id"] = b.ID
	b.fieldMap["repository_id"] = b.RepositoryID
	b.fieldMap["active"] = b.Active
	b.fieldMap["source"] = b.Source
	b.fieldMap["code_repository_id"] = b.CodeRepositoryID
	b.fieldMap["dockerfile"] = b.Dockerfile
	b.fieldMap["scm_repository"] = b.ScmRepository
	b.fieldMap["scm_credential_type"] = b.ScmCredentialType
	b.fieldMap["scm_token"] = b.ScmToken
	b.fieldMap["scm_ssh_key"] = b.ScmSshKey
	b.fieldMap["scm_username"] = b.ScmUsername
	b.fieldMap["scm_password"] = b.ScmPassword
	b.fieldMap["scm_depth"] = b.ScmDepth
	b.fieldMap["scm_submodule"] = b.ScmSubmodule
	b.fieldMap["cron_rule"] = b.CronRule
	b.fieldMap["cron_branch"] = b.CronBranch
	b.fieldMap["cron_tag_template"] = b.CronTagTemplate
	b.fieldMap["cron_next_trigger"] = b.CronNextTrigger
	b.fieldMap["webhook_branch_name"] = b.WebhookBranchName
	b.fieldMap["webhook_branch_tag_template"] = b.WebhookBranchTagTemplate
	b.fieldMap["webhook_tag_tag_template"] = b.WebhookTagTagTemplate
	b.fieldMap["buildkit_insecure_registries"] = b.BuildkitInsecureRegistries
	b.fieldMap["buildkit_context"] = b.BuildkitContext
	b.fieldMap["buildkit_dockerfile"] = b.BuildkitDockerfile
	b.fieldMap["buildkit_platforms"] = b.BuildkitPlatforms

}

func (b builder) clone(db *gorm.DB) builder {
	b.builderDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b builder) replaceDB(db *gorm.DB) builder {
	b.builderDo.ReplaceDB(db)
	return b
}

type builderBelongsToRepository struct {
	db *gorm.DB

	field.RelationField

	Namespace struct {
		field.RelationField
	}
}

func (a builderBelongsToRepository) Where(conds ...field.Expr) *builderBelongsToRepository {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a builderBelongsToRepository) WithContext(ctx context.Context) *builderBelongsToRepository {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a builderBelongsToRepository) Session(session *gorm.Session) *builderBelongsToRepository {
	a.db = a.db.Session(session)
	return &a
}

func (a builderBelongsToRepository) Model(m *models.Builder) *builderBelongsToRepositoryTx {
	return &builderBelongsToRepositoryTx{a.db.Model(m).Association(a.Name())}
}

type builderBelongsToRepositoryTx struct{ tx *gorm.Association }

func (a builderBelongsToRepositoryTx) Find() (result *models.Repository, err error) {
	return result, a.tx.Find(&result)
}

func (a builderBelongsToRepositoryTx) Append(values ...*models.Repository) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a builderBelongsToRepositoryTx) Replace(values ...*models.Repository) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a builderBelongsToRepositoryTx) Delete(values ...*models.Repository) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a builderBelongsToRepositoryTx) Clear() error {
	return a.tx.Clear()
}

func (a builderBelongsToRepositoryTx) Count() int64 {
	return a.tx.Count()
}

type builderDo struct{ gen.DO }

func (b builderDo) Debug() *builderDo {
	return b.withDO(b.DO.Debug())
}

func (b builderDo) WithContext(ctx context.Context) *builderDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b builderDo) ReadDB() *builderDo {
	return b.Clauses(dbresolver.Read)
}

func (b builderDo) WriteDB() *builderDo {
	return b.Clauses(dbresolver.Write)
}

func (b builderDo) Session(config *gorm.Session) *builderDo {
	return b.withDO(b.DO.Session(config))
}

func (b builderDo) Clauses(conds ...clause.Expression) *builderDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b builderDo) Returning(value interface{}, columns ...string) *builderDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b builderDo) Not(conds ...gen.Condition) *builderDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b builderDo) Or(conds ...gen.Condition) *builderDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b builderDo) Select(conds ...field.Expr) *builderDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b builderDo) Where(conds ...gen.Condition) *builderDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b builderDo) Order(conds ...field.Expr) *builderDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b builderDo) Distinct(cols ...field.Expr) *builderDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b builderDo) Omit(cols ...field.Expr) *builderDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b builderDo) Join(table schema.Tabler, on ...field.Expr) *builderDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b builderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *builderDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b builderDo) RightJoin(table schema.Tabler, on ...field.Expr) *builderDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b builderDo) Group(cols ...field.Expr) *builderDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b builderDo) Having(conds ...gen.Condition) *builderDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b builderDo) Limit(limit int) *builderDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b builderDo) Offset(offset int) *builderDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b builderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *builderDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b builderDo) Unscoped() *builderDo {
	return b.withDO(b.DO.Unscoped())
}

func (b builderDo) Create(values ...*models.Builder) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b builderDo) CreateInBatches(values []*models.Builder, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b builderDo) Save(values ...*models.Builder) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b builderDo) First() (*models.Builder, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) Take() (*models.Builder, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) Last() (*models.Builder, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) Find() ([]*models.Builder, error) {
	result, err := b.DO.Find()
	return result.([]*models.Builder), err
}

func (b builderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Builder, err error) {
	buf := make([]*models.Builder, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b builderDo) FindInBatches(result *[]*models.Builder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b builderDo) Attrs(attrs ...field.AssignExpr) *builderDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b builderDo) Assign(attrs ...field.AssignExpr) *builderDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b builderDo) Joins(fields ...field.RelationField) *builderDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b builderDo) Preload(fields ...field.RelationField) *builderDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b builderDo) FirstOrInit() (*models.Builder, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) FirstOrCreate() (*models.Builder, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Builder), nil
	}
}

func (b builderDo) FindByPage(offset int, limit int) (result []*models.Builder, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b builderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b builderDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b builderDo) Delete(models ...*models.Builder) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *builderDo) withDO(do gen.Dao) *builderDo {
	b.DO = *do.(*gen.DO)
	return b
}
