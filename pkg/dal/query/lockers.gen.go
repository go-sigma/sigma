// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newLocker(db *gorm.DB, opts ...gen.DOOption) locker {
	_locker := locker{}

	_locker.lockerDo.UseDB(db, opts...)
	_locker.lockerDo.UseModel(&models.Locker{})

	tableName := _locker.lockerDo.TableName()
	_locker.ALL = field.NewAsterisk(tableName)
	_locker.CreatedAt = field.NewInt64(tableName, "created_at")
	_locker.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_locker.DeletedAt = field.NewUint64(tableName, "deleted_at")
	_locker.ID = field.NewInt64(tableName, "id")
	_locker.Key = field.NewString(tableName, "key")
	_locker.Expire = field.NewInt64(tableName, "expire")
	_locker.Value = field.NewString(tableName, "value")

	_locker.fillFieldMap()

	return _locker
}

type locker struct {
	lockerDo lockerDo

	ALL       field.Asterisk
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Uint64
	ID        field.Int64
	Key       field.String
	Expire    field.Int64
	Value     field.String

	fieldMap map[string]field.Expr
}

func (l locker) Table(newTableName string) *locker {
	l.lockerDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l locker) As(alias string) *locker {
	l.lockerDo.DO = *(l.lockerDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *locker) updateTableName(table string) *locker {
	l.ALL = field.NewAsterisk(table)
	l.CreatedAt = field.NewInt64(table, "created_at")
	l.UpdatedAt = field.NewInt64(table, "updated_at")
	l.DeletedAt = field.NewUint64(table, "deleted_at")
	l.ID = field.NewInt64(table, "id")
	l.Key = field.NewString(table, "key")
	l.Expire = field.NewInt64(table, "expire")
	l.Value = field.NewString(table, "value")

	l.fillFieldMap()

	return l
}

func (l *locker) WithContext(ctx context.Context) *lockerDo { return l.lockerDo.WithContext(ctx) }

func (l locker) TableName() string { return l.lockerDo.TableName() }

func (l locker) Alias() string { return l.lockerDo.Alias() }

func (l locker) Columns(cols ...field.Expr) gen.Columns { return l.lockerDo.Columns(cols...) }

func (l *locker) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *locker) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["id"] = l.ID
	l.fieldMap["key"] = l.Key
	l.fieldMap["expire"] = l.Expire
	l.fieldMap["value"] = l.Value
}

func (l locker) clone(db *gorm.DB) locker {
	l.lockerDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l locker) replaceDB(db *gorm.DB) locker {
	l.lockerDo.ReplaceDB(db)
	return l
}

type lockerDo struct{ gen.DO }

func (l lockerDo) Debug() *lockerDo {
	return l.withDO(l.DO.Debug())
}

func (l lockerDo) WithContext(ctx context.Context) *lockerDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lockerDo) ReadDB() *lockerDo {
	return l.Clauses(dbresolver.Read)
}

func (l lockerDo) WriteDB() *lockerDo {
	return l.Clauses(dbresolver.Write)
}

func (l lockerDo) Session(config *gorm.Session) *lockerDo {
	return l.withDO(l.DO.Session(config))
}

func (l lockerDo) Clauses(conds ...clause.Expression) *lockerDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lockerDo) Returning(value interface{}, columns ...string) *lockerDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lockerDo) Not(conds ...gen.Condition) *lockerDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lockerDo) Or(conds ...gen.Condition) *lockerDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lockerDo) Select(conds ...field.Expr) *lockerDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lockerDo) Where(conds ...gen.Condition) *lockerDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lockerDo) Order(conds ...field.Expr) *lockerDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lockerDo) Distinct(cols ...field.Expr) *lockerDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lockerDo) Omit(cols ...field.Expr) *lockerDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lockerDo) Join(table schema.Tabler, on ...field.Expr) *lockerDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lockerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *lockerDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lockerDo) RightJoin(table schema.Tabler, on ...field.Expr) *lockerDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lockerDo) Group(cols ...field.Expr) *lockerDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lockerDo) Having(conds ...gen.Condition) *lockerDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lockerDo) Limit(limit int) *lockerDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lockerDo) Offset(offset int) *lockerDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lockerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *lockerDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lockerDo) Unscoped() *lockerDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lockerDo) Create(values ...*models.Locker) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lockerDo) CreateInBatches(values []*models.Locker, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lockerDo) Save(values ...*models.Locker) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lockerDo) First() (*models.Locker, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Locker), nil
	}
}

func (l lockerDo) Take() (*models.Locker, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Locker), nil
	}
}

func (l lockerDo) Last() (*models.Locker, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Locker), nil
	}
}

func (l lockerDo) Find() ([]*models.Locker, error) {
	result, err := l.DO.Find()
	return result.([]*models.Locker), err
}

func (l lockerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Locker, err error) {
	buf := make([]*models.Locker, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lockerDo) FindInBatches(result *[]*models.Locker, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lockerDo) Attrs(attrs ...field.AssignExpr) *lockerDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lockerDo) Assign(attrs ...field.AssignExpr) *lockerDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lockerDo) Joins(fields ...field.RelationField) *lockerDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lockerDo) Preload(fields ...field.RelationField) *lockerDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lockerDo) FirstOrInit() (*models.Locker, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Locker), nil
	}
}

func (l lockerDo) FirstOrCreate() (*models.Locker, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Locker), nil
	}
}

func (l lockerDo) FindByPage(offset int, limit int) (result []*models.Locker, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lockerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lockerDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lockerDo) Delete(models ...*models.Locker) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lockerDo) withDO(do gen.Dao) *lockerDo {
	l.DO = *do.(*gen.DO)
	return l
}
