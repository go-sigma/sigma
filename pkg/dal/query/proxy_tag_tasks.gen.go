// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ximager/ximager/pkg/dal/models"
)

func newProxyTagTask(db *gorm.DB, opts ...gen.DOOption) proxyTagTask {
	_proxyTagTask := proxyTagTask{}

	_proxyTagTask.proxyTagTaskDo.UseDB(db, opts...)
	_proxyTagTask.proxyTagTaskDo.UseModel(&models.ProxyTagTask{})

	tableName := _proxyTagTask.proxyTagTaskDo.TableName()
	_proxyTagTask.ALL = field.NewAsterisk(tableName)
	_proxyTagTask.CreatedAt = field.NewTime(tableName, "created_at")
	_proxyTagTask.UpdatedAt = field.NewTime(tableName, "updated_at")
	_proxyTagTask.DeletedAt = field.NewUint(tableName, "deleted_at")
	_proxyTagTask.ID = field.NewUint64(tableName, "id")
	_proxyTagTask.Manifest = field.NewString(tableName, "manifest")
	_proxyTagTask.Status = field.NewField(tableName, "status")
	_proxyTagTask.Message = field.NewString(tableName, "message")

	_proxyTagTask.fillFieldMap()

	return _proxyTagTask
}

type proxyTagTask struct {
	proxyTagTaskDo proxyTagTaskDo

	ALL       field.Asterisk
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Uint
	ID        field.Uint64
	Manifest  field.String
	Status    field.Field
	Message   field.String

	fieldMap map[string]field.Expr
}

func (p proxyTagTask) Table(newTableName string) *proxyTagTask {
	p.proxyTagTaskDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p proxyTagTask) As(alias string) *proxyTagTask {
	p.proxyTagTaskDo.DO = *(p.proxyTagTaskDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *proxyTagTask) updateTableName(table string) *proxyTagTask {
	p.ALL = field.NewAsterisk(table)
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewUint(table, "deleted_at")
	p.ID = field.NewUint64(table, "id")
	p.Manifest = field.NewString(table, "manifest")
	p.Status = field.NewField(table, "status")
	p.Message = field.NewString(table, "message")

	p.fillFieldMap()

	return p
}

func (p *proxyTagTask) WithContext(ctx context.Context) *proxyTagTaskDo {
	return p.proxyTagTaskDo.WithContext(ctx)
}

func (p proxyTagTask) TableName() string { return p.proxyTagTaskDo.TableName() }

func (p proxyTagTask) Alias() string { return p.proxyTagTaskDo.Alias() }

func (p *proxyTagTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *proxyTagTask) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["id"] = p.ID
	p.fieldMap["manifest"] = p.Manifest
	p.fieldMap["status"] = p.Status
	p.fieldMap["message"] = p.Message
}

func (p proxyTagTask) clone(db *gorm.DB) proxyTagTask {
	p.proxyTagTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p proxyTagTask) replaceDB(db *gorm.DB) proxyTagTask {
	p.proxyTagTaskDo.ReplaceDB(db)
	return p
}

type proxyTagTaskDo struct{ gen.DO }

func (p proxyTagTaskDo) Debug() *proxyTagTaskDo {
	return p.withDO(p.DO.Debug())
}

func (p proxyTagTaskDo) WithContext(ctx context.Context) *proxyTagTaskDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p proxyTagTaskDo) ReadDB() *proxyTagTaskDo {
	return p.Clauses(dbresolver.Read)
}

func (p proxyTagTaskDo) WriteDB() *proxyTagTaskDo {
	return p.Clauses(dbresolver.Write)
}

func (p proxyTagTaskDo) Session(config *gorm.Session) *proxyTagTaskDo {
	return p.withDO(p.DO.Session(config))
}

func (p proxyTagTaskDo) Clauses(conds ...clause.Expression) *proxyTagTaskDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p proxyTagTaskDo) Returning(value interface{}, columns ...string) *proxyTagTaskDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p proxyTagTaskDo) Not(conds ...gen.Condition) *proxyTagTaskDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p proxyTagTaskDo) Or(conds ...gen.Condition) *proxyTagTaskDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p proxyTagTaskDo) Select(conds ...field.Expr) *proxyTagTaskDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p proxyTagTaskDo) Where(conds ...gen.Condition) *proxyTagTaskDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p proxyTagTaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *proxyTagTaskDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p proxyTagTaskDo) Order(conds ...field.Expr) *proxyTagTaskDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p proxyTagTaskDo) Distinct(cols ...field.Expr) *proxyTagTaskDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p proxyTagTaskDo) Omit(cols ...field.Expr) *proxyTagTaskDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p proxyTagTaskDo) Join(table schema.Tabler, on ...field.Expr) *proxyTagTaskDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p proxyTagTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *proxyTagTaskDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p proxyTagTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) *proxyTagTaskDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p proxyTagTaskDo) Group(cols ...field.Expr) *proxyTagTaskDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p proxyTagTaskDo) Having(conds ...gen.Condition) *proxyTagTaskDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p proxyTagTaskDo) Limit(limit int) *proxyTagTaskDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p proxyTagTaskDo) Offset(offset int) *proxyTagTaskDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p proxyTagTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *proxyTagTaskDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p proxyTagTaskDo) Unscoped() *proxyTagTaskDo {
	return p.withDO(p.DO.Unscoped())
}

func (p proxyTagTaskDo) Create(values ...*models.ProxyTagTask) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p proxyTagTaskDo) CreateInBatches(values []*models.ProxyTagTask, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p proxyTagTaskDo) Save(values ...*models.ProxyTagTask) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p proxyTagTaskDo) First() (*models.ProxyTagTask, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTagTask), nil
	}
}

func (p proxyTagTaskDo) Take() (*models.ProxyTagTask, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTagTask), nil
	}
}

func (p proxyTagTaskDo) Last() (*models.ProxyTagTask, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTagTask), nil
	}
}

func (p proxyTagTaskDo) Find() ([]*models.ProxyTagTask, error) {
	result, err := p.DO.Find()
	return result.([]*models.ProxyTagTask), err
}

func (p proxyTagTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ProxyTagTask, err error) {
	buf := make([]*models.ProxyTagTask, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p proxyTagTaskDo) FindInBatches(result *[]*models.ProxyTagTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p proxyTagTaskDo) Attrs(attrs ...field.AssignExpr) *proxyTagTaskDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p proxyTagTaskDo) Assign(attrs ...field.AssignExpr) *proxyTagTaskDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p proxyTagTaskDo) Joins(fields ...field.RelationField) *proxyTagTaskDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p proxyTagTaskDo) Preload(fields ...field.RelationField) *proxyTagTaskDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p proxyTagTaskDo) FirstOrInit() (*models.ProxyTagTask, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTagTask), nil
	}
}

func (p proxyTagTaskDo) FirstOrCreate() (*models.ProxyTagTask, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProxyTagTask), nil
	}
}

func (p proxyTagTaskDo) FindByPage(offset int, limit int) (result []*models.ProxyTagTask, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p proxyTagTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p proxyTagTaskDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p proxyTagTaskDo) Delete(models ...*models.ProxyTagTask) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *proxyTagTaskDo) withDO(do gen.Dao) *proxyTagTaskDo {
	p.DO = *do.(*gen.DO)
	return p
}
