// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newDaemonGcRepositoryRecord(db *gorm.DB, opts ...gen.DOOption) daemonGcRepositoryRecord {
	_daemonGcRepositoryRecord := daemonGcRepositoryRecord{}

	_daemonGcRepositoryRecord.daemonGcRepositoryRecordDo.UseDB(db, opts...)
	_daemonGcRepositoryRecord.daemonGcRepositoryRecordDo.UseModel(&models.DaemonGcRepositoryRecord{})

	tableName := _daemonGcRepositoryRecord.daemonGcRepositoryRecordDo.TableName()
	_daemonGcRepositoryRecord.ALL = field.NewAsterisk(tableName)
	_daemonGcRepositoryRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_daemonGcRepositoryRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_daemonGcRepositoryRecord.DeletedAt = field.NewUint64(tableName, "deleted_at")
	_daemonGcRepositoryRecord.ID = field.NewInt64(tableName, "id")
	_daemonGcRepositoryRecord.RunnerID = field.NewInt64(tableName, "runner_id")
	_daemonGcRepositoryRecord.Repository = field.NewString(tableName, "repository")
	_daemonGcRepositoryRecord.Status = field.NewField(tableName, "status")
	_daemonGcRepositoryRecord.Message = field.NewBytes(tableName, "message")
	_daemonGcRepositoryRecord.Runner = daemonGcRepositoryRecordBelongsToRunner{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Runner", "models.DaemonGcRepositoryRunner"),
		Rule: struct {
			field.RelationField
			Namespace struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Runner.Rule", "models.DaemonGcRepositoryRule"),
			Namespace: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Runner.Rule.Namespace", "models.Namespace"),
			},
		},
	}

	_daemonGcRepositoryRecord.fillFieldMap()

	return _daemonGcRepositoryRecord
}

type daemonGcRepositoryRecord struct {
	daemonGcRepositoryRecordDo daemonGcRepositoryRecordDo

	ALL        field.Asterisk
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Uint64
	ID         field.Int64
	RunnerID   field.Int64
	Repository field.String
	Status     field.Field
	Message    field.Bytes
	Runner     daemonGcRepositoryRecordBelongsToRunner

	fieldMap map[string]field.Expr
}

func (d daemonGcRepositoryRecord) Table(newTableName string) *daemonGcRepositoryRecord {
	d.daemonGcRepositoryRecordDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d daemonGcRepositoryRecord) As(alias string) *daemonGcRepositoryRecord {
	d.daemonGcRepositoryRecordDo.DO = *(d.daemonGcRepositoryRecordDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *daemonGcRepositoryRecord) updateTableName(table string) *daemonGcRepositoryRecord {
	d.ALL = field.NewAsterisk(table)
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewUint64(table, "deleted_at")
	d.ID = field.NewInt64(table, "id")
	d.RunnerID = field.NewInt64(table, "runner_id")
	d.Repository = field.NewString(table, "repository")
	d.Status = field.NewField(table, "status")
	d.Message = field.NewBytes(table, "message")

	d.fillFieldMap()

	return d
}

func (d *daemonGcRepositoryRecord) WithContext(ctx context.Context) *daemonGcRepositoryRecordDo {
	return d.daemonGcRepositoryRecordDo.WithContext(ctx)
}

func (d daemonGcRepositoryRecord) TableName() string { return d.daemonGcRepositoryRecordDo.TableName() }

func (d daemonGcRepositoryRecord) Alias() string { return d.daemonGcRepositoryRecordDo.Alias() }

func (d daemonGcRepositoryRecord) Columns(cols ...field.Expr) gen.Columns {
	return d.daemonGcRepositoryRecordDo.Columns(cols...)
}

func (d *daemonGcRepositoryRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *daemonGcRepositoryRecord) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["id"] = d.ID
	d.fieldMap["runner_id"] = d.RunnerID
	d.fieldMap["repository"] = d.Repository
	d.fieldMap["status"] = d.Status
	d.fieldMap["message"] = d.Message

}

func (d daemonGcRepositoryRecord) clone(db *gorm.DB) daemonGcRepositoryRecord {
	d.daemonGcRepositoryRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d daemonGcRepositoryRecord) replaceDB(db *gorm.DB) daemonGcRepositoryRecord {
	d.daemonGcRepositoryRecordDo.ReplaceDB(db)
	return d
}

type daemonGcRepositoryRecordBelongsToRunner struct {
	db *gorm.DB

	field.RelationField

	Rule struct {
		field.RelationField
		Namespace struct {
			field.RelationField
		}
	}
}

func (a daemonGcRepositoryRecordBelongsToRunner) Where(conds ...field.Expr) *daemonGcRepositoryRecordBelongsToRunner {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a daemonGcRepositoryRecordBelongsToRunner) WithContext(ctx context.Context) *daemonGcRepositoryRecordBelongsToRunner {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a daemonGcRepositoryRecordBelongsToRunner) Session(session *gorm.Session) *daemonGcRepositoryRecordBelongsToRunner {
	a.db = a.db.Session(session)
	return &a
}

func (a daemonGcRepositoryRecordBelongsToRunner) Model(m *models.DaemonGcRepositoryRecord) *daemonGcRepositoryRecordBelongsToRunnerTx {
	return &daemonGcRepositoryRecordBelongsToRunnerTx{a.db.Model(m).Association(a.Name())}
}

type daemonGcRepositoryRecordBelongsToRunnerTx struct{ tx *gorm.Association }

func (a daemonGcRepositoryRecordBelongsToRunnerTx) Find() (result *models.DaemonGcRepositoryRunner, err error) {
	return result, a.tx.Find(&result)
}

func (a daemonGcRepositoryRecordBelongsToRunnerTx) Append(values ...*models.DaemonGcRepositoryRunner) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a daemonGcRepositoryRecordBelongsToRunnerTx) Replace(values ...*models.DaemonGcRepositoryRunner) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a daemonGcRepositoryRecordBelongsToRunnerTx) Delete(values ...*models.DaemonGcRepositoryRunner) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a daemonGcRepositoryRecordBelongsToRunnerTx) Clear() error {
	return a.tx.Clear()
}

func (a daemonGcRepositoryRecordBelongsToRunnerTx) Count() int64 {
	return a.tx.Count()
}

type daemonGcRepositoryRecordDo struct{ gen.DO }

func (d daemonGcRepositoryRecordDo) Debug() *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Debug())
}

func (d daemonGcRepositoryRecordDo) WithContext(ctx context.Context) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d daemonGcRepositoryRecordDo) ReadDB() *daemonGcRepositoryRecordDo {
	return d.Clauses(dbresolver.Read)
}

func (d daemonGcRepositoryRecordDo) WriteDB() *daemonGcRepositoryRecordDo {
	return d.Clauses(dbresolver.Write)
}

func (d daemonGcRepositoryRecordDo) Session(config *gorm.Session) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Session(config))
}

func (d daemonGcRepositoryRecordDo) Clauses(conds ...clause.Expression) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d daemonGcRepositoryRecordDo) Returning(value interface{}, columns ...string) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d daemonGcRepositoryRecordDo) Not(conds ...gen.Condition) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d daemonGcRepositoryRecordDo) Or(conds ...gen.Condition) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d daemonGcRepositoryRecordDo) Select(conds ...field.Expr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d daemonGcRepositoryRecordDo) Where(conds ...gen.Condition) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d daemonGcRepositoryRecordDo) Order(conds ...field.Expr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d daemonGcRepositoryRecordDo) Distinct(cols ...field.Expr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d daemonGcRepositoryRecordDo) Omit(cols ...field.Expr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d daemonGcRepositoryRecordDo) Join(table schema.Tabler, on ...field.Expr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d daemonGcRepositoryRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d daemonGcRepositoryRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d daemonGcRepositoryRecordDo) Group(cols ...field.Expr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d daemonGcRepositoryRecordDo) Having(conds ...gen.Condition) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d daemonGcRepositoryRecordDo) Limit(limit int) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d daemonGcRepositoryRecordDo) Offset(offset int) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d daemonGcRepositoryRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d daemonGcRepositoryRecordDo) Unscoped() *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Unscoped())
}

func (d daemonGcRepositoryRecordDo) Create(values ...*models.DaemonGcRepositoryRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d daemonGcRepositoryRecordDo) CreateInBatches(values []*models.DaemonGcRepositoryRecord, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d daemonGcRepositoryRecordDo) Save(values ...*models.DaemonGcRepositoryRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d daemonGcRepositoryRecordDo) First() (*models.DaemonGcRepositoryRecord, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRecord), nil
	}
}

func (d daemonGcRepositoryRecordDo) Take() (*models.DaemonGcRepositoryRecord, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRecord), nil
	}
}

func (d daemonGcRepositoryRecordDo) Last() (*models.DaemonGcRepositoryRecord, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRecord), nil
	}
}

func (d daemonGcRepositoryRecordDo) Find() ([]*models.DaemonGcRepositoryRecord, error) {
	result, err := d.DO.Find()
	return result.([]*models.DaemonGcRepositoryRecord), err
}

func (d daemonGcRepositoryRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DaemonGcRepositoryRecord, err error) {
	buf := make([]*models.DaemonGcRepositoryRecord, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d daemonGcRepositoryRecordDo) FindInBatches(result *[]*models.DaemonGcRepositoryRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d daemonGcRepositoryRecordDo) Attrs(attrs ...field.AssignExpr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d daemonGcRepositoryRecordDo) Assign(attrs ...field.AssignExpr) *daemonGcRepositoryRecordDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d daemonGcRepositoryRecordDo) Joins(fields ...field.RelationField) *daemonGcRepositoryRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d daemonGcRepositoryRecordDo) Preload(fields ...field.RelationField) *daemonGcRepositoryRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d daemonGcRepositoryRecordDo) FirstOrInit() (*models.DaemonGcRepositoryRecord, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRecord), nil
	}
}

func (d daemonGcRepositoryRecordDo) FirstOrCreate() (*models.DaemonGcRepositoryRecord, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DaemonGcRepositoryRecord), nil
	}
}

func (d daemonGcRepositoryRecordDo) FindByPage(offset int, limit int) (result []*models.DaemonGcRepositoryRecord, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d daemonGcRepositoryRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d daemonGcRepositoryRecordDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d daemonGcRepositoryRecordDo) Delete(models ...*models.DaemonGcRepositoryRecord) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *daemonGcRepositoryRecordDo) withDO(do gen.Dao) *daemonGcRepositoryRecordDo {
	d.DO = *do.(*gen.DO)
	return d
}
