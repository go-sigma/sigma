// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newUser3rdParty(db *gorm.DB, opts ...gen.DOOption) user3rdParty {
	_user3rdParty := user3rdParty{}

	_user3rdParty.user3rdPartyDo.UseDB(db, opts...)
	_user3rdParty.user3rdPartyDo.UseModel(&models.User3rdParty{})

	tableName := _user3rdParty.user3rdPartyDo.TableName()
	_user3rdParty.ALL = field.NewAsterisk(tableName)
	_user3rdParty.CreatedAt = field.NewTime(tableName, "created_at")
	_user3rdParty.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user3rdParty.DeletedAt = field.NewUint(tableName, "deleted_at")
	_user3rdParty.ID = field.NewInt64(tableName, "id")
	_user3rdParty.UserID = field.NewInt64(tableName, "user_id")
	_user3rdParty.Provider = field.NewField(tableName, "provider")
	_user3rdParty.AccountID = field.NewString(tableName, "account_id")
	_user3rdParty.Token = field.NewString(tableName, "token")
	_user3rdParty.RefreshToken = field.NewString(tableName, "refresh_token")
	_user3rdParty.User = user3rdPartyBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "models.User"),
	}

	_user3rdParty.fillFieldMap()

	return _user3rdParty
}

type user3rdParty struct {
	user3rdPartyDo user3rdPartyDo

	ALL          field.Asterisk
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Uint
	ID           field.Int64
	UserID       field.Int64
	Provider     field.Field
	AccountID    field.String
	Token        field.String
	RefreshToken field.String
	User         user3rdPartyBelongsToUser

	fieldMap map[string]field.Expr
}

func (u user3rdParty) Table(newTableName string) *user3rdParty {
	u.user3rdPartyDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user3rdParty) As(alias string) *user3rdParty {
	u.user3rdPartyDo.DO = *(u.user3rdPartyDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user3rdParty) updateTableName(table string) *user3rdParty {
	u.ALL = field.NewAsterisk(table)
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewUint(table, "deleted_at")
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Provider = field.NewField(table, "provider")
	u.AccountID = field.NewString(table, "account_id")
	u.Token = field.NewString(table, "token")
	u.RefreshToken = field.NewString(table, "refresh_token")

	u.fillFieldMap()

	return u
}

func (u *user3rdParty) WithContext(ctx context.Context) *user3rdPartyDo {
	return u.user3rdPartyDo.WithContext(ctx)
}

func (u user3rdParty) TableName() string { return u.user3rdPartyDo.TableName() }

func (u user3rdParty) Alias() string { return u.user3rdPartyDo.Alias() }

func (u user3rdParty) Columns(cols ...field.Expr) gen.Columns {
	return u.user3rdPartyDo.Columns(cols...)
}

func (u *user3rdParty) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user3rdParty) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["provider"] = u.Provider
	u.fieldMap["account_id"] = u.AccountID
	u.fieldMap["token"] = u.Token
	u.fieldMap["refresh_token"] = u.RefreshToken

}

func (u user3rdParty) clone(db *gorm.DB) user3rdParty {
	u.user3rdPartyDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user3rdParty) replaceDB(db *gorm.DB) user3rdParty {
	u.user3rdPartyDo.ReplaceDB(db)
	return u
}

type user3rdPartyBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a user3rdPartyBelongsToUser) Where(conds ...field.Expr) *user3rdPartyBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a user3rdPartyBelongsToUser) WithContext(ctx context.Context) *user3rdPartyBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a user3rdPartyBelongsToUser) Session(session *gorm.Session) *user3rdPartyBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a user3rdPartyBelongsToUser) Model(m *models.User3rdParty) *user3rdPartyBelongsToUserTx {
	return &user3rdPartyBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type user3rdPartyBelongsToUserTx struct{ tx *gorm.Association }

func (a user3rdPartyBelongsToUserTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a user3rdPartyBelongsToUserTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a user3rdPartyBelongsToUserTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a user3rdPartyBelongsToUserTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a user3rdPartyBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a user3rdPartyBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type user3rdPartyDo struct{ gen.DO }

func (u user3rdPartyDo) Debug() *user3rdPartyDo {
	return u.withDO(u.DO.Debug())
}

func (u user3rdPartyDo) WithContext(ctx context.Context) *user3rdPartyDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u user3rdPartyDo) ReadDB() *user3rdPartyDo {
	return u.Clauses(dbresolver.Read)
}

func (u user3rdPartyDo) WriteDB() *user3rdPartyDo {
	return u.Clauses(dbresolver.Write)
}

func (u user3rdPartyDo) Session(config *gorm.Session) *user3rdPartyDo {
	return u.withDO(u.DO.Session(config))
}

func (u user3rdPartyDo) Clauses(conds ...clause.Expression) *user3rdPartyDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u user3rdPartyDo) Returning(value interface{}, columns ...string) *user3rdPartyDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u user3rdPartyDo) Not(conds ...gen.Condition) *user3rdPartyDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u user3rdPartyDo) Or(conds ...gen.Condition) *user3rdPartyDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u user3rdPartyDo) Select(conds ...field.Expr) *user3rdPartyDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u user3rdPartyDo) Where(conds ...gen.Condition) *user3rdPartyDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u user3rdPartyDo) Order(conds ...field.Expr) *user3rdPartyDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u user3rdPartyDo) Distinct(cols ...field.Expr) *user3rdPartyDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u user3rdPartyDo) Omit(cols ...field.Expr) *user3rdPartyDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u user3rdPartyDo) Join(table schema.Tabler, on ...field.Expr) *user3rdPartyDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u user3rdPartyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *user3rdPartyDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u user3rdPartyDo) RightJoin(table schema.Tabler, on ...field.Expr) *user3rdPartyDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u user3rdPartyDo) Group(cols ...field.Expr) *user3rdPartyDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u user3rdPartyDo) Having(conds ...gen.Condition) *user3rdPartyDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u user3rdPartyDo) Limit(limit int) *user3rdPartyDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u user3rdPartyDo) Offset(offset int) *user3rdPartyDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u user3rdPartyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *user3rdPartyDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u user3rdPartyDo) Unscoped() *user3rdPartyDo {
	return u.withDO(u.DO.Unscoped())
}

func (u user3rdPartyDo) Create(values ...*models.User3rdParty) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u user3rdPartyDo) CreateInBatches(values []*models.User3rdParty, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u user3rdPartyDo) Save(values ...*models.User3rdParty) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u user3rdPartyDo) First() (*models.User3rdParty, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.User3rdParty), nil
	}
}

func (u user3rdPartyDo) Take() (*models.User3rdParty, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.User3rdParty), nil
	}
}

func (u user3rdPartyDo) Last() (*models.User3rdParty, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.User3rdParty), nil
	}
}

func (u user3rdPartyDo) Find() ([]*models.User3rdParty, error) {
	result, err := u.DO.Find()
	return result.([]*models.User3rdParty), err
}

func (u user3rdPartyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.User3rdParty, err error) {
	buf := make([]*models.User3rdParty, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u user3rdPartyDo) FindInBatches(result *[]*models.User3rdParty, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u user3rdPartyDo) Attrs(attrs ...field.AssignExpr) *user3rdPartyDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u user3rdPartyDo) Assign(attrs ...field.AssignExpr) *user3rdPartyDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u user3rdPartyDo) Joins(fields ...field.RelationField) *user3rdPartyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u user3rdPartyDo) Preload(fields ...field.RelationField) *user3rdPartyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u user3rdPartyDo) FirstOrInit() (*models.User3rdParty, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.User3rdParty), nil
	}
}

func (u user3rdPartyDo) FirstOrCreate() (*models.User3rdParty, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.User3rdParty), nil
	}
}

func (u user3rdPartyDo) FindByPage(offset int, limit int) (result []*models.User3rdParty, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u user3rdPartyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u user3rdPartyDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u user3rdPartyDo) Delete(models ...*models.User3rdParty) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *user3rdPartyDo) withDO(do gen.Dao) *user3rdPartyDo {
	u.DO = *do.(*gen.DO)
	return u
}
