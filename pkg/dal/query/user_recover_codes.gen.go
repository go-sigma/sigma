// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newUserRecoverCode(db *gorm.DB, opts ...gen.DOOption) userRecoverCode {
	_userRecoverCode := userRecoverCode{}

	_userRecoverCode.userRecoverCodeDo.UseDB(db, opts...)
	_userRecoverCode.userRecoverCodeDo.UseModel(&models.UserRecoverCode{})

	tableName := _userRecoverCode.userRecoverCodeDo.TableName()
	_userRecoverCode.ALL = field.NewAsterisk(tableName)
	_userRecoverCode.CreatedAt = field.NewInt64(tableName, "created_at")
	_userRecoverCode.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userRecoverCode.DeletedAt = field.NewUint64(tableName, "deleted_at")
	_userRecoverCode.ID = field.NewInt64(tableName, "id")
	_userRecoverCode.UserID = field.NewInt64(tableName, "user_id")
	_userRecoverCode.Code = field.NewString(tableName, "code")
	_userRecoverCode.User = userRecoverCodeBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "models.User"),
	}

	_userRecoverCode.fillFieldMap()

	return _userRecoverCode
}

type userRecoverCode struct {
	userRecoverCodeDo userRecoverCodeDo

	ALL       field.Asterisk
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Uint64
	ID        field.Int64
	UserID    field.Int64
	Code      field.String
	User      userRecoverCodeBelongsToUser

	fieldMap map[string]field.Expr
}

func (u userRecoverCode) Table(newTableName string) *userRecoverCode {
	u.userRecoverCodeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRecoverCode) As(alias string) *userRecoverCode {
	u.userRecoverCodeDo.DO = *(u.userRecoverCodeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRecoverCode) updateTableName(table string) *userRecoverCode {
	u.ALL = field.NewAsterisk(table)
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewUint64(table, "deleted_at")
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Code = field.NewString(table, "code")

	u.fillFieldMap()

	return u
}

func (u *userRecoverCode) WithContext(ctx context.Context) *userRecoverCodeDo {
	return u.userRecoverCodeDo.WithContext(ctx)
}

func (u userRecoverCode) TableName() string { return u.userRecoverCodeDo.TableName() }

func (u userRecoverCode) Alias() string { return u.userRecoverCodeDo.Alias() }

func (u userRecoverCode) Columns(cols ...field.Expr) gen.Columns {
	return u.userRecoverCodeDo.Columns(cols...)
}

func (u *userRecoverCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRecoverCode) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["code"] = u.Code

}

func (u userRecoverCode) clone(db *gorm.DB) userRecoverCode {
	u.userRecoverCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRecoverCode) replaceDB(db *gorm.DB) userRecoverCode {
	u.userRecoverCodeDo.ReplaceDB(db)
	return u
}

type userRecoverCodeBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a userRecoverCodeBelongsToUser) Where(conds ...field.Expr) *userRecoverCodeBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userRecoverCodeBelongsToUser) WithContext(ctx context.Context) *userRecoverCodeBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userRecoverCodeBelongsToUser) Session(session *gorm.Session) *userRecoverCodeBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a userRecoverCodeBelongsToUser) Model(m *models.UserRecoverCode) *userRecoverCodeBelongsToUserTx {
	return &userRecoverCodeBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type userRecoverCodeBelongsToUserTx struct{ tx *gorm.Association }

func (a userRecoverCodeBelongsToUserTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userRecoverCodeBelongsToUserTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userRecoverCodeBelongsToUserTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userRecoverCodeBelongsToUserTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userRecoverCodeBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a userRecoverCodeBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type userRecoverCodeDo struct{ gen.DO }

func (u userRecoverCodeDo) Debug() *userRecoverCodeDo {
	return u.withDO(u.DO.Debug())
}

func (u userRecoverCodeDo) WithContext(ctx context.Context) *userRecoverCodeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRecoverCodeDo) ReadDB() *userRecoverCodeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRecoverCodeDo) WriteDB() *userRecoverCodeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRecoverCodeDo) Session(config *gorm.Session) *userRecoverCodeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRecoverCodeDo) Clauses(conds ...clause.Expression) *userRecoverCodeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRecoverCodeDo) Returning(value interface{}, columns ...string) *userRecoverCodeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRecoverCodeDo) Not(conds ...gen.Condition) *userRecoverCodeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRecoverCodeDo) Or(conds ...gen.Condition) *userRecoverCodeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRecoverCodeDo) Select(conds ...field.Expr) *userRecoverCodeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRecoverCodeDo) Where(conds ...gen.Condition) *userRecoverCodeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRecoverCodeDo) Order(conds ...field.Expr) *userRecoverCodeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRecoverCodeDo) Distinct(cols ...field.Expr) *userRecoverCodeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRecoverCodeDo) Omit(cols ...field.Expr) *userRecoverCodeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRecoverCodeDo) Join(table schema.Tabler, on ...field.Expr) *userRecoverCodeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRecoverCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userRecoverCodeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRecoverCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) *userRecoverCodeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRecoverCodeDo) Group(cols ...field.Expr) *userRecoverCodeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRecoverCodeDo) Having(conds ...gen.Condition) *userRecoverCodeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRecoverCodeDo) Limit(limit int) *userRecoverCodeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRecoverCodeDo) Offset(offset int) *userRecoverCodeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRecoverCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userRecoverCodeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRecoverCodeDo) Unscoped() *userRecoverCodeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRecoverCodeDo) Create(values ...*models.UserRecoverCode) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRecoverCodeDo) CreateInBatches(values []*models.UserRecoverCode, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRecoverCodeDo) Save(values ...*models.UserRecoverCode) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRecoverCodeDo) First() (*models.UserRecoverCode, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserRecoverCode), nil
	}
}

func (u userRecoverCodeDo) Take() (*models.UserRecoverCode, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserRecoverCode), nil
	}
}

func (u userRecoverCodeDo) Last() (*models.UserRecoverCode, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserRecoverCode), nil
	}
}

func (u userRecoverCodeDo) Find() ([]*models.UserRecoverCode, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserRecoverCode), err
}

func (u userRecoverCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserRecoverCode, err error) {
	buf := make([]*models.UserRecoverCode, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRecoverCodeDo) FindInBatches(result *[]*models.UserRecoverCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRecoverCodeDo) Attrs(attrs ...field.AssignExpr) *userRecoverCodeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRecoverCodeDo) Assign(attrs ...field.AssignExpr) *userRecoverCodeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRecoverCodeDo) Joins(fields ...field.RelationField) *userRecoverCodeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRecoverCodeDo) Preload(fields ...field.RelationField) *userRecoverCodeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRecoverCodeDo) FirstOrInit() (*models.UserRecoverCode, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserRecoverCode), nil
	}
}

func (u userRecoverCodeDo) FirstOrCreate() (*models.UserRecoverCode, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserRecoverCode), nil
	}
}

func (u userRecoverCodeDo) FindByPage(offset int, limit int) (result []*models.UserRecoverCode, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRecoverCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRecoverCodeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRecoverCodeDo) Delete(models ...*models.UserRecoverCode) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRecoverCodeDo) withDO(do gen.Dao) *userRecoverCodeDo {
	u.DO = *do.(*gen.DO)
	return u
}
