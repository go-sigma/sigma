// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ximager/ximager/pkg/dal/models"
)

func newRepositoryQuota(db *gorm.DB, opts ...gen.DOOption) repositoryQuota {
	_repositoryQuota := repositoryQuota{}

	_repositoryQuota.repositoryQuotaDo.UseDB(db, opts...)
	_repositoryQuota.repositoryQuotaDo.UseModel(&models.RepositoryQuota{})

	tableName := _repositoryQuota.repositoryQuotaDo.TableName()
	_repositoryQuota.ALL = field.NewAsterisk(tableName)
	_repositoryQuota.CreatedAt = field.NewTime(tableName, "created_at")
	_repositoryQuota.UpdatedAt = field.NewTime(tableName, "updated_at")
	_repositoryQuota.DeletedAt = field.NewUint(tableName, "deleted_at")
	_repositoryQuota.ID = field.NewInt64(tableName, "id")
	_repositoryQuota.RepositoryID = field.NewInt64(tableName, "repository_id")
	_repositoryQuota.Limit = field.NewInt64(tableName, "limit")
	_repositoryQuota.Usage = field.NewInt64(tableName, "usage")
	_repositoryQuota.Repository = repositoryQuotaBelongsToRepository{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Repository", "models.Repository"),
		Namespace: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
			Quota struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Repository.Namespace", "models.Namespace"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Repository.Namespace.User", "models.User"),
			},
			Quota: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Repository.Namespace.Quota", "models.NamespaceQuota"),
			},
		},
	}

	_repositoryQuota.fillFieldMap()

	return _repositoryQuota
}

type repositoryQuota struct {
	repositoryQuotaDo repositoryQuotaDo

	ALL          field.Asterisk
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Uint
	ID           field.Int64
	RepositoryID field.Int64
	Limit        field.Int64
	Usage        field.Int64
	Repository   repositoryQuotaBelongsToRepository

	fieldMap map[string]field.Expr
}

func (r repositoryQuota) Table(newTableName string) *repositoryQuota {
	r.repositoryQuotaDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r repositoryQuota) As(alias string) *repositoryQuota {
	r.repositoryQuotaDo.DO = *(r.repositoryQuotaDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *repositoryQuota) updateTableName(table string) *repositoryQuota {
	r.ALL = field.NewAsterisk(table)
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewUint(table, "deleted_at")
	r.ID = field.NewInt64(table, "id")
	r.RepositoryID = field.NewInt64(table, "repository_id")
	r.Limit = field.NewInt64(table, "limit")
	r.Usage = field.NewInt64(table, "usage")

	r.fillFieldMap()

	return r
}

func (r *repositoryQuota) WithContext(ctx context.Context) *repositoryQuotaDo {
	return r.repositoryQuotaDo.WithContext(ctx)
}

func (r repositoryQuota) TableName() string { return r.repositoryQuotaDo.TableName() }

func (r repositoryQuota) Alias() string { return r.repositoryQuotaDo.Alias() }

func (r *repositoryQuota) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *repositoryQuota) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["id"] = r.ID
	r.fieldMap["repository_id"] = r.RepositoryID
	r.fieldMap["limit"] = r.Limit
	r.fieldMap["usage"] = r.Usage

}

func (r repositoryQuota) clone(db *gorm.DB) repositoryQuota {
	r.repositoryQuotaDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r repositoryQuota) replaceDB(db *gorm.DB) repositoryQuota {
	r.repositoryQuotaDo.ReplaceDB(db)
	return r
}

type repositoryQuotaBelongsToRepository struct {
	db *gorm.DB

	field.RelationField

	Namespace struct {
		field.RelationField
		User struct {
			field.RelationField
		}
		Quota struct {
			field.RelationField
		}
	}
}

func (a repositoryQuotaBelongsToRepository) Where(conds ...field.Expr) *repositoryQuotaBelongsToRepository {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a repositoryQuotaBelongsToRepository) WithContext(ctx context.Context) *repositoryQuotaBelongsToRepository {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a repositoryQuotaBelongsToRepository) Session(session *gorm.Session) *repositoryQuotaBelongsToRepository {
	a.db = a.db.Session(session)
	return &a
}

func (a repositoryQuotaBelongsToRepository) Model(m *models.RepositoryQuota) *repositoryQuotaBelongsToRepositoryTx {
	return &repositoryQuotaBelongsToRepositoryTx{a.db.Model(m).Association(a.Name())}
}

type repositoryQuotaBelongsToRepositoryTx struct{ tx *gorm.Association }

func (a repositoryQuotaBelongsToRepositoryTx) Find() (result *models.Repository, err error) {
	return result, a.tx.Find(&result)
}

func (a repositoryQuotaBelongsToRepositoryTx) Append(values ...*models.Repository) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a repositoryQuotaBelongsToRepositoryTx) Replace(values ...*models.Repository) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a repositoryQuotaBelongsToRepositoryTx) Delete(values ...*models.Repository) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a repositoryQuotaBelongsToRepositoryTx) Clear() error {
	return a.tx.Clear()
}

func (a repositoryQuotaBelongsToRepositoryTx) Count() int64 {
	return a.tx.Count()
}

type repositoryQuotaDo struct{ gen.DO }

func (r repositoryQuotaDo) Debug() *repositoryQuotaDo {
	return r.withDO(r.DO.Debug())
}

func (r repositoryQuotaDo) WithContext(ctx context.Context) *repositoryQuotaDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r repositoryQuotaDo) ReadDB() *repositoryQuotaDo {
	return r.Clauses(dbresolver.Read)
}

func (r repositoryQuotaDo) WriteDB() *repositoryQuotaDo {
	return r.Clauses(dbresolver.Write)
}

func (r repositoryQuotaDo) Session(config *gorm.Session) *repositoryQuotaDo {
	return r.withDO(r.DO.Session(config))
}

func (r repositoryQuotaDo) Clauses(conds ...clause.Expression) *repositoryQuotaDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r repositoryQuotaDo) Returning(value interface{}, columns ...string) *repositoryQuotaDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r repositoryQuotaDo) Not(conds ...gen.Condition) *repositoryQuotaDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r repositoryQuotaDo) Or(conds ...gen.Condition) *repositoryQuotaDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r repositoryQuotaDo) Select(conds ...field.Expr) *repositoryQuotaDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r repositoryQuotaDo) Where(conds ...gen.Condition) *repositoryQuotaDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r repositoryQuotaDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *repositoryQuotaDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r repositoryQuotaDo) Order(conds ...field.Expr) *repositoryQuotaDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r repositoryQuotaDo) Distinct(cols ...field.Expr) *repositoryQuotaDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r repositoryQuotaDo) Omit(cols ...field.Expr) *repositoryQuotaDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r repositoryQuotaDo) Join(table schema.Tabler, on ...field.Expr) *repositoryQuotaDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r repositoryQuotaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *repositoryQuotaDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r repositoryQuotaDo) RightJoin(table schema.Tabler, on ...field.Expr) *repositoryQuotaDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r repositoryQuotaDo) Group(cols ...field.Expr) *repositoryQuotaDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r repositoryQuotaDo) Having(conds ...gen.Condition) *repositoryQuotaDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r repositoryQuotaDo) Limit(limit int) *repositoryQuotaDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r repositoryQuotaDo) Offset(offset int) *repositoryQuotaDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r repositoryQuotaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *repositoryQuotaDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r repositoryQuotaDo) Unscoped() *repositoryQuotaDo {
	return r.withDO(r.DO.Unscoped())
}

func (r repositoryQuotaDo) Create(values ...*models.RepositoryQuota) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r repositoryQuotaDo) CreateInBatches(values []*models.RepositoryQuota, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r repositoryQuotaDo) Save(values ...*models.RepositoryQuota) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r repositoryQuotaDo) First() (*models.RepositoryQuota, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RepositoryQuota), nil
	}
}

func (r repositoryQuotaDo) Take() (*models.RepositoryQuota, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RepositoryQuota), nil
	}
}

func (r repositoryQuotaDo) Last() (*models.RepositoryQuota, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RepositoryQuota), nil
	}
}

func (r repositoryQuotaDo) Find() ([]*models.RepositoryQuota, error) {
	result, err := r.DO.Find()
	return result.([]*models.RepositoryQuota), err
}

func (r repositoryQuotaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RepositoryQuota, err error) {
	buf := make([]*models.RepositoryQuota, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r repositoryQuotaDo) FindInBatches(result *[]*models.RepositoryQuota, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r repositoryQuotaDo) Attrs(attrs ...field.AssignExpr) *repositoryQuotaDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r repositoryQuotaDo) Assign(attrs ...field.AssignExpr) *repositoryQuotaDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r repositoryQuotaDo) Joins(fields ...field.RelationField) *repositoryQuotaDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r repositoryQuotaDo) Preload(fields ...field.RelationField) *repositoryQuotaDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r repositoryQuotaDo) FirstOrInit() (*models.RepositoryQuota, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RepositoryQuota), nil
	}
}

func (r repositoryQuotaDo) FirstOrCreate() (*models.RepositoryQuota, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RepositoryQuota), nil
	}
}

func (r repositoryQuotaDo) FindByPage(offset int, limit int) (result []*models.RepositoryQuota, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r repositoryQuotaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r repositoryQuotaDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r repositoryQuotaDo) Delete(models ...*models.RepositoryQuota) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *repositoryQuotaDo) withDO(do gen.Dao) *repositoryQuotaDo {
	r.DO = *do.(*gen.DO)
	return r
}
