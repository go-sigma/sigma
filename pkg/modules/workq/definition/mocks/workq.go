// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/modules/workq/definition (interfaces: WorkQueueProducer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/workq.go -package=mocks github.com/go-sigma/sigma/pkg/modules/workq/definition WorkQueueProducer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	definition "github.com/go-sigma/sigma/pkg/modules/workq/definition"
	enums "github.com/go-sigma/sigma/pkg/types/enums"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkQueueProducer is a mock of WorkQueueProducer interface.
type MockWorkQueueProducer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkQueueProducerMockRecorder
}

// MockWorkQueueProducerMockRecorder is the mock recorder for MockWorkQueueProducer.
type MockWorkQueueProducerMockRecorder struct {
	mock *MockWorkQueueProducer
}

// NewMockWorkQueueProducer creates a new mock instance.
func NewMockWorkQueueProducer(ctrl *gomock.Controller) *MockWorkQueueProducer {
	mock := &MockWorkQueueProducer{ctrl: ctrl}
	mock.recorder = &MockWorkQueueProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkQueueProducer) EXPECT() *MockWorkQueueProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockWorkQueueProducer) Produce(arg0 context.Context, arg1 enums.Daemon, arg2 any, arg3 definition.ProducerOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockWorkQueueProducerMockRecorder) Produce(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockWorkQueueProducer)(nil).Produce), arg0, arg1, arg2, arg3)
}
