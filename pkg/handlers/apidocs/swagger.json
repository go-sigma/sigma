{
    "swagger": "2.0",
    "info": {
        "title": "sigma",
        "contact": {
            "name": "sigma",
            "url": "https://github.com/go-sigma/sigma"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/caches/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get cache",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Builder ID",
                        "name": "builder_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/octet-stream"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Create cache",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Builder ID",
                        "name": "builder_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Cache file",
                        "name": "file",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Delete cache",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Builder ID",
                        "name": "builder_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/coderepos/providers": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CodeRepository"
                ],
                "summary": "List code repository providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.ListCodeRepositoryProvidersResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/coderepos/{id}/branches": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CodeRepository"
                ],
                "summary": "List code repository branches",
                "parameters": [
                    {
                        "type": "string",
                        "description": "code repository id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.CodeRepositoryBranchItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/coderepos/{provider}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CodeRepository"
                ],
                "summary": "List code repositories",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search code repository with name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search code repository with owner",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search code repository with provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.CodeRepositoryItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/coderepos/{provider}/owners": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CodeRepository"
                ],
                "summary": "List code repository owners",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search code repository with provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "search code repository with name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.CodeRepositoryOwnerItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/coderepos/{provider}/repos/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CodeRepository"
                ],
                "summary": "Get code repository by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search code repository with provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "code repository id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.CodeRepositoryItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/coderepos/{provider}/resync": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CodeRepository"
                ],
                "summary": "Resync code repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search code repository with provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/coderepos/{provider}/user3rdparty": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CodeRepository"
                ],
                "summary": "Get code repository user 3rdparty",
                "parameters": [
                    {
                        "type": "string",
                        "description": "get user 3rdParty with provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetCodeRepositoryUser3rdPartyResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-artifact/{namespace_id}/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc artifact rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetGcArtifactRuleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Update gc artifact rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gc artifact rule object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateGcArtifactRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-artifact/{namespace_id}/runners/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc artifact runners",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GcArtifactRunnerItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Create gc artifact runner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gc artifact runner object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateGcArtifactRunnerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-artifact/{namespace_id}/runners/latest": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc artifact latest runner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcArtifactRunnerItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-artifact/{namespace_id}/runners/{runner_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc artifact runners",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcArtifactRunnerItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-artifact/{namespace_id}/runners/{runner_id}/records/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc artifact records",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GcArtifactRecordItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-artifact/{namespace_id}/runners/{runner_id}/records/{record_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc artifact record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Record id",
                        "name": "record_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcArtifactRecordItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-blob/{namespace_id}/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc blob rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetGcBlobRuleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Update gc blob rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gc blob rule object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateGcBlobRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-blob/{namespace_id}/runners/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc blob runners",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GcBlobRunnerItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Create gc blob runner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gc blob runner object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateGcBlobRunnerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-blob/{namespace_id}/runners/latest": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc blob latest runner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcBlobRunnerItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-blob/{namespace_id}/runners/{runner_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc blob runners",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcBlobRunnerItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-blob/{namespace_id}/runners/{runner_id}/records/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc blob records",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GcBlobRecordItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-blob/{namespace_id}/runners/{runner_id}/records/{record_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc blob record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Record id",
                        "name": "record_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcBlobRecordItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-repository/{namespace_id}/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc repository rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetGcRepositoryRuleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Update gc repository rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gc repository rule object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateGcRepositoryRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-repository/{namespace_id}/runners/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc repository runners",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GcRepositoryRunnerItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Create gc repository runner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gc repository runner object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateGcRepositoryRunnerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-repository/{namespace_id}/runners/latest": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc repository latest runner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcRepositoryRunnerItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-repository/{namespace_id}/runners/{runner_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc repository runners",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcRepositoryRunnerItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-repository/{namespace_id}/runners/{runner_id}/records/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc repository records",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GcRepositoryRecordItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-repository/{namespace_id}/runners/{runner_id}/records/{record_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc repository record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Record id",
                        "name": "record_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcRepositoryRecordItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-tag/{namespace_id}/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc tag rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetGcTagRuleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Update gc tag rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gc tag rule object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateGcTagRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-tag/{namespace_id}/runners/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc tag runners",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GcTagRunnerItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Create gc tag runner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gc tag runner object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateGcTagRunnerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-tag/{namespace_id}/runners/latest": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc tag latest runner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcTagRunnerItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-tag/{namespace_id}/runners/{runner_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc tag runners",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcTagRunnerItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-tag/{namespace_id}/runners/{runner_id}/records/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "List gc tag records",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GcTagRecordItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/daemons/gc-tag/{namespace_id}/runners/{runner_id}/records/{record_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daemon"
                ],
                "summary": "Get gc tag record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Runner id",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Record id",
                        "name": "record_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GcTagRecordItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespace/{namespace_id}/repositories/{repository_id}/builders/{builder_id}": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Builder"
                ],
                "summary": "Update a builder by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository id",
                        "name": "repository_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Builder id",
                        "name": "builder_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Builder object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateBuilderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "List namespace",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "Limit size",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort method",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search namespace with name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.NamespaceItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Create namespace",
                "parameters": [
                    {
                        "description": "Namespace object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PostNamespaceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.PostNamespaceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/hot": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Hot namespace",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.NamespaceItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/members/": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Add namespace member",
                "parameters": [
                    {
                        "description": "Member object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AddNamespaceMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.AddNamespaceMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Get namespace",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.NamespaceItem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Update namespace",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Namespace object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PutNamespaceRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Delete namespace",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/members/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "List namespace members",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "Limit size",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort method",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search namespace namespace with name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.NamespaceMemberItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/members/self": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Get self namespace member info",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.NamespaceMemberItem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/members/{user_id}": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Update namespace member",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "User id",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Namespace member object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateNamespaceMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Delete namespace member",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "User id",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/repositories/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository"
                ],
                "summary": "List repositories",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "number",
                        "default": 10,
                        "description": "Limit size",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "number",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort method",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search repository with name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.RepositoryItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository"
                ],
                "summary": "Create repository",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Repository object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateRepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.CreateRepositoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/repositories/{repository_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository"
                ],
                "summary": "Get repository",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Repository id",
                        "name": "repository_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.RepositoryItem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository"
                ],
                "summary": "Update repository",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Repository id",
                        "name": "repository_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Repository object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateRepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository"
                ],
                "summary": "Delete repository",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Repository id",
                        "name": "repository_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/repositories/{repository_id}/builders": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Builder"
                ],
                "summary": "Create a builder for repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace ID",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repository_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Builder object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateBuilderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/repositories/{repository_id}/builders/{builder_id}/runners/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Builder"
                ],
                "summary": "Get builder runners by builder id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace ID",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repository_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Builder ID",
                        "name": "builder_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.BuilderItem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/repositories/{repository_id}/builders/{builder_id}/runners/{runner_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Builder"
                ],
                "summary": "Get builder runner by runner id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace ID",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repository_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Builder ID",
                        "name": "builder_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Runner ID",
                        "name": "runner_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.BuilderItem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/tags/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "List tag",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Repository id",
                        "name": "repository_id",
                        "in": "path"
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "Limit size",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort method",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search tag with name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "Image",
                                "ImageIndex",
                                "Chart",
                                "Cnab",
                                "Cosign",
                                "Wasm",
                                "Provenance",
                                "Unknown"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "search tag with type",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.TagItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace_id}/tags/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Get tag",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Repository id",
                        "name": "repository_id",
                        "in": "path"
                    },
                    {
                        "type": "number",
                        "description": "Tag id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TagItem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Delete tag",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Namespace id",
                        "name": "namespace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Repository id",
                        "name": "repository_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Tag id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/oauth2/{provider}/callback": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "oauth2 provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "endpoint",
                        "name": "endpoint",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Oauth2ClientIDResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/oauth2/{provider}/client_id": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Get oauth2 provider client id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "oauth2 provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Oauth2ClientIDResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/oauth2/{provider}/redirect_callback": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Redirect oauth2 provider callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "oauth2 provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "301": {
                        "description": "Moved Permanently"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/systems/endpoint": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetSystemEndpointResponse"
                        }
                    }
                }
            }
        },
        "/systems/version": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetSystemVersionResponse"
                        }
                    }
                }
            }
        },
        "/tokens": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Generate token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PostUserTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "List users with pagination",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Response with admin",
                        "name": "without_admin",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.UserItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PostUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PostUserLoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "description": "Logout user object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PostUserLogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/validators/cron": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator"
                ],
                "summary": "Validate cron",
                "parameters": [
                    {
                        "description": "Validate cron object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ValidateCronRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/validators/password": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator"
                ],
                "summary": "Validate password",
                "parameters": [
                    {
                        "description": "Validate password object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ValidatePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/validators/reference": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator"
                ],
                "summary": "Validate reference",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reference",
                        "name": "reference",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/validators/regexp": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator"
                ],
                "summary": "Validate regexp",
                "parameters": [
                    {
                        "description": "Validate regexp object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ValidateCronRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/validators/tag": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator"
                ],
                "summary": "Validate tag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reference",
                        "name": "tag",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/webhook/{id}": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Update a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Webhook object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PutWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/webhooks": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Create a webhook",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "create webhook for namespace",
                        "name": "namespace_id",
                        "in": "query"
                    },
                    {
                        "description": "Webhook object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PostWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/webhooks/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "List webhooks",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "filter by namespace id",
                        "name": "namespace_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.WebhookItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/webhooks/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Get a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GetWebhookResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Delete a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/webhooks/{webhook_id}/logs": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "List webhook logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Webhook ID",
                        "name": "webhook_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "sort method",
                        "name": "method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.WebhookItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        },
        "/webhooks/{webhook_id}/logs/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Get a webhook log",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Webhook id",
                        "name": "webhook_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Webhook log id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CommonList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.GetWebhookLogResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/xerrors.ErrCode"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "enums.BuilderSource": {
            "type": "string",
            "enum": [
                "Dockerfile",
                "CodeRepository",
                "SelfCodeRepository"
            ],
            "x-enum-varnames": [
                "BuilderSourceDockerfile",
                "BuilderSourceCodeRepository",
                "BuilderSourceSelfCodeRepository"
            ]
        },
        "enums.GcRecordStatus": {
            "type": "string",
            "enum": [
                "Success",
                "Failed"
            ],
            "x-enum-varnames": [
                "GcRecordStatusSuccess",
                "GcRecordStatusFailed"
            ]
        },
        "enums.NamespaceRole": {
            "type": "string",
            "enum": [
                "NamespaceAdmin",
                "NamespaceManager",
                "NamespaceReader"
            ],
            "x-enum-varnames": [
                "NamespaceRoleAdmin",
                "NamespaceRoleManager",
                "NamespaceRoleReader"
            ]
        },
        "enums.OciPlatform": {
            "type": "string",
            "enum": [
                "linux/amd64",
                "linux/amd64/v2",
                "linux/amd64/v3",
                "linux/arm64",
                "linux/riscv64",
                "linux/ppc64le",
                "linux/s390x",
                "linux/386",
                "linux/mips64le",
                "linux/mips64",
                "linux/arm/v7",
                "linux/arm/v6"
            ],
            "x-enum-varnames": [
                "OciPlatformLinuxAmd64",
                "OciPlatformLinuxAmd64V2",
                "OciPlatformLinuxAmd64V3",
                "OciPlatformLinuxArm64",
                "OciPlatformLinuxRiscv64",
                "OciPlatformLinuxPpc64le",
                "OciPlatformLinuxS390x",
                "OciPlatformLinux386",
                "OciPlatformLinuxMips64le",
                "OciPlatformLinuxMips64",
                "OciPlatformLinuxArmV7",
                "OciPlatformLinuxArmV6"
            ]
        },
        "enums.Provider": {
            "type": "string",
            "enum": [
                "local",
                "github",
                "gitlab",
                "gitea"
            ],
            "x-enum-varnames": [
                "ProviderLocal",
                "ProviderGithub",
                "ProviderGitlab",
                "ProviderGitea"
            ]
        },
        "enums.RetentionRuleType": {
            "type": "string",
            "enum": [
                "Day",
                "Quantity"
            ],
            "x-enum-varnames": [
                "RetentionRuleTypeDay",
                "RetentionRuleTypeQuantity"
            ]
        },
        "enums.ScmCredentialType": {
            "type": "string",
            "enum": [
                "ssh",
                "token",
                "username",
                "none"
            ],
            "x-enum-varnames": [
                "ScmCredentialTypeSsh",
                "ScmCredentialTypeToken",
                "ScmCredentialTypeUsername",
                "ScmCredentialTypeNone"
            ]
        },
        "enums.ScmProvider": {
            "type": "string",
            "enum": [
                "github",
                "gitlab",
                "gitea",
                "none"
            ],
            "x-enum-varnames": [
                "ScmProviderGithub",
                "ScmProviderGitlab",
                "ScmProviderGitea",
                "ScmProviderNone"
            ]
        },
        "enums.TaskCommonStatus": {
            "type": "string",
            "enum": [
                "Pending",
                "Doing",
                "Success",
                "Failed"
            ],
            "x-enum-varnames": [
                "TaskCommonStatusPending",
                "TaskCommonStatusDoing",
                "TaskCommonStatusSuccess",
                "TaskCommonStatusFailed"
            ]
        },
        "enums.UserRole": {
            "type": "string",
            "enum": [
                "Root",
                "Admin",
                "User"
            ],
            "x-enum-varnames": [
                "UserRoleRoot",
                "UserRoleAdmin",
                "UserRoleUser"
            ]
        },
        "enums.UserStatus": {
            "type": "string",
            "enum": [
                "Active",
                "Inactive"
            ],
            "x-enum-varnames": [
                "UserStatusActive",
                "UserStatusInactive"
            ]
        },
        "enums.Visibility": {
            "type": "string",
            "enum": [
                "private",
                "public"
            ],
            "x-enum-varnames": [
                "VisibilityPrivate",
                "VisibilityPublic"
            ]
        },
        "enums.WebhookResourceAction": {
            "type": "string",
            "enum": [
                "create",
                "update",
                "delete",
                "add",
                "remove",
                "pull",
                "push"
            ],
            "x-enum-varnames": [
                "WebhookResourceActionCreate",
                "WebhookResourceActionUpdate",
                "WebhookResourceActionDelete",
                "WebhookResourceActionAdd",
                "WebhookResourceActionRemove",
                "WebhookResourceActionPull",
                "WebhookResourceActionPush"
            ]
        },
        "enums.WebhookResourceType": {
            "type": "string",
            "enum": [
                "ping",
                "namespace",
                "repository",
                "tag",
                "artifact",
                "member"
            ],
            "x-enum-varnames": [
                "WebhookResourceTypePing",
                "WebhookResourceTypeNamespace",
                "WebhookResourceTypeRepository",
                "WebhookResourceTypeTag",
                "WebhookResourceTypeArtifact",
                "WebhookResourceTypeMember"
            ]
        },
        "types.AddNamespaceMemberRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.NamespaceRole"
                        }
                    ],
                    "example": "NamespaceReader"
                },
                "user_id": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "types.AddNamespaceMemberResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "types.BuilderItem": {
            "type": "object",
            "properties": {
                "buildkit_build_args": {
                    "type": "string",
                    "example": "a=b,c=d"
                },
                "buildkit_context": {
                    "type": "string"
                },
                "buildkit_dockerfile": {
                    "type": "string"
                },
                "buildkit_insecure_registries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "test.com",
                        "xxx.com@http"
                    ]
                },
                "buildkit_platforms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/enums.OciPlatform"
                    },
                    "example": [
                        "linux/amd64"
                    ]
                },
                "code_repository_id": {
                    "description": "source CodeRepository",
                    "type": "integer",
                    "example": 10
                },
                "cron_branch": {
                    "type": "string",
                    "example": "main"
                },
                "cron_rule": {
                    "type": "string",
                    "example": "* * * * *"
                },
                "cron_tag_template": {
                    "type": "string",
                    "example": "{.Ref}"
                },
                "dockerfile": {
                    "description": "source Dockerfile",
                    "type": "string",
                    "example": "xxx"
                },
                "id": {
                    "type": "integer",
                    "example": 10
                },
                "repository_id": {
                    "type": "integer",
                    "example": 10
                },
                "scm_branch": {
                    "type": "string",
                    "example": "main"
                },
                "scm_credential_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.ScmCredentialType"
                        }
                    ],
                    "example": "ssh"
                },
                "scm_depth": {
                    "type": "integer",
                    "example": 0
                },
                "scm_password": {
                    "type": "string",
                    "example": "sigma"
                },
                "scm_repository": {
                    "description": "source SelfCodeRepository",
                    "type": "string",
                    "example": "https://github.com/go-sigma/sigma.git"
                },
                "scm_ssh_key": {
                    "type": "string",
                    "example": "xxxx"
                },
                "scm_submodule": {
                    "type": "boolean",
                    "example": false
                },
                "scm_token": {
                    "type": "string",
                    "example": "xxxx"
                },
                "scm_username": {
                    "type": "string",
                    "example": "sigma"
                },
                "source": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.BuilderSource"
                        }
                    ],
                    "example": "Dockerfile"
                },
                "webhook_branch_name": {
                    "type": "string",
                    "example": "main"
                },
                "webhook_branch_tag_template": {
                    "type": "string",
                    "example": "{.Ref}"
                },
                "webhook_tag_tag_template": {
                    "type": "string",
                    "example": "{.Ref}"
                }
            }
        },
        "types.CodeRepositoryBranchItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "main"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.CodeRepositoryItem": {
            "type": "object",
            "properties": {
                "clone_url": {
                    "type": "string",
                    "example": "https://github.com/go-sigma/sigma.git"
                },
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_org": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "sigma"
                },
                "oci_repo_count": {
                    "type": "integer",
                    "example": 1
                },
                "owner": {
                    "type": "string",
                    "example": "go-sigma"
                },
                "owner_id": {
                    "type": "string",
                    "example": "1"
                },
                "repository_id": {
                    "type": "string",
                    "example": "1"
                },
                "ssh_url": {
                    "type": "string",
                    "example": "git@github.com:go-sigma/sigma.git"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.CodeRepositoryOwnerItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_org": {
                    "type": "boolean",
                    "example": true
                },
                "owner": {
                    "type": "string",
                    "example": "go-sigma"
                },
                "owner_id": {
                    "type": "string",
                    "example": "1"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.CommonList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {}
                },
                "total": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "types.CreateBuilderRequest": {
            "type": "object",
            "required": [
                "buildkit_platforms"
            ],
            "properties": {
                "buildkit_build_args": {
                    "description": "TODO: validate",
                    "type": "string",
                    "example": "a=b,c=d"
                },
                "buildkit_context": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "buildkit_dockerfile": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "buildkit_insecure_registries": {
                    "type": "array",
                    "maxItems": 3,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "test.com",
                        "xxx.com@http"
                    ]
                },
                "buildkit_platforms": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/enums.OciPlatform"
                    },
                    "example": [
                        "linux/amd64"
                    ]
                },
                "code_repository_id": {
                    "description": "source CodeRepository",
                    "type": "integer",
                    "example": 10
                },
                "cron_branch": {
                    "type": "string",
                    "example": "main"
                },
                "cron_rule": {
                    "description": "TODO: validate",
                    "type": "string",
                    "example": "* * * * *"
                },
                "cron_tag_template": {
                    "type": "string",
                    "example": "{.Ref}"
                },
                "dockerfile": {
                    "description": "source Dockerfile",
                    "type": "string",
                    "example": "xxx"
                },
                "scm_branch": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "main"
                },
                "scm_credential_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.ScmCredentialType"
                        }
                    ],
                    "example": "ssh"
                },
                "scm_depth": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 0
                },
                "scm_password": {
                    "type": "string",
                    "example": "sigma"
                },
                "scm_provider": {
                    "$ref": "#/definitions/enums.ScmProvider"
                },
                "scm_repository": {
                    "description": "source SelfCodeRepository",
                    "type": "string",
                    "example": "https://github.com/go-sigma/sigma.git"
                },
                "scm_ssh_key": {
                    "type": "string",
                    "example": "xxxx"
                },
                "scm_submodule": {
                    "type": "boolean",
                    "example": false
                },
                "scm_token": {
                    "type": "string",
                    "example": "xxxx"
                },
                "scm_username": {
                    "type": "string",
                    "example": "sigma"
                },
                "source": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.BuilderSource"
                        }
                    ],
                    "example": "Dockerfile"
                },
                "webhook_branch_name": {
                    "type": "string",
                    "example": "main"
                },
                "webhook_branch_tag_template": {
                    "type": "string",
                    "example": "{.Ref}"
                },
                "webhook_tag_tag_template": {
                    "description": "TODO: validate",
                    "type": "string",
                    "example": "{.Ref}"
                }
            }
        },
        "types.CreateGcArtifactRunnerRequest": {
            "type": "object",
            "properties": {
                "namespace_id": {
                    "type": "integer"
                }
            }
        },
        "types.CreateGcBlobRunnerRequest": {
            "type": "object",
            "properties": {
                "namespace_id": {
                    "type": "integer"
                }
            }
        },
        "types.CreateGcRepositoryRunnerRequest": {
            "type": "object",
            "properties": {
                "namespace_id": {
                    "type": "integer"
                }
            }
        },
        "types.CreateGcTagRunnerRequest": {
            "type": "object",
            "properties": {
                "namespace_id": {
                    "type": "integer"
                }
            }
        },
        "types.CreateRepositoryRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "i am just description"
                },
                "name": {
                    "type": "string",
                    "example": "test"
                },
                "overview": {
                    "type": "string",
                    "maxLength": 3000,
                    "example": "i am just overview"
                },
                "size_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "tag_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "visibility": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.Visibility"
                        }
                    ],
                    "example": "public"
                }
            }
        },
        "types.CreateRepositoryResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 21911
                }
            }
        },
        "types.GcArtifactRecordItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "digest": {
                    "type": "string",
                    "example": "sha256:87508bf3e050b975770b142e62db72eeb345a67d82d36ca166300d8b27e45744"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "log"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.GcRecordStatus"
                        }
                    ],
                    "example": "Success"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GcArtifactRunnerItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "duration": {
                    "type": "string",
                    "example": "1h"
                },
                "ended_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "failed_count": {
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "log"
                },
                "raw_duration": {
                    "type": "integer",
                    "example": 10
                },
                "started_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.TaskCommonStatus"
                        }
                    ],
                    "example": "Pending"
                },
                "success_count": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GcBlobRecordItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "digest": {
                    "type": "string",
                    "example": "sha256:87508bf3e050b975770b142e62db72eeb345a67d82d36ca166300d8b27e45744"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "log"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.GcRecordStatus"
                        }
                    ],
                    "example": "Success"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GcBlobRunnerItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "duration": {
                    "type": "string",
                    "example": "1h"
                },
                "ended_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "failed_count": {
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "log"
                },
                "raw_duration": {
                    "type": "integer",
                    "example": 10
                },
                "started_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.TaskCommonStatus"
                        }
                    ],
                    "example": "Pending"
                },
                "success_count": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GcRepositoryRecordItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "log"
                },
                "repository": {
                    "type": "string",
                    "example": "library/busybox"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.GcRecordStatus"
                        }
                    ],
                    "example": "Success"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GcRepositoryRunnerItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "duration": {
                    "type": "string",
                    "example": "1h"
                },
                "ended_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "failed_count": {
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "log"
                },
                "raw_duration": {
                    "type": "integer",
                    "example": 10
                },
                "started_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.TaskCommonStatus"
                        }
                    ],
                    "example": "Pending"
                },
                "success_count": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GcTagRecordItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "digest": {
                    "type": "string",
                    "example": "sha256:87508bf3e050b975770b142e62db72eeb345a67d82d36ca166300d8b27e45744"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "log"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.GcRecordStatus"
                        }
                    ],
                    "example": "Success"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GcTagRunnerItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "duration": {
                    "type": "string",
                    "example": "1h"
                },
                "ended_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "failed_count": {
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "log"
                },
                "raw_duration": {
                    "type": "integer",
                    "example": 10
                },
                "started_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.TaskCommonStatus"
                        }
                    ],
                    "example": "Pending"
                },
                "success_count": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GetCodeRepositoryUser3rdPartyResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "1"
                },
                "cr_last_update_message": {
                    "type": "string"
                },
                "cr_last_update_status": {
                    "$ref": "#/definitions/enums.TaskCommonStatus"
                },
                "cr_last_update_timestamp": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GetGcArtifactRuleResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "cron_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "cron_next_trigger": {
                    "type": "string",
                    "example": "2021-01-01 00:00:00"
                },
                "cron_rule": {
                    "type": "string",
                    "example": "0 0 * * 6"
                },
                "is_running": {
                    "type": "boolean",
                    "example": true
                },
                "retention_day": {
                    "type": "integer",
                    "example": 10
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GetGcBlobRuleResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "cron_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "cron_next_trigger": {
                    "type": "string",
                    "example": "2021-01-01 00:00:00"
                },
                "cron_rule": {
                    "type": "string",
                    "example": "0 0 * * 6"
                },
                "retention_day": {
                    "type": "integer",
                    "example": 10
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GetGcRepositoryRuleResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "cron_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "cron_next_trigger": {
                    "type": "string",
                    "example": "2021-01-01 00:00:00"
                },
                "cron_rule": {
                    "type": "string",
                    "example": "0 0 * * 6"
                },
                "retention_day": {
                    "type": "integer",
                    "example": 10
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GetGcTagRuleResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "cron_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "cron_next_trigger": {
                    "type": "string",
                    "example": "2021-01-01 00:00:00"
                },
                "cron_rule": {
                    "type": "string",
                    "example": "0 0 * * 6"
                },
                "retention_pattern": {
                    "type": "string",
                    "example": "v*,1.*"
                },
                "retention_rule_amount": {
                    "type": "integer",
                    "example": 1
                },
                "retention_rule_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.RetentionRuleType"
                        }
                    ],
                    "example": "Day"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GetSystemEndpointResponse": {
            "type": "object",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "example": "https://example.com:3000"
                }
            }
        },
        "types.GetSystemVersionResponse": {
            "type": "object",
            "properties": {
                "build_date": {
                    "type": "string",
                    "example": "2023-10-16T11:25:45Z"
                },
                "git_hash": {
                    "type": "string",
                    "example": "4225b69a"
                },
                "version": {
                    "type": "string",
                    "example": "v1.0.0"
                }
            }
        },
        "types.GetWebhookLogResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.WebhookResourceAction"
                        }
                    ],
                    "example": "action"
                },
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "event": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.WebhookResourceType"
                        }
                    ],
                    "example": "event"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "req_body": {
                    "type": "string",
                    "example": ""
                },
                "req_header": {
                    "type": "string",
                    "example": ""
                },
                "resp_body": {
                    "type": "string",
                    "example": ""
                },
                "resp_header": {
                    "type": "string",
                    "example": ""
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.GetWebhookResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "enable": {
                    "type": "boolean",
                    "example": true
                },
                "event_artifact": {
                    "type": "boolean",
                    "example": true
                },
                "event_member": {
                    "type": "boolean",
                    "example": true
                },
                "event_namespace": {
                    "type": "boolean",
                    "example": true
                },
                "event_repository": {
                    "type": "boolean",
                    "example": true
                },
                "event_tag": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "namespace_id": {
                    "type": "integer",
                    "example": 1
                },
                "retry_duration": {
                    "type": "integer",
                    "example": 5
                },
                "retry_times": {
                    "type": "integer",
                    "example": 3
                },
                "secret": {
                    "type": "string",
                    "example": "secret"
                },
                "ssl_verify": {
                    "type": "boolean",
                    "example": true
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "url": {
                    "type": "string",
                    "example": "http://example.com/webhook"
                }
            }
        },
        "types.ListCodeRepositoryProvidersResponse": {
            "type": "object",
            "properties": {
                "provider": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.Provider"
                        }
                    ],
                    "example": "github"
                }
            }
        },
        "types.NamespaceItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "description": {
                    "type": "string",
                    "example": "i am just description"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "test"
                },
                "repository_count": {
                    "type": "integer",
                    "example": 10
                },
                "repository_limit": {
                    "type": "integer",
                    "example": 10
                },
                "size": {
                    "type": "integer",
                    "example": 10000
                },
                "size_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "tag_count": {
                    "type": "integer",
                    "example": 10
                },
                "tag_limit": {
                    "type": "integer",
                    "example": 10
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "visibility": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.Visibility"
                        }
                    ],
                    "example": "private"
                }
            }
        },
        "types.NamespaceMemberItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.NamespaceRole"
                        }
                    ],
                    "example": "NamespaceAdmin"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "types.Oauth2ClientIDResponse": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "types.PostNamespaceRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "i am just description"
                },
                "name": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2,
                    "example": "test"
                },
                "repository_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "size_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "tag_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "visibility": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.Visibility"
                        }
                    ],
                    "example": "public"
                }
            }
        },
        "types.PostNamespaceResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 21911
                }
            }
        },
        "types.PostUserLoginResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.PostUserLogoutRequest": {
            "type": "object",
            "required": [
                "tokens"
            ],
            "properties": {
                "tokens": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "123",
                        "234"
                    ]
                }
            }
        },
        "types.PostUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@gmail.com"
                },
                "namespace_limit": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 10
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5,
                    "example": "Admin@123"
                },
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.UserRole"
                        }
                    ],
                    "example": "Admin"
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2,
                    "example": "sigma"
                }
            }
        },
        "types.PostUserTokenResponse": {
            "type": "object",
            "properties": {
                "expires_in": {
                    "type": "integer",
                    "example": 3600
                },
                "issued_at": {
                    "type": "string",
                    "example": "2023-07-16T17:51:51+08:00"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJYSW1hZ2VyIiwic3ViIjoieGltYWdlciIsImV4cCI6MTY4OTUwNDcxMSwibmJmIjoxNjg5NTAxMTExLCJpYXQiOjE2ODk1MDExMTEsImp0aSI6ImIxYTRmMGQ1LWNlNTUtNGU3ZS1hYjY1LWRhNTZiMDhhNjg2YSIsImRhdCI6InhpbWFnZXIifQ.cjuIJVnLl9yFB9zhv0KPZUq_M1Mb-tiyjHQXYowRAROEdu5t6HHYnFnl348IYFg51vGDh7ROBp1-pZIQJ5gCyM4rTuoYZneS7NPtb8sFjch3dDotVDXSpbppdkXZAPvEIwXKDKcmyMCsAAgep4A6gVeQ07RthUbITahCG3-ssF9NTojDgIyKysReju3BV5FOh_lbBwNXmfBnRUV11w8eApAuLEJhdNM_W50BdoHvUHAbwblDmanNonc9zAkzcQQZqndCNZJJ2hee7ZqOSByWDtxnLB5zbvLBV76BJf6EAW8zTYDW9fxWwSydhvmo5bSxgcI4LFzloUXO-Mj1TWVg2Lvjf3vAkmdYUxD8fhxE7x49i02TN4ohwtr3jI27vOh4Jv4FgMbu2SkZTVrfQ7ySpcWgX-UC2egXSs2fwpwoPyDZn4LmnDTZX4_PLqz7IgoeusrpFzHnfKD_mf3q-xq1ugJoNQRFWXFpF9fhWmYPsefoKlU349ZVqHg19QT2sFnSJBHWqL92NAr75vzUxxmxN61ZpXU70xZ54-qXMsu1V2jyGQl2wlFDPPb8jUWEh9cY_EmEarFAJPCBTAaxhdTpe8lR7b4WcbHtGu2zDQYpDvNOL7NKTLzjzn1COewvE2jkf0m9fL-u3RzrEIfo4eLBSBbUrrnpFit7CQFzxUZF5u9IWaSuicqwy7KoFt3PazsvQNYi9DYoGi5TVuI2EtdWYCSA09J5rL3GKkUkwZT0yMrea21xR9tpBU4LvJLM00bXYXLQGwISoSQ30pLGJiOskDADMrF-Wfg7JZi1KiUyA8jNgNebOw9VVBYxR7h33vKNDJPI2dZsqOYAwXqaTQTdJAm888yrpBRt22s2lsWhUBmvRgHpDFUHKUQHTFNZNOi_CeL4YTaoWhcS9j6ydtrteDz3gw783hY9_kSnER0GiYZNyMPMJYcQTteeESwCP0_eRgZDtc7jFU2ZDFSWshzWk7M53YQvuSw9j3r5l3yJ88qYLgJoqnLgGBHOfdz5zkzJkECEXzbmb05JB7cnJUNgg_AJSpI38P7906JBXsBmgXpjqDyFdYn89NbqGZqwcyKEquvEtDfdSAIAqlbVT-g8lkC14T3YD-CJwhK7u3lB-bFAASOdb4xjz5hcL9C7KoElMNGxuK0r-7bDYBVqQVSt_jqbAPufx3fgpz8D-S-43DkN7ZIZTCaLrocNZjgT74KXlCzBYnPgTAOvPxOPzOUxrwgXLKbloKSWSAr8eOEgR2bdF8WFI7NG6WunlJp55v9yc5KTTeuaoDQGZhuVzAH5A05NtDDerT7KHeoiI2_q9s_VrY6J1er6bWq2VI46iYl339ozgje10RCDWCbWzWiGeg"
                }
            }
        },
        "types.PostWebhookRequest": {
            "type": "object",
            "required": [
                "enable",
                "retry_duration",
                "retry_times",
                "ssl_verify",
                "url"
            ],
            "properties": {
                "enable": {
                    "type": "boolean",
                    "example": true
                },
                "event_artifact": {
                    "type": "boolean",
                    "example": true
                },
                "event_member": {
                    "type": "boolean",
                    "example": true
                },
                "event_namespace": {
                    "type": "boolean",
                    "example": true
                },
                "event_repository": {
                    "type": "boolean",
                    "example": true
                },
                "event_tag": {
                    "type": "boolean",
                    "example": true
                },
                "retry_duration": {
                    "type": "integer",
                    "example": 5
                },
                "retry_times": {
                    "type": "integer",
                    "example": 3
                },
                "secret": {
                    "type": "string",
                    "maxLength": 63,
                    "example": "secret"
                },
                "ssl_verify": {
                    "type": "boolean",
                    "example": true
                },
                "url": {
                    "type": "string",
                    "maxLength": 128,
                    "example": "http://example.com/webhook"
                }
            }
        },
        "types.PutNamespaceRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "i am just description"
                },
                "repository_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "size_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "tag_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "visibility": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.Visibility"
                        }
                    ],
                    "example": "public"
                }
            }
        },
        "types.PutWebhookRequest": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "example": true
                },
                "event_artifact": {
                    "type": "boolean",
                    "example": true
                },
                "event_member": {
                    "type": "boolean",
                    "example": true
                },
                "event_namespace": {
                    "type": "boolean",
                    "example": true
                },
                "event_repository": {
                    "type": "boolean",
                    "example": true
                },
                "event_tag": {
                    "type": "boolean",
                    "example": true
                },
                "retry_duration": {
                    "type": "integer",
                    "example": 5
                },
                "retry_times": {
                    "type": "integer",
                    "example": 3
                },
                "secret": {
                    "type": "string",
                    "maxLength": 63,
                    "example": "secret"
                },
                "ssl_verify": {
                    "type": "boolean",
                    "example": true
                },
                "url": {
                    "type": "string",
                    "maxLength": 128,
                    "example": "http://example.com/webhook"
                }
            }
        },
        "types.RepositoryItem": {
            "type": "object",
            "properties": {
                "builder": {
                    "$ref": "#/definitions/types.BuilderItem"
                },
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "description": {
                    "type": "string",
                    "example": "i am just description"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "busybox"
                },
                "namespace_id": {
                    "type": "integer",
                    "example": 1
                },
                "overview": {
                    "type": "string",
                    "example": "i am just overview"
                },
                "size": {
                    "type": "integer",
                    "example": 10000
                },
                "size_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "tag_count": {
                    "type": "integer",
                    "example": 100
                },
                "tag_limit": {
                    "type": "integer",
                    "example": 1000
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "visibility": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.Visibility"
                        }
                    ],
                    "example": "private"
                }
            }
        },
        "types.TagItem": {
            "type": "object",
            "properties": {
                "artifact": {
                    "$ref": "#/definitions/types.TagItemArtifact"
                },
                "artifacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.TagItemArtifact"
                    }
                },
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "latest"
                },
                "pull_times": {
                    "type": "integer",
                    "example": 10
                },
                "pushed_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                }
            }
        },
        "types.TagItemArtifact": {
            "type": "object",
            "properties": {
                "blob_size": {
                    "type": "integer",
                    "example": 100210
                },
                "config_media_type": {
                    "type": "string",
                    "example": "application/vnd.oci.image.config.v1+json"
                },
                "config_raw": {
                    "type": "string",
                    "example": "{\"architecture\":\"amd64\",\"config\":{\"Hostname\":\"\",\"Domainname\":\"\",\"User\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":[\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"],\"Cmd\":[\"/bin/sh\"],\"Image\":\"sha256:5b8658701c96acefe1cd3a21b2a80220badf9124891ad440d95a7fa500d48765\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"OnBuild\":null,\"Labels\":null},\"container\":\"bfc8078c169637d70e40ce591b5c2fe8d26329918dafcb96ebc9304ddff162ea\",\"container_config\":{\"Hostname\":\"bfc8078c1696\",\"Domainname\":\"\",\"User\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":[\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"],\"Cmd\":[\"/bin/sh\",\"-c\",\"#(nop) \",\"CMD [\\\"/bin/sh\\\"]\"],\"Image\":\"sha256:5b8658701c96acefe1cd3a21b2a80220badf9124891ad440d95a7fa500d48765\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"OnBuild\":null,\"Labels\":{}},\"created\":\"2023-06-14T20:41:59.079795125Z\",\"docker_version\":\"20.10.23\",\"history\":[{\"created\":\"2023-06-14T20:41:58.950178204Z\",\"created_by\":\"/bin/sh -c #(nop) ADD file:1da756d12551a0e3e793e02ef87432d69d4968937bd11bed0af215db19dd94cd in / \"},{\"created\":\"2023-06-14T20:41:59.079795125Z\",\"created_by\":\"/bin/sh -c #(nop)  CMD [\\\"/bin/sh\\\"]\",\"empty_layer\":true}],\"os\":\"linux\",\"rootfs\":{\"type\":\"layers\",\"diff_ids\":[\"sha256:78a822fe2a2d2c84f3de4a403188c45f623017d6a4521d23047c9fbb0801794c\"]}}"
                },
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "digest": {
                    "type": "string",
                    "example": "sha256:87508bf3e050b975770b142e62db72eeb345a67d82d36ca166300d8b27e45744"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_pull": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "media_type": {
                    "type": "string",
                    "example": "application/vnd.oci.image.manifest.v1+json"
                },
                "pull_times": {
                    "type": "integer",
                    "example": 10
                },
                "pushed_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "raw": {
                    "type": "string",
                    "example": "{\n   \"schemaVersion\": 2,\n   \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n   \"config\": {\n      \"mediaType\": \"application/vnd.docker.container.image.v1+json\",\n      \"size\": 1472,\n      \"digest\": \"sha256:c1aabb73d2339c5ebaa3681de2e9d9c18d57485045a4e311d9f8004bec208d67\"\n   },\n   \"layers\": [\n      {\n         \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 3397879,\n         \"digest\": \"sha256:31e352740f534f9ad170f75378a84fe453d6156e40700b882d737a8f4a6988a3\"\n      }\n   ]\n}"
                },
                "sbom": {
                    "type": "string",
                    "example": "{\"distro\":{\"name\":\"alpine\",\"version\":\"3.18.2\"},\"os\":\"linux\",\"architecture\":\"amd64\"}"
                },
                "size": {
                    "type": "integer",
                    "example": 10201
                },
                "type": {
                    "type": "string",
                    "example": "image"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "vulnerability": {
                    "type": "string",
                    "example": "{\"critical\":0,\"high\":0,\"medium\":0,\"low\":0}"
                }
            }
        },
        "types.UpdateBuilderRequest": {
            "type": "object",
            "required": [
                "buildkit_platforms"
            ],
            "properties": {
                "buildkit_build_args": {
                    "description": "TODO: validate",
                    "type": "string",
                    "example": "a=b,c=d"
                },
                "buildkit_context": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "buildkit_dockerfile": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "buildkit_insecure_registries": {
                    "type": "array",
                    "maxItems": 3,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "test.com",
                        "xxx.com@http"
                    ]
                },
                "buildkit_platforms": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/enums.OciPlatform"
                    },
                    "example": [
                        "linux/amd64"
                    ]
                },
                "code_repository_id": {
                    "description": "source CodeRepository",
                    "type": "integer",
                    "example": 10
                },
                "cron_branch": {
                    "type": "string",
                    "example": "main"
                },
                "cron_rule": {
                    "description": "TODO: validate",
                    "type": "string",
                    "example": "* * * * *"
                },
                "cron_tag_template": {
                    "type": "string",
                    "example": "{.Ref}"
                },
                "dockerfile": {
                    "description": "source Dockerfile",
                    "type": "string",
                    "example": "xxx"
                },
                "scm_branch": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "main"
                },
                "scm_credential_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.ScmCredentialType"
                        }
                    ],
                    "example": "ssh"
                },
                "scm_depth": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 0
                },
                "scm_password": {
                    "type": "string",
                    "example": "sigma"
                },
                "scm_provider": {
                    "$ref": "#/definitions/enums.ScmProvider"
                },
                "scm_repository": {
                    "description": "source SelfCodeRepository",
                    "type": "string",
                    "example": "https://github.com/go-sigma/sigma.git"
                },
                "scm_ssh_key": {
                    "type": "string",
                    "example": "xxxx"
                },
                "scm_submodule": {
                    "type": "boolean",
                    "example": false
                },
                "scm_token": {
                    "type": "string",
                    "example": "xxxx"
                },
                "scm_username": {
                    "type": "string",
                    "example": "sigma"
                },
                "source": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.BuilderSource"
                        }
                    ],
                    "example": "Dockerfile"
                },
                "webhook_branch_name": {
                    "type": "string",
                    "example": "main"
                },
                "webhook_branch_tag_template": {
                    "type": "string",
                    "example": "{.Ref}"
                },
                "webhook_tag_tag_template": {
                    "description": "TODO: validate",
                    "type": "string",
                    "example": "{.Ref}"
                }
            }
        },
        "types.UpdateGcArtifactRuleRequest": {
            "type": "object",
            "properties": {
                "cron_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "cron_rule": {
                    "type": "string",
                    "example": "0 0 * * 6"
                },
                "namespace_id": {
                    "type": "integer",
                    "example": 10
                },
                "retention_day": {
                    "type": "integer",
                    "maximum": 180,
                    "minimum": 0,
                    "example": 10
                }
            }
        },
        "types.UpdateGcBlobRuleRequest": {
            "type": "object",
            "properties": {
                "cron_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "cron_rule": {
                    "type": "string",
                    "example": "0 0 * * 6"
                },
                "namespace_id": {
                    "type": "integer",
                    "example": 10
                },
                "retention_day": {
                    "type": "integer",
                    "maximum": 180,
                    "minimum": 0,
                    "example": 10
                }
            }
        },
        "types.UpdateGcRepositoryRuleRequest": {
            "type": "object",
            "properties": {
                "cron_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "cron_rule": {
                    "type": "string",
                    "example": "0 0 * * 6"
                },
                "namespace_id": {
                    "type": "integer",
                    "example": 10
                },
                "retention_day": {
                    "type": "integer",
                    "maximum": 180,
                    "minimum": 0,
                    "example": 10
                }
            }
        },
        "types.UpdateGcTagRuleRequest": {
            "type": "object",
            "properties": {
                "cron_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "cron_rule": {
                    "type": "string",
                    "example": "0 0 * * 6"
                },
                "namespace_id": {
                    "type": "integer",
                    "example": 10
                },
                "retention_pattern": {
                    "type": "string",
                    "example": "v*,1.*"
                },
                "retention_rule_amount": {
                    "type": "integer",
                    "maximum": 180,
                    "minimum": 1,
                    "example": 1
                },
                "retention_rule_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.RetentionRuleType"
                        }
                    ],
                    "example": "Day"
                }
            }
        },
        "types.UpdateNamespaceMemberRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.NamespaceRole"
                        }
                    ],
                    "example": "NamespaceReader"
                }
            }
        },
        "types.UpdateRepositoryRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 300,
                    "example": "i am just description"
                },
                "overview": {
                    "type": "string",
                    "maxLength": 100000,
                    "example": "i am just overview"
                },
                "size_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "tag_limit": {
                    "type": "integer",
                    "example": 10000
                },
                "visibility": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.Visibility"
                        }
                    ],
                    "example": "public"
                }
            }
        },
        "types.UserItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_login": {
                    "type": "string"
                },
                "namespace_count": {
                    "type": "integer"
                },
                "namespace_limit": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/enums.UserRole"
                },
                "status": {
                    "$ref": "#/definitions/enums.UserStatus"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.ValidateCronRequest": {
            "type": "object",
            "required": [
                "cron"
            ],
            "properties": {
                "cron": {
                    "type": "string",
                    "example": "0 0 * * 6"
                }
            }
        },
        "types.ValidatePasswordRequest": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "Admin@123"
                }
            }
        },
        "types.WebhookItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "enable": {
                    "type": "boolean",
                    "example": true
                },
                "event_artifact": {
                    "type": "boolean",
                    "example": true
                },
                "event_member": {
                    "type": "boolean",
                    "example": true
                },
                "event_namespace": {
                    "type": "boolean",
                    "example": true
                },
                "event_repository": {
                    "type": "boolean",
                    "example": true
                },
                "event_tag": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "namespace_id": {
                    "type": "integer",
                    "example": 1
                },
                "retry_duration": {
                    "type": "integer",
                    "example": 5
                },
                "retry_times": {
                    "type": "integer",
                    "example": 3
                },
                "secret": {
                    "type": "string",
                    "example": "secret"
                },
                "ssl_verify": {
                    "type": "boolean",
                    "example": true
                },
                "updated_at": {
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "url": {
                    "type": "string",
                    "example": "http://example.com/webhook"
                }
            }
        },
        "xerrors.ErrCode": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code provides a unique, string key, often capitalized with\nunderscores, to identify the error code. This value is used as the\nkeyed value when serializing api errors.",
                    "type": "string",
                    "example": "UNAUTHORIZED"
                },
                "description": {
                    "description": "Description provides a complete account of the errors purpose, suitable\nfor use in documentation.",
                    "type": "string",
                    "example": "The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate."
                },
                "httpStatusCode": {
                    "description": "HTTPStatusCode provides the http status code that is associated with\nthis error condition.",
                    "type": "integer",
                    "example": 401
                },
                "title": {
                    "description": "Title is a short, human readable description of the error condition\nincluded in API responses.",
                    "type": "string",
                    "example": "authentication required"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}