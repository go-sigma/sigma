basePath: /api/v1
definitions:
  enums.Visibility:
    enum:
    - private
    - public
    type: string
    x-enum-varnames:
    - VisibilityPrivate
    - VisibilityPublic
  types.CommonList:
    properties:
      items:
        items: {}
        type: array
      total:
        example: 1
        type: integer
    type: object
  types.NamespaceItem:
    properties:
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      description:
        example: i am just description
        type: string
      id:
        example: 1
        type: integer
      name:
        example: test
        type: string
      repository_count:
        example: 10
        type: integer
      repository_limit:
        example: 10
        type: integer
      size:
        example: 10000
        type: integer
      size_limit:
        example: 10000
        type: integer
      tag_count:
        example: 10
        type: integer
      tag_limit:
        example: 10
        type: integer
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: private
    type: object
  types.PostNamespaceRequest:
    properties:
      description:
        example: i am just description
        maxLength: 30
        type: string
      name:
        example: test
        maxLength: 20
        minLength: 2
        type: string
      size_limit:
        example: 10000
        type: integer
      tag_limit:
        example: 10000
        type: integer
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: public
    required:
    - name
    type: object
  types.PostNamespaceResponse:
    properties:
      id:
        example: 21911
        type: integer
    type: object
  types.PostRepositoryRequestSwagger:
    properties:
      description:
        example: i am just description
        maxLength: 30
        type: string
      name:
        example: test
        type: string
      overview:
        example: i am just overview
        maxLength: 3000
        type: string
      size_limit:
        example: 10000
        type: integer
      tag_limit:
        example: 10000
        type: integer
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: public
    required:
    - name
    type: object
  types.PostRepositoryResponse:
    properties:
      id:
        example: 21911
        type: integer
    type: object
  types.PutNamespaceRequestSwagger:
    properties:
      description:
        example: i am just description
        maxLength: 30
        type: string
      size_limit:
        example: 10000
        type: integer
      tag_limit:
        example: 10000
        type: integer
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: public
    type: object
  types.PutRepositoryRequestSwagger:
    properties:
      description:
        example: i am just description
        maxLength: 300
        type: string
      overview:
        example: i am just overview
        maxLength: 3000
        type: string
      size_limit:
        example: 10000
        type: integer
      tag_limit:
        example: 10000
        type: integer
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: public
    type: object
  types.PutRepositoryResponse:
    properties:
      id:
        example: 21911
        type: integer
    type: object
  types.RepositoryItem:
    properties:
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      description:
        example: i am just description
        maxLength: 30
        type: string
      id:
        example: 1
        type: integer
      name:
        example: busybox
        type: string
      overview:
        example: i am just overview
        maxLength: 3000
        type: string
      size:
        example: 10000
        type: integer
      size_limit:
        example: 10000
        type: integer
      tag_count:
        example: 100
        type: integer
      tag_limit:
        example: 1000
        type: integer
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: private
    type: object
  xerrors.ErrCode:
    properties:
      code:
        description: |-
          Code provides a unique, string key, often capitalized with
          underscores, to identify the error code. This value is used as the
          keyed value when serializing api errors.
        example: UNAUTHORIZED
        type: string
      description:
        description: |-
          Description provides a complete account of the errors purpose, suitable
          for use in documentation.
        example: The access controller was unable to authenticate the client. Often
          this will be accompanied by a Www-Authenticate HTTP response header indicating
          how to authenticate.
        type: string
      httpStatusCode:
        description: |-
          HTTPStatusCode provides the http status code that is associated with
          this error condition.
        example: 401
        type: integer
      title:
        description: |-
          Title is a short, human readable description of the error condition
          included in API responses.
        example: authentication required
        type: string
    type: object
info:
  contact:
    name: XImager
    url: https://github.com/ximager/ximager
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  title: XImager API
  version: "1.0"
paths:
  /namespaces/:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: search namespace with name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.NamespaceItem'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: List namespace
      tags:
      - Namespace
    post:
      consumes:
      - application/json
      parameters:
      - description: Namespace object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PostNamespaceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.PostNamespaceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Create namespace
      tags:
      - Namespace
  /namespaces/{id}:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Delete namespace
      tags:
      - Namespace
    get:
      consumes:
      - application/json
      parameters:
      - description: Namespace ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.NamespaceItem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Get namespace
      tags:
      - Namespace
    put:
      consumes:
      - application/json
      parameters:
      - description: Namespace object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PutNamespaceRequestSwagger'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BasicAuth: []
      summary: Update namespace
      tags:
      - Namespace
  /namespaces/{namespace}/repositories/:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: search repository with name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.RepositoryItem'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: List repository
      tags:
      - Repository
    post:
      consumes:
      - application/json
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Repository object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PostRepositoryRequestSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.PostRepositoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Create repository
      tags:
      - Repository
  /namespaces/{namespace}/repositories/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: Repository ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Delete repository
      tags:
      - Repository
    get:
      consumes:
      - application/json
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.RepositoryItem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Get repository
      tags:
      - Repository
    put:
      consumes:
      - application/json
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Repository id
        in: path
        name: id
        required: true
        type: string
      - description: Repository object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PutRepositoryRequestSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.PutRepositoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Update repository
      tags:
      - Repository
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
