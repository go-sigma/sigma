basePath: /api/v1
definitions:
  enums.AuditAction:
    enum:
    - create
    - update
    - delete
    - pull
    - push
    type: string
    x-enum-varnames:
    - AuditActionCreate
    - AuditActionUpdate
    - AuditActionDelete
    - AuditActionPull
    - AuditActionPush
  enums.ScmCredentialType:
    enum:
    - ssh
    - token
    - username
    - none
    type: string
    x-enum-varnames:
    - ScmCredentialTypeSsh
    - ScmCredentialTypeToken
    - ScmCredentialTypeUsername
    - ScmCredentialTypeNone
  enums.TaskCommonStatus:
    enum:
    - Pending
    - Doing
    - Success
    - Failed
    type: string
    x-enum-varnames:
    - TaskCommonStatusPending
    - TaskCommonStatusDoing
    - TaskCommonStatusSuccess
    - TaskCommonStatusFailed
  enums.Visibility:
    enum:
    - private
    - public
    type: string
    x-enum-varnames:
    - VisibilityPrivate
    - VisibilityPublic
  enums.WebhookResourceAction:
    enum:
    - create
    - update
    - delete
    - add
    - remove
    - pull
    - push
    type: string
    x-enum-varnames:
    - WebhookResourceActionCreate
    - WebhookResourceActionUpdate
    - WebhookResourceActionDelete
    - WebhookResourceActionAdd
    - WebhookResourceActionRemove
    - WebhookResourceActionPull
    - WebhookResourceActionPush
  enums.WebhookResourceType:
    enum:
    - ping
    - namespace
    - repository
    - tag
    - artifact
    - member
    type: string
    x-enum-varnames:
    - WebhookResourceTypePing
    - WebhookResourceTypeNamespace
    - WebhookResourceTypeRepository
    - WebhookResourceTypeTag
    - WebhookResourceTypeArtifact
    - WebhookResourceTypeMember
  types.CodeRepositoryItem:
    properties:
      clone_url:
        example: https://github.com/go-sigma/sigma.git
        type: string
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: sigma
        type: string
      owner:
        example: go-sigma
        type: string
      ssh_url:
        example: git@github.com:go-sigma/sigma.git
        type: string
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
    type: object
  types.CodeRepositoryOwnerItem:
    properties:
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: go-sigma
        type: string
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
    type: object
  types.CommonList:
    properties:
      items:
        items: {}
        type: array
      total:
        example: 1
        type: integer
    type: object
  types.DaemonLogItem:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/enums.AuditAction'
        example: delete
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      id:
        example: 1
        type: integer
      message:
        example: something error occurred
        type: string
      resource:
        example: test
        type: string
      status:
        $ref: '#/definitions/enums.TaskCommonStatus'
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
    type: object
  types.GetEndpointResponse:
    properties:
      endpoint:
        example: https://example.com:3000
        type: string
    type: object
  types.GetUserItem:
    properties:
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      email:
        type: string
      id:
        type: integer
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
      username:
        type: string
    type: object
  types.GetWebhookLogResponse:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/enums.WebhookResourceAction'
        example: action
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      event:
        allOf:
        - $ref: '#/definitions/enums.WebhookResourceType'
        example: event
      id:
        example: 1
        type: integer
      req_body:
        example: ""
        type: string
      req_header:
        example: ""
        type: string
      resp_body:
        example: ""
        type: string
      resp_header:
        example: ""
        type: string
      status_code:
        example: 200
        type: integer
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
    type: object
  types.GetWebhookResponse:
    properties:
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      enable:
        example: true
        type: boolean
      event_artifact:
        example: true
        type: boolean
      event_member:
        example: true
        type: boolean
      event_namespace:
        example: true
        type: boolean
      event_repository:
        example: true
        type: boolean
      event_tag:
        example: true
        type: boolean
      id:
        example: 1
        type: integer
      namespace_id:
        example: 1
        type: integer
      retry_duration:
        example: 5
        type: integer
      retry_times:
        example: 3
        type: integer
      secret:
        example: secret
        type: string
      ssl_verify:
        example: true
        type: boolean
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
      url:
        example: http://example.com/webhook
        type: string
    type: object
  types.NamespaceItem:
    properties:
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      description:
        example: i am just description
        type: string
      id:
        example: 1
        type: integer
      name:
        example: test
        type: string
      repository_count:
        example: 10
        type: integer
      repository_limit:
        example: 10
        type: integer
      size:
        example: 10000
        type: integer
      size_limit:
        example: 10000
        type: integer
      tag_count:
        example: 10
        type: integer
      tag_limit:
        example: 10
        type: integer
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: private
    type: object
  types.PostBuilderRequestSwagger:
    properties:
      scm_branch:
        example: main
        type: string
      scm_credential_type:
        allOf:
        - $ref: '#/definitions/enums.ScmCredentialType'
        example: ssh
      scm_depth:
        example: 0
        type: integer
      scm_password:
        example: sigma
        type: string
      scm_repository:
        description: ScmProvider       enums.ScmProvider       `json:"scm_provider"`
        example: https://github.com/go-sigma/sigma.git
        type: string
      scm_ssh_key:
        example: xxxx
        type: string
      scm_submodule:
        example: false
        type: boolean
      scm_token:
        example: xxxx
        type: string
      scm_username:
        example: sigma
        type: string
    type: object
  types.PostNamespaceRequest:
    properties:
      description:
        example: i am just description
        maxLength: 30
        type: string
      name:
        example: test
        maxLength: 20
        minLength: 2
        type: string
      repository_limit:
        example: 10000
        type: integer
      size_limit:
        example: 10000
        type: integer
      tag_limit:
        example: 10000
        type: integer
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: public
    required:
    - name
    type: object
  types.PostNamespaceResponse:
    properties:
      id:
        example: 21911
        type: integer
    type: object
  types.PostRepositoryRequestSwagger:
    properties:
      description:
        example: i am just description
        maxLength: 30
        type: string
      name:
        example: test
        type: string
      overview:
        example: i am just overview
        maxLength: 3000
        type: string
      size_limit:
        example: 10000
        type: integer
      tag_limit:
        example: 10000
        type: integer
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: public
    required:
    - name
    type: object
  types.PostRepositoryResponse:
    properties:
      id:
        example: 21911
        type: integer
    type: object
  types.PostUserLogoutRequest:
    properties:
      tokens:
        example:
        - "123"
        - "234"
        items:
          type: string
        minItems: 1
        type: array
    required:
    - tokens
    type: object
  types.PostUserTokenResponse:
    properties:
      expires_in:
        example: 3600
        type: integer
      issued_at:
        example: "2023-07-16T17:51:51+08:00"
        type: string
      token:
        example: eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJYSW1hZ2VyIiwic3ViIjoieGltYWdlciIsImV4cCI6MTY4OTUwNDcxMSwibmJmIjoxNjg5NTAxMTExLCJpYXQiOjE2ODk1MDExMTEsImp0aSI6ImIxYTRmMGQ1LWNlNTUtNGU3ZS1hYjY1LWRhNTZiMDhhNjg2YSIsImRhdCI6InhpbWFnZXIifQ.cjuIJVnLl9yFB9zhv0KPZUq_M1Mb-tiyjHQXYowRAROEdu5t6HHYnFnl348IYFg51vGDh7ROBp1-pZIQJ5gCyM4rTuoYZneS7NPtb8sFjch3dDotVDXSpbppdkXZAPvEIwXKDKcmyMCsAAgep4A6gVeQ07RthUbITahCG3-ssF9NTojDgIyKysReju3BV5FOh_lbBwNXmfBnRUV11w8eApAuLEJhdNM_W50BdoHvUHAbwblDmanNonc9zAkzcQQZqndCNZJJ2hee7ZqOSByWDtxnLB5zbvLBV76BJf6EAW8zTYDW9fxWwSydhvmo5bSxgcI4LFzloUXO-Mj1TWVg2Lvjf3vAkmdYUxD8fhxE7x49i02TN4ohwtr3jI27vOh4Jv4FgMbu2SkZTVrfQ7ySpcWgX-UC2egXSs2fwpwoPyDZn4LmnDTZX4_PLqz7IgoeusrpFzHnfKD_mf3q-xq1ugJoNQRFWXFpF9fhWmYPsefoKlU349ZVqHg19QT2sFnSJBHWqL92NAr75vzUxxmxN61ZpXU70xZ54-qXMsu1V2jyGQl2wlFDPPb8jUWEh9cY_EmEarFAJPCBTAaxhdTpe8lR7b4WcbHtGu2zDQYpDvNOL7NKTLzjzn1COewvE2jkf0m9fL-u3RzrEIfo4eLBSBbUrrnpFit7CQFzxUZF5u9IWaSuicqwy7KoFt3PazsvQNYi9DYoGi5TVuI2EtdWYCSA09J5rL3GKkUkwZT0yMrea21xR9tpBU4LvJLM00bXYXLQGwISoSQ30pLGJiOskDADMrF-Wfg7JZi1KiUyA8jNgNebOw9VVBYxR7h33vKNDJPI2dZsqOYAwXqaTQTdJAm888yrpBRt22s2lsWhUBmvRgHpDFUHKUQHTFNZNOi_CeL4YTaoWhcS9j6ydtrteDz3gw783hY9_kSnER0GiYZNyMPMJYcQTteeESwCP0_eRgZDtc7jFU2ZDFSWshzWk7M53YQvuSw9j3r5l3yJ88qYLgJoqnLgGBHOfdz5zkzJkECEXzbmb05JB7cnJUNgg_AJSpI38P7906JBXsBmgXpjqDyFdYn89NbqGZqwcyKEquvEtDfdSAIAqlbVT-g8lkC14T3YD-CJwhK7u3lB-bFAASOdb4xjz5hcL9C7KoElMNGxuK0r-7bDYBVqQVSt_jqbAPufx3fgpz8D-S-43DkN7ZIZTCaLrocNZjgT74KXlCzBYnPgTAOvPxOPzOUxrwgXLKbloKSWSAr8eOEgR2bdF8WFI7NG6WunlJp55v9yc5KTTeuaoDQGZhuVzAH5A05NtDDerT7KHeoiI2_q9s_VrY6J1er6bWq2VI46iYl339ozgje10RCDWCbWzWiGeg
        type: string
    type: object
  types.PostWebhookRequestSwagger:
    properties:
      enable:
        example: true
        type: boolean
      event_artifact:
        example: true
        type: boolean
      event_member:
        example: true
        type: boolean
      event_namespace:
        example: true
        type: boolean
      event_repository:
        example: true
        type: boolean
      event_tag:
        example: true
        type: boolean
      namespace_id:
        example: 1
        type: integer
      retry_duration:
        example: 5
        type: integer
      retry_times:
        example: 3
        type: integer
      secret:
        example: secret
        maxLength: 63
        type: string
      ssl_verify:
        example: true
        type: boolean
      url:
        example: http://example.com/webhook
        maxLength: 128
        type: string
    required:
    - enable
    - retry_duration
    - retry_times
    - ssl_verify
    - url
    type: object
  types.PutNamespaceRequestSwagger:
    properties:
      description:
        example: i am just description
        maxLength: 30
        type: string
      size_limit:
        example: 10000
        type: integer
      tag_limit:
        example: 10000
        type: integer
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: public
    type: object
  types.PutRepositoryRequestSwagger:
    properties:
      description:
        example: i am just description
        maxLength: 300
        type: string
      overview:
        example: i am just overview
        maxLength: 3000
        type: string
      size_limit:
        example: 10000
        type: integer
      tag_limit:
        example: 10000
        type: integer
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: public
    type: object
  types.PutWebhookRequestSwagger:
    properties:
      enable:
        example: true
        type: boolean
      event_artifact:
        example: true
        type: boolean
      event_member:
        example: true
        type: boolean
      event_namespace:
        example: true
        type: boolean
      event_repository:
        example: true
        type: boolean
      event_tag:
        example: true
        type: boolean
      retry_duration:
        example: 5
        type: integer
      retry_times:
        example: 3
        type: integer
      secret:
        example: secret
        maxLength: 63
        type: string
      ssl_verify:
        example: true
        type: boolean
      url:
        example: http://example.com/webhook
        maxLength: 128
        type: string
    type: object
  types.RepositoryItem:
    properties:
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      description:
        example: i am just description
        maxLength: 30
        type: string
      id:
        example: 1
        type: integer
      name:
        example: busybox
        type: string
      overview:
        example: i am just overview
        maxLength: 3000
        type: string
      size:
        example: 10000
        type: integer
      size_limit:
        example: 10000
        type: integer
      tag_count:
        example: 100
        type: integer
      tag_limit:
        example: 1000
        type: integer
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
      visibility:
        allOf:
        - $ref: '#/definitions/enums.Visibility'
        example: private
    type: object
  types.TagItem:
    properties:
      artifact:
        $ref: '#/definitions/types.TagItemArtifact'
      artifacts:
        items:
          $ref: '#/definitions/types.TagItemArtifact'
        type: array
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: latest
        type: string
      pushed_at:
        example: "2006-01-02 15:04:05"
        type: string
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
    type: object
  types.TagItemArtifact:
    properties:
      blob_size:
        example: 100210
        type: integer
      config_media_type:
        example: application/vnd.oci.image.config.v1+json
        type: string
      config_raw:
        example: '{"architecture":"amd64","config":{"Hostname":"","Domainname":"","User":"","AttachStdin":false,"AttachStdout":false,"AttachStderr":false,"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":["PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"],"Cmd":["/bin/sh"],"Image":"sha256:5b8658701c96acefe1cd3a21b2a80220badf9124891ad440d95a7fa500d48765","Volumes":null,"WorkingDir":"","Entrypoint":null,"OnBuild":null,"Labels":null},"container":"bfc8078c169637d70e40ce591b5c2fe8d26329918dafcb96ebc9304ddff162ea","container_config":{"Hostname":"bfc8078c1696","Domainname":"","User":"","AttachStdin":false,"AttachStdout":false,"AttachStderr":false,"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":["PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"],"Cmd":["/bin/sh","-c","#(nop)
          ","CMD [\"/bin/sh\"]"],"Image":"sha256:5b8658701c96acefe1cd3a21b2a80220badf9124891ad440d95a7fa500d48765","Volumes":null,"WorkingDir":"","Entrypoint":null,"OnBuild":null,"Labels":{}},"created":"2023-06-14T20:41:59.079795125Z","docker_version":"20.10.23","history":[{"created":"2023-06-14T20:41:58.950178204Z","created_by":"/bin/sh
          -c #(nop) ADD file:1da756d12551a0e3e793e02ef87432d69d4968937bd11bed0af215db19dd94cd
          in / "},{"created":"2023-06-14T20:41:59.079795125Z","created_by":"/bin/sh
          -c #(nop)  CMD [\"/bin/sh\"]","empty_layer":true}],"os":"linux","rootfs":{"type":"layers","diff_ids":["sha256:78a822fe2a2d2c84f3de4a403188c45f623017d6a4521d23047c9fbb0801794c"]}}'
        type: string
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      digest:
        example: sha256:87508bf3e050b975770b142e62db72eeb345a67d82d36ca166300d8b27e45744
        type: string
      id:
        example: 1
        type: integer
      last_pull:
        example: "2006-01-02 15:04:05"
        type: string
      pull_times:
        example: 10
        type: integer
      pushed_at:
        example: "2006-01-02 15:04:05"
        type: string
      raw:
        example: |-
          {
             "schemaVersion": 2,
             "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
             "config": {
                "mediaType": "application/vnd.docker.container.image.v1+json",
                "size": 1472,
                "digest": "sha256:c1aabb73d2339c5ebaa3681de2e9d9c18d57485045a4e311d9f8004bec208d67"
             },
             "layers": [
                {
                   "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
                   "size": 3397879,
                   "digest": "sha256:31e352740f534f9ad170f75378a84fe453d6156e40700b882d737a8f4a6988a3"
                }
             ]
          }
        type: string
      sbom:
        example: '{"distro":{"name":"alpine","version":"3.18.2"},"os":"linux","architecture":"amd64"}'
        type: string
      size:
        example: 10201
        type: integer
      type:
        example: image
        type: string
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
      vulnerability:
        example: '{"critical":0,"high":0,"medium":0,"low":0}'
        type: string
    type: object
  types.WebhookItem:
    properties:
      created_at:
        example: "2006-01-02 15:04:05"
        type: string
      enable:
        example: true
        type: boolean
      event_artifact:
        example: true
        type: boolean
      event_member:
        example: true
        type: boolean
      event_namespace:
        example: true
        type: boolean
      event_repository:
        example: true
        type: boolean
      event_tag:
        example: true
        type: boolean
      id:
        example: 1
        type: integer
      namespace_id:
        example: 1
        type: integer
      retry_duration:
        example: 5
        type: integer
      retry_times:
        example: 3
        type: integer
      secret:
        example: secret
        type: string
      ssl_verify:
        example: true
        type: boolean
      updated_at:
        example: "2006-01-02 15:04:05"
        type: string
      url:
        example: http://example.com/webhook
        type: string
    type: object
  xerrors.ErrCode:
    properties:
      code:
        description: |-
          Code provides a unique, string key, often capitalized with
          underscores, to identify the error code. This value is used as the
          keyed value when serializing api errors.
        example: UNAUTHORIZED
        type: string
      description:
        description: |-
          Description provides a complete account of the errors purpose, suitable
          for use in documentation.
        example: The access controller was unable to authenticate the client. Often
          this will be accompanied by a Www-Authenticate HTTP response header indicating
          how to authenticate.
        type: string
      httpStatusCode:
        description: |-
          HTTPStatusCode provides the http status code that is associated with
          this error condition.
        example: 401
        type: integer
      title:
        description: |-
          Title is a short, human readable description of the error condition
          included in API responses.
        example: authentication required
        type: string
    type: object
info:
  contact:
    name: sigma
    url: https://github.com/go-sigma/sigma
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  title: sigma API
  version: "1.0"
paths:
  /builders:
    post:
      consumes:
      - application/json
      parameters:
      - description: create builder for repository
        in: query
        name: repository_id
        required: true
        type: integer
      - description: Builder object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PostBuilderRequestSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Create a builder for repository
      tags:
      - Builder
  /coderepos/:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: search code repository with name
        in: query
        name: name
        type: string
      - description: search code repository with provider
        in: query
        name: provider
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.CodeRepositoryOwnerItem'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: List code repository owners
      tags:
      - Namespace
  /coderepos/owners/:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: search code repository with name
        in: query
        name: name
        type: string
      - description: search code repository with owner
        in: query
        name: owner
        type: string
      - description: search code repository with provider
        in: query
        name: provider
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.CodeRepositoryItem'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: List code repositories
      tags:
      - Namespace
  /daemons/{daemon}/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Daemon name
        in: path
        name: daemon
        required: true
        type: string
      - description: Namespace ID
        in: query
        name: namespace_id
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      summary: Get specific daemon task status
      tags:
      - Daemon
    post:
      consumes:
      - application/json
      parameters:
      - description: Daemon name
        in: path
        name: daemon
        required: true
        type: string
      - description: Namespace ID
        in: query
        name: namespace_id
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      summary: Run the specific daemon task
      tags:
      - Daemon
  /daemons/{daemon}/logs:
    get:
      consumes:
      - application/json
      parameters:
      - description: Daemon name
        in: path
        name: daemon
        required: true
        type: string
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: Namespace ID
        in: query
        name: namespace_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.DaemonLogItem'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      summary: Get logs
      tags:
      - Daemon
  /namespaces/:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: search namespace with name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.NamespaceItem'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: List namespace
      tags:
      - Namespace
    post:
      consumes:
      - application/json
      parameters:
      - description: Namespace object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PostNamespaceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.PostNamespaceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Create namespace
      tags:
      - Namespace
  /namespaces/{id}:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Delete namespace
      tags:
      - Namespace
    get:
      consumes:
      - application/json
      parameters:
      - description: Namespace ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.NamespaceItem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Get namespace
      tags:
      - Namespace
    put:
      consumes:
      - application/json
      parameters:
      - description: Namespace object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PutNamespaceRequestSwagger'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BasicAuth: []
      summary: Update namespace
      tags:
      - Namespace
  /namespaces/{namespace}/repositories/:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: search repository with name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.RepositoryItem'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: List repository
      tags:
      - Repository
    post:
      consumes:
      - application/json
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Repository object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PostRepositoryRequestSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.PostRepositoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Create repository
      tags:
      - Repository
  /namespaces/{namespace}/repositories/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: Repository ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Delete repository
      tags:
      - Repository
    get:
      consumes:
      - application/json
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: Repository ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.RepositoryItem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Get repository
      tags:
      - Repository
    put:
      consumes:
      - application/json
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Repository id
        in: path
        name: id
        required: true
        type: string
      - description: Repository object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PutRepositoryRequestSwagger'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Update repository
      tags:
      - Repository
  /namespaces/{namespace}/tags/:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: repository
        in: query
        name: repository
        type: string
      - description: search tag with name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.TagItem'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: List tag
      tags:
      - Tag
  /namespaces/{namespace}/tags/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      - description: repository
        in: query
        name: repository
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Delete tag
      tags:
      - Tag
    get:
      consumes:
      - application/json
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      - description: repository
        in: query
        name: repository
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TagItem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Get tag
      tags:
      - Tag
  /namespaces/hot:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.NamespaceItem'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Hot namespace
      tags:
      - Namespace
  /systems/endpoint:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetEndpointResponse'
      summary: Get endpoint
      tags:
      - System
  /tokens:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PostUserTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Generate token
      tags:
      - Token
  /users/:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: Username
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.GetUserItem'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      summary: List users with pagination
      tags:
      - User
  /users/logout:
    post:
      consumes:
      - application/json
      parameters:
      - description: Logout user object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PostUserLogoutRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Logout user
      tags:
      - User
  /validators/reference:
    get:
      consumes:
      - application/json
      parameters:
      - description: Reference
        in: query
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: validate reference
      tags:
      - Validator
  /webhook/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Webhook id
        in: path
        name: id
        required: true
        type: string
      - description: Webhook object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PutWebhookRequestSwagger'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Update a webhook
      tags:
      - Webhook
  /webhooks:
    post:
      consumes:
      - application/json
      parameters:
      - description: create webhook for namespace
        in: query
        name: namespace_id
        type: integer
      - description: Webhook object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/types.PostWebhookRequestSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Create a webhook
      tags:
      - Webhook
  /webhooks/:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      - description: filter by namespace id
        in: query
        name: namespace_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.WebhookItem'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: List webhooks
      tags:
      - Webhook
  /webhooks/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Webhook id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Delete a webhook
      tags:
      - Webhook
    get:
      consumes:
      - application/json
      parameters:
      - description: Webhook id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.GetWebhookResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Get a webhook
      tags:
      - Webhook
  /webhooks/{webhook_id}/logs:
    get:
      consumes:
      - application/json
      parameters:
      - description: Webhook ID
        in: path
        name: webhook_id
        required: true
        type: integer
      - default: 10
        description: limit
        in: query
        maximum: 100
        minimum: 10
        name: limit
        type: integer
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: sort field
        in: query
        name: sort
        type: string
      - description: sort method
        enum:
        - asc
        - desc
        in: query
        name: method
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.WebhookItem'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: List webhook logs
      tags:
      - Webhook
  /webhooks/{webhook_id}/logs/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Webhook id
        in: path
        name: webhook_id
        required: true
        type: integer
      - description: Webhook log id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.CommonList'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.GetWebhookLogResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrCode'
      security:
      - BasicAuth: []
      summary: Get a webhook log
      tags:
      - Webhook
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
