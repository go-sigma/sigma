// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sigma/sigma/pkg/handlers/distribution/clients (interfaces: Clients)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	distribution "github.com/distribution/distribution/v3"
	gomock "go.uber.org/mock/gomock"
	digest "github.com/opencontainers/go-digest"
)

// MockClients is a mock of Clients interface.
type MockClients struct {
	ctrl     *gomock.Controller
	recorder *MockClientsMockRecorder
}

// MockClientsMockRecorder is the mock recorder for MockClients.
type MockClientsMockRecorder struct {
	mock *MockClients
}

// NewMockClients creates a new mock instance.
func NewMockClients(ctrl *gomock.Controller) *MockClients {
	mock := &MockClients{ctrl: ctrl}
	mock.recorder = &MockClientsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClients) EXPECT() *MockClientsMockRecorder {
	return m.recorder
}

// AuthToken mocks base method.
func (m *MockClients) AuthToken() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthToken")
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthToken indicates an expected call of AuthToken.
func (mr *MockClientsMockRecorder) AuthToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthToken", reflect.TypeOf((*MockClients)(nil).AuthToken))
}

// DoRequest mocks base method.
func (m *MockClients) DoRequest(arg0 context.Context, arg1, arg2 string, arg3 http.Header, arg4 ...io.Reader) (int, http.Header, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoRequest", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(http.Header)
	ret2, _ := ret[2].(io.ReadCloser)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// DoRequest indicates an expected call of DoRequest.
func (mr *MockClientsMockRecorder) DoRequest(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequest", reflect.TypeOf((*MockClients)(nil).DoRequest), varargs...)
}

// GetBlob mocks base method.
func (m *MockClients) GetBlob(arg0 context.Context, arg1 string, arg2 digest.Digest) (distribution.Descriptor, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", arg0, arg1, arg2)
	ret0, _ := ret[0].(distribution.Descriptor)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockClientsMockRecorder) GetBlob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockClients)(nil).GetBlob), arg0, arg1, arg2)
}

// GetManifest mocks base method.
func (m *MockClients) GetManifest(arg0 context.Context, arg1, arg2 string) (distribution.Manifest, distribution.Descriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifest", arg0, arg1, arg2)
	ret0, _ := ret[0].(distribution.Manifest)
	ret1, _ := ret[1].(distribution.Descriptor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManifest indicates an expected call of GetManifest.
func (mr *MockClientsMockRecorder) GetManifest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifest", reflect.TypeOf((*MockClients)(nil).GetManifest), arg0, arg1, arg2)
}

// HeadBlob mocks base method.
func (m *MockClients) HeadBlob(arg0 context.Context, arg1 string, arg2 digest.Digest) (distribution.Descriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadBlob", arg0, arg1, arg2)
	ret0, _ := ret[0].(distribution.Descriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBlob indicates an expected call of HeadBlob.
func (mr *MockClientsMockRecorder) HeadBlob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBlob", reflect.TypeOf((*MockClients)(nil).HeadBlob), arg0, arg1, arg2)
}

// HeadManifest mocks base method.
func (m *MockClients) HeadManifest(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadManifest", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadManifest indicates an expected call of HeadManifest.
func (mr *MockClientsMockRecorder) HeadManifest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadManifest", reflect.TypeOf((*MockClients)(nil).HeadManifest), arg0, arg1, arg2)
}

// PutBlob mocks base method.
func (m *MockClients) PutBlob(arg0 context.Context, arg1 string, arg2 digest.Digest, arg3 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlob", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlob indicates an expected call of PutBlob.
func (mr *MockClientsMockRecorder) PutBlob(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlob", reflect.TypeOf((*MockClients)(nil).PutBlob), arg0, arg1, arg2, arg3)
}
