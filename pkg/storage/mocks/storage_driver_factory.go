// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ximager/ximager/pkg/storage (interfaces: StorageDriverFactory)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	storage "github.com/ximager/ximager/pkg/storage"
)

// MockStorageDriverFactory is a mock of StorageDriverFactory interface.
type MockStorageDriverFactory struct {
	ctrl     *gomock.Controller
	recorder *MockStorageDriverFactoryMockRecorder
}

// MockStorageDriverFactoryMockRecorder is the mock recorder for MockStorageDriverFactory.
type MockStorageDriverFactoryMockRecorder struct {
	mock *MockStorageDriverFactory
}

// NewMockStorageDriverFactory creates a new mock instance.
func NewMockStorageDriverFactory(ctrl *gomock.Controller) *MockStorageDriverFactory {
	mock := &MockStorageDriverFactory{ctrl: ctrl}
	mock.recorder = &MockStorageDriverFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageDriverFactory) EXPECT() *MockStorageDriverFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockStorageDriverFactory) New() storage.StorageDriver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(storage.StorageDriver)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockStorageDriverFactoryMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockStorageDriverFactory)(nil).New))
}
