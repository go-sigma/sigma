// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/signing/definition (interfaces: Signing)
//
// Generated by this command:
//
//	mockgen -destination=mocks/signing.go -package=mocks github.com/go-sigma/sigma/pkg/signing/definition Signing
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSigning is a mock of Signing interface.
type MockSigning struct {
	ctrl     *gomock.Controller
	recorder *MockSigningMockRecorder
}

// MockSigningMockRecorder is the mock recorder for MockSigning.
type MockSigningMockRecorder struct {
	mock *MockSigning
}

// NewMockSigning creates a new mock instance.
func NewMockSigning(ctrl *gomock.Controller) *MockSigning {
	mock := &MockSigning{ctrl: ctrl}
	mock.recorder = &MockSigningMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigning) EXPECT() *MockSigningMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockSigning) Sign(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sign indicates an expected call of Sign.
func (mr *MockSigningMockRecorder) Sign(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSigning)(nil).Sign), arg0, arg1, arg2, arg3)
}
