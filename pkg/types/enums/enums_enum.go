// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// ArtifactTypeImage is a ArtifactType of type image.
	ArtifactTypeImage ArtifactType = "image"
	// ArtifactTypeImageIndex is a ArtifactType of type imageIndex.
	ArtifactTypeImageIndex ArtifactType = "imageIndex"
	// ArtifactTypeChart is a ArtifactType of type chart.
	ArtifactTypeChart ArtifactType = "chart"
	// ArtifactTypeCnab is a ArtifactType of type cnab.
	ArtifactTypeCnab ArtifactType = "cnab"
	// ArtifactTypeWasm is a ArtifactType of type wasm.
	ArtifactTypeWasm ArtifactType = "wasm"
	// ArtifactTypeProvenance is a ArtifactType of type provenance.
	ArtifactTypeProvenance ArtifactType = "provenance"
	// ArtifactTypeUnknown is a ArtifactType of type unknown.
	ArtifactTypeUnknown ArtifactType = "unknown"
)

var ErrInvalidArtifactType = errors.New("not a valid ArtifactType")

// String implements the Stringer interface.
func (x ArtifactType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ArtifactType) IsValid() bool {
	_, err := ParseArtifactType(string(x))
	return err == nil
}

var _ArtifactTypeValue = map[string]ArtifactType{
	"image":      ArtifactTypeImage,
	"imageIndex": ArtifactTypeImageIndex,
	"chart":      ArtifactTypeChart,
	"cnab":       ArtifactTypeCnab,
	"wasm":       ArtifactTypeWasm,
	"provenance": ArtifactTypeProvenance,
	"unknown":    ArtifactTypeUnknown,
}

// ParseArtifactType attempts to convert a string to a ArtifactType.
func ParseArtifactType(name string) (ArtifactType, error) {
	if x, ok := _ArtifactTypeValue[name]; ok {
		return x, nil
	}
	return ArtifactType(""), fmt.Errorf("%s is %w", name, ErrInvalidArtifactType)
}

// MustParseArtifactType converts a string to a ArtifactType, and panics if is not valid.
func MustParseArtifactType(name string) ArtifactType {
	val, err := ParseArtifactType(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errArtifactTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *ArtifactType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ArtifactType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseArtifactType(v)
	case []byte:
		*x, err = ParseArtifactType(string(v))
	case ArtifactType:
		*x = v
	case *ArtifactType:
		if v == nil {
			return errArtifactTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errArtifactTypeNilPtr
		}
		*x, err = ParseArtifactType(*v)
	default:
		return errors.New("invalid type for ArtifactType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x ArtifactType) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// AuditActionCreate is a AuditAction of type create.
	AuditActionCreate AuditAction = "create"
	// AuditActionUpdate is a AuditAction of type update.
	AuditActionUpdate AuditAction = "update"
	// AuditActionDelete is a AuditAction of type delete.
	AuditActionDelete AuditAction = "delete"
	// AuditActionPull is a AuditAction of type pull.
	AuditActionPull AuditAction = "pull"
	// AuditActionPush is a AuditAction of type push.
	AuditActionPush AuditAction = "push"
)

var ErrInvalidAuditAction = errors.New("not a valid AuditAction")

// String implements the Stringer interface.
func (x AuditAction) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AuditAction) IsValid() bool {
	_, err := ParseAuditAction(string(x))
	return err == nil
}

var _AuditActionValue = map[string]AuditAction{
	"create": AuditActionCreate,
	"update": AuditActionUpdate,
	"delete": AuditActionDelete,
	"pull":   AuditActionPull,
	"push":   AuditActionPush,
}

// ParseAuditAction attempts to convert a string to a AuditAction.
func ParseAuditAction(name string) (AuditAction, error) {
	if x, ok := _AuditActionValue[name]; ok {
		return x, nil
	}
	return AuditAction(""), fmt.Errorf("%s is %w", name, ErrInvalidAuditAction)
}

// MustParseAuditAction converts a string to a AuditAction, and panics if is not valid.
func MustParseAuditAction(name string) AuditAction {
	val, err := ParseAuditAction(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errAuditActionNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *AuditAction) Scan(value interface{}) (err error) {
	if value == nil {
		*x = AuditAction("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseAuditAction(v)
	case []byte:
		*x, err = ParseAuditAction(string(v))
	case AuditAction:
		*x = v
	case *AuditAction:
		if v == nil {
			return errAuditActionNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errAuditActionNilPtr
		}
		*x, err = ParseAuditAction(*v)
	default:
		return errors.New("invalid type for AuditAction")
	}

	return
}

// Value implements the driver Valuer interface.
func (x AuditAction) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// AuditResourceTypeNamespace is a AuditResourceType of type namespace.
	AuditResourceTypeNamespace AuditResourceType = "namespace"
	// AuditResourceTypeRepository is a AuditResourceType of type repository.
	AuditResourceTypeRepository AuditResourceType = "repository"
	// AuditResourceTypeTag is a AuditResourceType of type tag.
	AuditResourceTypeTag AuditResourceType = "tag"
)

var ErrInvalidAuditResourceType = errors.New("not a valid AuditResourceType")

// String implements the Stringer interface.
func (x AuditResourceType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AuditResourceType) IsValid() bool {
	_, err := ParseAuditResourceType(string(x))
	return err == nil
}

var _AuditResourceTypeValue = map[string]AuditResourceType{
	"namespace":  AuditResourceTypeNamespace,
	"repository": AuditResourceTypeRepository,
	"tag":        AuditResourceTypeTag,
}

// ParseAuditResourceType attempts to convert a string to a AuditResourceType.
func ParseAuditResourceType(name string) (AuditResourceType, error) {
	if x, ok := _AuditResourceTypeValue[name]; ok {
		return x, nil
	}
	return AuditResourceType(""), fmt.Errorf("%s is %w", name, ErrInvalidAuditResourceType)
}

// MustParseAuditResourceType converts a string to a AuditResourceType, and panics if is not valid.
func MustParseAuditResourceType(name string) AuditResourceType {
	val, err := ParseAuditResourceType(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errAuditResourceTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *AuditResourceType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = AuditResourceType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseAuditResourceType(v)
	case []byte:
		*x, err = ParseAuditResourceType(string(v))
	case AuditResourceType:
		*x = v
	case *AuditResourceType:
		if v == nil {
			return errAuditResourceTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errAuditResourceTypeNilPtr
		}
		*x, err = ParseAuditResourceType(*v)
	default:
		return errors.New("invalid type for AuditResourceType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x AuditResourceType) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// CacheTypeMemory is a CacheType of type memory.
	CacheTypeMemory CacheType = "memory"
	// CacheTypeRedis is a CacheType of type redis.
	CacheTypeRedis CacheType = "redis"
)

var ErrInvalidCacheType = errors.New("not a valid CacheType")

// String implements the Stringer interface.
func (x CacheType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CacheType) IsValid() bool {
	_, err := ParseCacheType(string(x))
	return err == nil
}

var _CacheTypeValue = map[string]CacheType{
	"memory": CacheTypeMemory,
	"redis":  CacheTypeRedis,
}

// ParseCacheType attempts to convert a string to a CacheType.
func ParseCacheType(name string) (CacheType, error) {
	if x, ok := _CacheTypeValue[name]; ok {
		return x, nil
	}
	return CacheType(""), fmt.Errorf("%s is %w", name, ErrInvalidCacheType)
}

// MustParseCacheType converts a string to a CacheType, and panics if is not valid.
func MustParseCacheType(name string) CacheType {
	val, err := ParseCacheType(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errCacheTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *CacheType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = CacheType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseCacheType(v)
	case []byte:
		*x, err = ParseCacheType(string(v))
	case CacheType:
		*x = v
	case *CacheType:
		if v == nil {
			return errCacheTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errCacheTypeNilPtr
		}
		*x, err = ParseCacheType(*v)
	default:
		return errors.New("invalid type for CacheType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x CacheType) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// DaemonVulnerability is a Daemon of type Vulnerability.
	DaemonVulnerability Daemon = "Vulnerability"
	// DaemonSbom is a Daemon of type Sbom.
	DaemonSbom Daemon = "Sbom"
	// DaemonProxyArtifact is a Daemon of type ProxyArtifact.
	DaemonProxyArtifact Daemon = "ProxyArtifact"
	// DaemonProxyTag is a Daemon of type ProxyTag.
	DaemonProxyTag Daemon = "ProxyTag"
	// DaemonGc is a Daemon of type Gc.
	DaemonGc Daemon = "Gc"
)

var ErrInvalidDaemon = errors.New("not a valid Daemon")

// String implements the Stringer interface.
func (x Daemon) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Daemon) IsValid() bool {
	_, err := ParseDaemon(string(x))
	return err == nil
}

var _DaemonValue = map[string]Daemon{
	"Vulnerability": DaemonVulnerability,
	"Sbom":          DaemonSbom,
	"ProxyArtifact": DaemonProxyArtifact,
	"ProxyTag":      DaemonProxyTag,
	"Gc":            DaemonGc,
}

// ParseDaemon attempts to convert a string to a Daemon.
func ParseDaemon(name string) (Daemon, error) {
	if x, ok := _DaemonValue[name]; ok {
		return x, nil
	}
	return Daemon(""), fmt.Errorf("%s is %w", name, ErrInvalidDaemon)
}

// MustParseDaemon converts a string to a Daemon, and panics if is not valid.
func MustParseDaemon(name string) Daemon {
	val, err := ParseDaemon(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errDaemonNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Daemon) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Daemon("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseDaemon(v)
	case []byte:
		*x, err = ParseDaemon(string(v))
	case Daemon:
		*x = v
	case *Daemon:
		if v == nil {
			return errDaemonNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errDaemonNilPtr
		}
		*x, err = ParseDaemon(*v)
	default:
		return errors.New("invalid type for Daemon")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Daemon) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// DatabasePostgresql is a Database of type postgresql.
	DatabasePostgresql Database = "postgresql"
	// DatabaseMysql is a Database of type mysql.
	DatabaseMysql Database = "mysql"
	// DatabaseSqlite3 is a Database of type sqlite3.
	DatabaseSqlite3 Database = "sqlite3"
)

var ErrInvalidDatabase = errors.New("not a valid Database")

// String implements the Stringer interface.
func (x Database) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Database) IsValid() bool {
	_, err := ParseDatabase(string(x))
	return err == nil
}

var _DatabaseValue = map[string]Database{
	"postgresql": DatabasePostgresql,
	"mysql":      DatabaseMysql,
	"sqlite3":    DatabaseSqlite3,
}

// ParseDatabase attempts to convert a string to a Database.
func ParseDatabase(name string) (Database, error) {
	if x, ok := _DatabaseValue[name]; ok {
		return x, nil
	}
	return Database(""), fmt.Errorf("%s is %w", name, ErrInvalidDatabase)
}

// MustParseDatabase converts a string to a Database, and panics if is not valid.
func MustParseDatabase(name string) Database {
	val, err := ParseDatabase(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errDatabaseNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Database) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Database("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseDatabase(v)
	case []byte:
		*x, err = ParseDatabase(string(v))
	case Database:
		*x = v
	case *Database:
		if v == nil {
			return errDatabaseNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errDatabaseNilPtr
		}
		*x, err = ParseDatabase(*v)
	default:
		return errors.New("invalid type for Database")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Database) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// DeploySingle is a Deploy of type single.
	DeploySingle Deploy = "single"
	// DeployReplica is a Deploy of type replica.
	DeployReplica Deploy = "replica"
)

var ErrInvalidDeploy = errors.New("not a valid Deploy")

// String implements the Stringer interface.
func (x Deploy) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Deploy) IsValid() bool {
	_, err := ParseDeploy(string(x))
	return err == nil
}

var _DeployValue = map[string]Deploy{
	"single":  DeploySingle,
	"replica": DeployReplica,
}

// ParseDeploy attempts to convert a string to a Deploy.
func ParseDeploy(name string) (Deploy, error) {
	if x, ok := _DeployValue[name]; ok {
		return x, nil
	}
	return Deploy(""), fmt.Errorf("%s is %w", name, ErrInvalidDeploy)
}

// MustParseDeploy converts a string to a Deploy, and panics if is not valid.
func MustParseDeploy(name string) Deploy {
	val, err := ParseDeploy(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errDeployNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Deploy) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Deploy("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseDeploy(v)
	case []byte:
		*x, err = ParseDeploy(string(v))
	case Deploy:
		*x = v
	case *Deploy:
		if v == nil {
			return errDeployNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errDeployNilPtr
		}
		*x, err = ParseDeploy(*v)
	default:
		return errors.New("invalid type for Deploy")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Deploy) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// GcTargetBlobsAndArtifacts is a GcTarget of type blobsAndArtifacts.
	GcTargetBlobsAndArtifacts GcTarget = "blobsAndArtifacts"
	// GcTargetArtifacts is a GcTarget of type artifacts.
	GcTargetArtifacts GcTarget = "artifacts"
)

var ErrInvalidGcTarget = errors.New("not a valid GcTarget")

// String implements the Stringer interface.
func (x GcTarget) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x GcTarget) IsValid() bool {
	_, err := ParseGcTarget(string(x))
	return err == nil
}

var _GcTargetValue = map[string]GcTarget{
	"blobsAndArtifacts": GcTargetBlobsAndArtifacts,
	"artifacts":         GcTargetArtifacts,
}

// ParseGcTarget attempts to convert a string to a GcTarget.
func ParseGcTarget(name string) (GcTarget, error) {
	if x, ok := _GcTargetValue[name]; ok {
		return x, nil
	}
	return GcTarget(""), fmt.Errorf("%s is %w", name, ErrInvalidGcTarget)
}

// MustParseGcTarget converts a string to a GcTarget, and panics if is not valid.
func MustParseGcTarget(name string) GcTarget {
	val, err := ParseGcTarget(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errGcTargetNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *GcTarget) Scan(value interface{}) (err error) {
	if value == nil {
		*x = GcTarget("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseGcTarget(v)
	case []byte:
		*x, err = ParseGcTarget(string(v))
	case GcTarget:
		*x = v
	case *GcTarget:
		if v == nil {
			return errGcTargetNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errGcTargetNilPtr
		}
		*x, err = ParseGcTarget(*v)
	default:
		return errors.New("invalid type for GcTarget")
	}

	return
}

// Value implements the driver Valuer interface.
func (x GcTarget) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// LogLevelTrace is a LogLevel of type trace.
	LogLevelTrace LogLevel = "trace"
	// LogLevelDebug is a LogLevel of type debug.
	LogLevelDebug LogLevel = "debug"
	// LogLevelInfo is a LogLevel of type info.
	LogLevelInfo LogLevel = "info"
	// LogLevelWarn is a LogLevel of type warn.
	LogLevelWarn LogLevel = "warn"
	// LogLevelError is a LogLevel of type error.
	LogLevelError LogLevel = "error"
	// LogLevelFatal is a LogLevel of type fatal.
	LogLevelFatal LogLevel = "fatal"
	// LogLevelPanic is a LogLevel of type panic.
	LogLevelPanic LogLevel = "panic"
)

var ErrInvalidLogLevel = errors.New("not a valid LogLevel")

// String implements the Stringer interface.
func (x LogLevel) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LogLevel) IsValid() bool {
	_, err := ParseLogLevel(string(x))
	return err == nil
}

var _LogLevelValue = map[string]LogLevel{
	"trace": LogLevelTrace,
	"debug": LogLevelDebug,
	"info":  LogLevelInfo,
	"warn":  LogLevelWarn,
	"error": LogLevelError,
	"fatal": LogLevelFatal,
	"panic": LogLevelPanic,
}

// ParseLogLevel attempts to convert a string to a LogLevel.
func ParseLogLevel(name string) (LogLevel, error) {
	if x, ok := _LogLevelValue[name]; ok {
		return x, nil
	}
	return LogLevel(""), fmt.Errorf("%s is %w", name, ErrInvalidLogLevel)
}

// MustParseLogLevel converts a string to a LogLevel, and panics if is not valid.
func MustParseLogLevel(name string) LogLevel {
	val, err := ParseLogLevel(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errLogLevelNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *LogLevel) Scan(value interface{}) (err error) {
	if value == nil {
		*x = LogLevel("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseLogLevel(v)
	case []byte:
		*x, err = ParseLogLevel(string(v))
	case LogLevel:
		*x = v
	case *LogLevel:
		if v == nil {
			return errLogLevelNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errLogLevelNilPtr
		}
		*x, err = ParseLogLevel(*v)
	default:
		return errors.New("invalid type for LogLevel")
	}

	return
}

// Value implements the driver Valuer interface.
func (x LogLevel) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// ProviderLocal is a Provider of type local.
	ProviderLocal Provider = "local"
	// ProviderGithub is a Provider of type github.
	ProviderGithub Provider = "github"
)

var ErrInvalidProvider = errors.New("not a valid Provider")

// String implements the Stringer interface.
func (x Provider) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Provider) IsValid() bool {
	_, err := ParseProvider(string(x))
	return err == nil
}

var _ProviderValue = map[string]Provider{
	"local":  ProviderLocal,
	"github": ProviderGithub,
}

// ParseProvider attempts to convert a string to a Provider.
func ParseProvider(name string) (Provider, error) {
	if x, ok := _ProviderValue[name]; ok {
		return x, nil
	}
	return Provider(""), fmt.Errorf("%s is %w", name, ErrInvalidProvider)
}

// MustParseProvider converts a string to a Provider, and panics if is not valid.
func MustParseProvider(name string) Provider {
	val, err := ParseProvider(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errProviderNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Provider) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Provider("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseProvider(v)
	case []byte:
		*x, err = ParseProvider(string(v))
	case Provider:
		*x = v
	case *Provider:
		if v == nil {
			return errProviderNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errProviderNilPtr
		}
		*x, err = ParseProvider(*v)
	default:
		return errors.New("invalid type for Provider")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Provider) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// RedisTypeInternal is a RedisType of type internal.
	RedisTypeInternal RedisType = "internal"
	// RedisTypeExternal is a RedisType of type external.
	RedisTypeExternal RedisType = "external"
)

var ErrInvalidRedisType = errors.New("not a valid RedisType")

// String implements the Stringer interface.
func (x RedisType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RedisType) IsValid() bool {
	_, err := ParseRedisType(string(x))
	return err == nil
}

var _RedisTypeValue = map[string]RedisType{
	"internal": RedisTypeInternal,
	"external": RedisTypeExternal,
}

// ParseRedisType attempts to convert a string to a RedisType.
func ParseRedisType(name string) (RedisType, error) {
	if x, ok := _RedisTypeValue[name]; ok {
		return x, nil
	}
	return RedisType(""), fmt.Errorf("%s is %w", name, ErrInvalidRedisType)
}

// MustParseRedisType converts a string to a RedisType, and panics if is not valid.
func MustParseRedisType(name string) RedisType {
	val, err := ParseRedisType(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errRedisTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *RedisType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = RedisType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseRedisType(v)
	case []byte:
		*x, err = ParseRedisType(string(v))
	case RedisType:
		*x = v
	case *RedisType:
		if v == nil {
			return errRedisTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errRedisTypeNilPtr
		}
		*x, err = ParseRedisType(*v)
	default:
		return errors.New("invalid type for RedisType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x RedisType) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// SortMethodAsc is a SortMethod of type asc.
	SortMethodAsc SortMethod = "asc"
	// SortMethodDesc is a SortMethod of type desc.
	SortMethodDesc SortMethod = "desc"
)

var ErrInvalidSortMethod = errors.New("not a valid SortMethod")

// String implements the Stringer interface.
func (x SortMethod) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SortMethod) IsValid() bool {
	_, err := ParseSortMethod(string(x))
	return err == nil
}

var _SortMethodValue = map[string]SortMethod{
	"asc":  SortMethodAsc,
	"desc": SortMethodDesc,
}

// ParseSortMethod attempts to convert a string to a SortMethod.
func ParseSortMethod(name string) (SortMethod, error) {
	if x, ok := _SortMethodValue[name]; ok {
		return x, nil
	}
	return SortMethod(""), fmt.Errorf("%s is %w", name, ErrInvalidSortMethod)
}

// MustParseSortMethod converts a string to a SortMethod, and panics if is not valid.
func MustParseSortMethod(name string) SortMethod {
	val, err := ParseSortMethod(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errSortMethodNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *SortMethod) Scan(value interface{}) (err error) {
	if value == nil {
		*x = SortMethod("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseSortMethod(v)
	case []byte:
		*x, err = ParseSortMethod(string(v))
	case SortMethod:
		*x = v
	case *SortMethod:
		if v == nil {
			return errSortMethodNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errSortMethodNilPtr
		}
		*x, err = ParseSortMethod(*v)
	default:
		return errors.New("invalid type for SortMethod")
	}

	return
}

// Value implements the driver Valuer interface.
func (x SortMethod) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// TaskCommonStatusPending is a TaskCommonStatus of type Pending.
	TaskCommonStatusPending TaskCommonStatus = "Pending"
	// TaskCommonStatusDoing is a TaskCommonStatus of type Doing.
	TaskCommonStatusDoing TaskCommonStatus = "Doing"
	// TaskCommonStatusSuccess is a TaskCommonStatus of type Success.
	TaskCommonStatusSuccess TaskCommonStatus = "Success"
	// TaskCommonStatusFailed is a TaskCommonStatus of type Failed.
	TaskCommonStatusFailed TaskCommonStatus = "Failed"
)

var ErrInvalidTaskCommonStatus = errors.New("not a valid TaskCommonStatus")

// String implements the Stringer interface.
func (x TaskCommonStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TaskCommonStatus) IsValid() bool {
	_, err := ParseTaskCommonStatus(string(x))
	return err == nil
}

var _TaskCommonStatusValue = map[string]TaskCommonStatus{
	"Pending": TaskCommonStatusPending,
	"Doing":   TaskCommonStatusDoing,
	"Success": TaskCommonStatusSuccess,
	"Failed":  TaskCommonStatusFailed,
}

// ParseTaskCommonStatus attempts to convert a string to a TaskCommonStatus.
func ParseTaskCommonStatus(name string) (TaskCommonStatus, error) {
	if x, ok := _TaskCommonStatusValue[name]; ok {
		return x, nil
	}
	return TaskCommonStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidTaskCommonStatus)
}

// MustParseTaskCommonStatus converts a string to a TaskCommonStatus, and panics if is not valid.
func MustParseTaskCommonStatus(name string) TaskCommonStatus {
	val, err := ParseTaskCommonStatus(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errTaskCommonStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *TaskCommonStatus) Scan(value interface{}) (err error) {
	if value == nil {
		*x = TaskCommonStatus("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseTaskCommonStatus(v)
	case []byte:
		*x, err = ParseTaskCommonStatus(string(v))
	case TaskCommonStatus:
		*x = v
	case *TaskCommonStatus:
		if v == nil {
			return errTaskCommonStatusNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errTaskCommonStatusNilPtr
		}
		*x, err = ParseTaskCommonStatus(*v)
	default:
		return errors.New("invalid type for TaskCommonStatus")
	}

	return
}

// Value implements the driver Valuer interface.
func (x TaskCommonStatus) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// VisibilityPrivate is a Visibility of type private.
	VisibilityPrivate Visibility = "private"
	// VisibilityPublic is a Visibility of type public.
	VisibilityPublic Visibility = "public"
)

var ErrInvalidVisibility = errors.New("not a valid Visibility")

// String implements the Stringer interface.
func (x Visibility) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Visibility) IsValid() bool {
	_, err := ParseVisibility(string(x))
	return err == nil
}

var _VisibilityValue = map[string]Visibility{
	"private": VisibilityPrivate,
	"public":  VisibilityPublic,
}

// ParseVisibility attempts to convert a string to a Visibility.
func ParseVisibility(name string) (Visibility, error) {
	if x, ok := _VisibilityValue[name]; ok {
		return x, nil
	}
	return Visibility(""), fmt.Errorf("%s is %w", name, ErrInvalidVisibility)
}

// MustParseVisibility converts a string to a Visibility, and panics if is not valid.
func MustParseVisibility(name string) Visibility {
	val, err := ParseVisibility(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errVisibilityNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Visibility) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Visibility("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseVisibility(v)
	case []byte:
		*x, err = ParseVisibility(string(v))
	case Visibility:
		*x = v
	case *Visibility:
		if v == nil {
			return errVisibilityNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errVisibilityNilPtr
		}
		*x, err = ParseVisibility(*v)
	default:
		return errors.New("invalid type for Visibility")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Visibility) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// WorkQueueTypeRedis is a WorkQueueType of type redis.
	WorkQueueTypeRedis WorkQueueType = "redis"
)

var ErrInvalidWorkQueueType = errors.New("not a valid WorkQueueType")

// String implements the Stringer interface.
func (x WorkQueueType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x WorkQueueType) IsValid() bool {
	_, err := ParseWorkQueueType(string(x))
	return err == nil
}

var _WorkQueueTypeValue = map[string]WorkQueueType{
	"redis": WorkQueueTypeRedis,
}

// ParseWorkQueueType attempts to convert a string to a WorkQueueType.
func ParseWorkQueueType(name string) (WorkQueueType, error) {
	if x, ok := _WorkQueueTypeValue[name]; ok {
		return x, nil
	}
	return WorkQueueType(""), fmt.Errorf("%s is %w", name, ErrInvalidWorkQueueType)
}

// MustParseWorkQueueType converts a string to a WorkQueueType, and panics if is not valid.
func MustParseWorkQueueType(name string) WorkQueueType {
	val, err := ParseWorkQueueType(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errWorkQueueTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *WorkQueueType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = WorkQueueType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseWorkQueueType(v)
	case []byte:
		*x, err = ParseWorkQueueType(string(v))
	case WorkQueueType:
		*x = v
	case *WorkQueueType:
		if v == nil {
			return errWorkQueueTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errWorkQueueTypeNilPtr
		}
		*x, err = ParseWorkQueueType(*v)
	default:
		return errors.New("invalid type for WorkQueueType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x WorkQueueType) Value() (driver.Value, error) {
	return x.String(), nil
}
