// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// DaemonVulnerability is a Daemon of type Vulnerability.
	DaemonVulnerability Daemon = "Vulnerability"
	// DaemonSbom is a Daemon of type Sbom.
	DaemonSbom Daemon = "Sbom"
	// DaemonProxyArtifact is a Daemon of type ProxyArtifact.
	DaemonProxyArtifact Daemon = "ProxyArtifact"
	// DaemonProxyTag is a Daemon of type ProxyTag.
	DaemonProxyTag Daemon = "ProxyTag"
	// DaemonGc is a Daemon of type Gc.
	DaemonGc Daemon = "Gc"
)

var ErrInvalidDaemon = errors.New("not a valid Daemon")

// String implements the Stringer interface.
func (x Daemon) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Daemon) IsValid() bool {
	_, err := ParseDaemon(string(x))
	return err == nil
}

var _DaemonValue = map[string]Daemon{
	"Vulnerability": DaemonVulnerability,
	"Sbom":          DaemonSbom,
	"ProxyArtifact": DaemonProxyArtifact,
	"ProxyTag":      DaemonProxyTag,
	"Gc":            DaemonGc,
}

// ParseDaemon attempts to convert a string to a Daemon.
func ParseDaemon(name string) (Daemon, error) {
	if x, ok := _DaemonValue[name]; ok {
		return x, nil
	}
	return Daemon(""), fmt.Errorf("%s is %w", name, ErrInvalidDaemon)
}

// MustParseDaemon converts a string to a Daemon, and panics if is not valid.
func MustParseDaemon(name string) Daemon {
	val, err := ParseDaemon(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errDaemonNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Daemon) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Daemon("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseDaemon(v)
	case []byte:
		*x, err = ParseDaemon(string(v))
	case Daemon:
		*x = v
	case *Daemon:
		if v == nil {
			return errDaemonNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errDaemonNilPtr
		}
		*x, err = ParseDaemon(*v)
	default:
		return errors.New("invalid type for Daemon")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Daemon) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// DatabasePostgresql is a Database of type postgresql.
	DatabasePostgresql Database = "postgresql"
	// DatabaseMysql is a Database of type mysql.
	DatabaseMysql Database = "mysql"
	// DatabaseSqlite3 is a Database of type sqlite3.
	DatabaseSqlite3 Database = "sqlite3"
)

var ErrInvalidDatabase = errors.New("not a valid Database")

// String implements the Stringer interface.
func (x Database) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Database) IsValid() bool {
	_, err := ParseDatabase(string(x))
	return err == nil
}

var _DatabaseValue = map[string]Database{
	"postgresql": DatabasePostgresql,
	"mysql":      DatabaseMysql,
	"sqlite3":    DatabaseSqlite3,
}

// ParseDatabase attempts to convert a string to a Database.
func ParseDatabase(name string) (Database, error) {
	if x, ok := _DatabaseValue[name]; ok {
		return x, nil
	}
	return Database(""), fmt.Errorf("%s is %w", name, ErrInvalidDatabase)
}

// MustParseDatabase converts a string to a Database, and panics if is not valid.
func MustParseDatabase(name string) Database {
	val, err := ParseDatabase(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errDatabaseNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Database) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Database("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseDatabase(v)
	case []byte:
		*x, err = ParseDatabase(string(v))
	case Database:
		*x = v
	case *Database:
		if v == nil {
			return errDatabaseNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errDatabaseNilPtr
		}
		*x, err = ParseDatabase(*v)
	default:
		return errors.New("invalid type for Database")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Database) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// TaskCommonStatusPending is a TaskCommonStatus of type Pending.
	TaskCommonStatusPending TaskCommonStatus = "Pending"
	// TaskCommonStatusDoing is a TaskCommonStatus of type Doing.
	TaskCommonStatusDoing TaskCommonStatus = "Doing"
	// TaskCommonStatusSuccess is a TaskCommonStatus of type Success.
	TaskCommonStatusSuccess TaskCommonStatus = "Success"
	// TaskCommonStatusFailed is a TaskCommonStatus of type Failed.
	TaskCommonStatusFailed TaskCommonStatus = "Failed"
)

var ErrInvalidTaskCommonStatus = errors.New("not a valid TaskCommonStatus")

// String implements the Stringer interface.
func (x TaskCommonStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TaskCommonStatus) IsValid() bool {
	_, err := ParseTaskCommonStatus(string(x))
	return err == nil
}

var _TaskCommonStatusValue = map[string]TaskCommonStatus{
	"Pending": TaskCommonStatusPending,
	"Doing":   TaskCommonStatusDoing,
	"Success": TaskCommonStatusSuccess,
	"Failed":  TaskCommonStatusFailed,
}

// ParseTaskCommonStatus attempts to convert a string to a TaskCommonStatus.
func ParseTaskCommonStatus(name string) (TaskCommonStatus, error) {
	if x, ok := _TaskCommonStatusValue[name]; ok {
		return x, nil
	}
	return TaskCommonStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidTaskCommonStatus)
}

// MustParseTaskCommonStatus converts a string to a TaskCommonStatus, and panics if is not valid.
func MustParseTaskCommonStatus(name string) TaskCommonStatus {
	val, err := ParseTaskCommonStatus(name)
	if err != nil {
		panic(err)
	}
	return val
}

var errTaskCommonStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *TaskCommonStatus) Scan(value interface{}) (err error) {
	if value == nil {
		*x = TaskCommonStatus("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseTaskCommonStatus(v)
	case []byte:
		*x, err = ParseTaskCommonStatus(string(v))
	case TaskCommonStatus:
		*x = v
	case *TaskCommonStatus:
		if v == nil {
			return errTaskCommonStatusNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errTaskCommonStatusNilPtr
		}
		*x, err = ParseTaskCommonStatus(*v)
	default:
		return errors.New("invalid type for TaskCommonStatus")
	}

	return
}

// Value implements the driver Valuer interface.
func (x TaskCommonStatus) Value() (driver.Value, error) {
	return x.String(), nil
}
