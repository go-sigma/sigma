replicaCount: 1

image:
  repository: ghcr.io/go-sigma/sigma
  pullPolicy: IfNotPresent
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  server:
    port: 3000
  worker:
    port: 3001
  distribution:
    port: 3002

ingress:
  enabled: true
  className: nginx
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: "example.local"
      paths:
        - path: /server
          pathType: Prefix
          svcName: server
          svcPort: 3000
        - path: /worker
          pathType: Prefix
          svcName: server
          svcPort: 3001
        - path: /distribution
          pathType: Prefix
          svcName: server
          svcPort: 3000

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

config:
  log:
    level: debug
  database:
    # The database type to use. Supported types are: sqlite3, mysql, postgresql    # The database type to use. Supported types are: sqlite3, mysql, postgresqll
    type: ""
    # sqlite3, mysql, postgresql
    sqlite3:  {}
      #path: sigma.db
    mysql:  {}
      #host: localhost
      #port: 3306
      #user: sigma
      #password: sigma
      #dbname: sigma
    postgresql: {}
      #host: localhost
      #port: 5432
      #user: sigma
      #password: sigma
      #dbname: sigma
      #sslmode: disable
  redis:
    url: ""
    #ex: redis://:sigma@localhost:6789/0
  http:
    server: 0.0.0.0:3000
    worker: 0.0.0.0:3001
  storage:
    rootdirectory: ./storage
    type: s3
    filesystem:
      path: /
    s3: {}
      #ak: sigma
      #sk: sigma-sigma
      #endpoint: http://127.0.0.1:32000
      #region: cn-north-1
      #bucket: sigma
      #forcePathStyle: true
  # Notice: the tag never update after the first pulled from remote registry, unless you delete the image and pull again.
  proxy:
    enabled: true
    endpoint: https://registry-1.docker.io
    tlsVerify: true
    username: ""
    password: ""
  auth:
    user:
      password: ""
    internalUser:
      username: internal-sigma
      password: internal-sigma
    admin:
      username: sigma
      password: sigma
    token:
      realm: ""
      service: ""
    jwt:
      ttl: 1h
      refreshTtl: 24h
      privateKey: ""

external:
  redis: {}
  minio:
    ak: sigma
    sk: sigma
    endpoint: http://127.0.0.1:32000
    region: cn-north-1
    bucket: sigma
    pathStyle: true
  mysql:
    host: localhost
    port: 3306
    user: root
    password: password
    database: sigma

redis:
  enabled: true
  auth:
    enabled: true
    password: "sigma"
  master:
    service:
      type: ClusterIP
      ports:
        redis: 6379
  replica:
    replicaCount: 1
minio:
  enabled: true
  replicas: 4
  resources: {}
  mode: distributed
  statefulset:
    replicaCount: 4
    drivesPerNode: 4
  auth:
    rootUser: root-sigma
    rootPassword: root-sigma
  service:
    type: ClusterIP
    ports:
      api: 9000
      console: 9001
  provisioning:
    enabled: true
    resources: {}
    buckets:
      - name: sigma
        region: cn-north-1
        withLock: false
    cleanupAfterFinished:
      enabled: true
      seconds: 600
mysql:
  enabled: true
  auth:
    rootPassword: "sigma"
    createDatabase: true
    database: "sigma"
    username: "sigma"
    password: "sigma"
  primary:
    service:
      type: ClusterIP
      ports:
        mysql: 3306
nginx-ingress-controller:
  enabled: true
  service:
    type: ClusterIP
  defaultBackend:
    enabled: false
