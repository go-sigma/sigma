## @param commonLabels Labels to add to all deployed objects
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}

image:
  registry: ghcr.io
  ## main image contain all of the sigma logic
  repository: go-sigma/sigma
  tag: latest
  ## trivy image contain the trivy db from https://github.com/aquasecurity/trivy-db and https://github.com/aquasecurity/trivy-java-db
  trivy:
    repository: go-sigma/sigma-trivy
    tag: latest
  ## web image contain a static server nginx serve for fontend files
  web:
    repository: go-sigma/sigma-web
    tag: latest
  ## busybox image used in init-container
  busybox:
    repository: busybox
    tag: 1.36.1-musl
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  server:
    port: 3000
  worker:
    port: 3001
  distribution:
    port: 3002
  web:
    port: 80

ingress:
  enabled: true
  className: nginx
  annotations: {}
  hosts:
    - host: "test.sigma.io"
      paths:
        - name: server
          path: /api/v1/
          pathType: Prefix
          port: 3000
        - name: server
          path: /swagger/
          pathType: Prefix
          port: 3000
        - name: distribution
          path: /v2/
          pathType: Prefix
          port: 3002
        - name: web
          path: /
          pathType: Prefix
          port: 80

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  replicaCount:
    server: 2
    web: 2
    distribution: 2
    worker: 2
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  ## @param serviceAccount.annotations Additional Service Account annotations (evaluated as a template)
  annotations: {}
  ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
  automountServiceAccountToken: true

config:
  log:
    level: debug
  database:
    # The database type to use. Supported types are: sqlite3, mysql, postgresql
    type: ""
    # sqlite3, mysql, postgresql
    sqlite3:  {}
  redis:
    url: ""
    #ex: redis://:sigma@localhost:6789/0
  http:
    server: 0.0.0.0:3000
    worker: 0.0.0.0:3001
  storage:
    rootdirectory: ./storage
    type: s3
    filesystem:
      path: /
  daemon:
    builder:
      enabled: true
      image:
        ## @param config.daemon.builder.image.push enable the job that push builder image
        push: true
        repository: tosone/sigma-builder
        tag: latest
      type: kubernetes
      kubernetes:
        kubeconfig: ""
        namespace: sigma-builder
  proxy:
    enabled: true
    endpoint: https://registry-1.docker.io
    tlsVerify: true
    username: ""
    password: ""
  auth:
    user:
      password: ""
    internalUser:
      username: internal-sigma
      password: internal-sigma
    admin:
      username: sigma
      password: sigma
    token:
      realm: ""
      service: ""
    jwt:
      ttl: 1h
      refreshTtl: 24h
      privateKey: ""

external:
  redis: {}
  minio:
    ak: sigma
    sk: sigma
    endpoint: http://127.0.0.1:32000
    region: cn-north-1
    bucket: sigma
    pathStyle: true
  mysql:
    host: localhost
    port: 3306
    user: root
    password: password
    database: sigma

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    password: "sigma"
  master:
    service:
      type: ClusterIP
      ports:
        redis: 6379
  replica:
    replicaCount: 1
minio:
  enabled: true
  replicas: 4
  resources: {}
  mode: distributed
  statefulset:
    replicaCount: 4
    drivesPerNode: 4
  auth:
    rootUser: root-sigma
    rootPassword: root-sigma
  service:
    type: ClusterIP
    ports:
      api: 9000
      console: 9001
  provisioning:
    enabled: true
    resources: {}
    buckets:
      - name: sigma
        region: cn-north-1
        withLock: false
    cleanupAfterFinished:
      enabled: true
      seconds: 600
mysql:
  enabled: true
  architecture: standalone
  auth:
    rootPassword: "sigma"
    createDatabase: true
    database: "sigma"
    username: "sigma"
    password: "sigma"
  primary:
    service:
      type: ClusterIP
      ports:
        mysql: 3306
nginx-ingress-controller:
  enabled: true
  service:
    type: ClusterIP
  defaultBackend:
    enabled: false
