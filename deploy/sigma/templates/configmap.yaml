apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ printf "%s-config" .Chart.Name }}"
  namespace: "{{ .Release.Namespace }}"
  labels:
    {{- include "sigma.labels" . | nindent 4 }}
data:
  config.yaml: |-
    log:
      level: debug
    database:
      type: mysql
      sqlite3:
        path: {{ .Chart.Name }}.db
      mysql:
        {{- if .Values.mysql.enabled }}
        host: {{ printf "%s-mysql-headless" (include "common.names.fullname" .) }}
        port: {{ .Values.mysql.primary.service.ports.mysql }}
        username: {{ .Values.mysql.auth.username }}
        password: {{ .Values.mysql.auth.password }}
        database: sigma
        {{- else }}
        host: {{ .Values.external.mysql.host }}
        port: {{ .Values.external.mysql.port }}
        username: {{ .Values.external.mysql.username }}
        password: {{ .Values.external.mysql.password }}
        database: {{ .Values.external.mysql.database }}
        {{- end }}
      postgresql:
        host:  {{ .Release.Name }}-postgresql
        port: 5432
        username: sigma
        password: sigma
        database: sigma
        sslMode: disable
    redis:
      type: external
      url: redis://:{{ .Values.redis.auth.password }}@{{ .Release.Name }}-redis-master:{{ .Values.redis.master.service.ports.redis }}/0
    http:
      server: 0.0.0.0:{{.Values.service.server.port}}
      worker: 0.0.0.0:{{.Values.service.worker.port}}
    daemon:
      builder:
        enabled: {{ .Values.config.daemon.builder.enabled }}
        image: "{{ .Values.image.registry }}/{{ .Values.config.daemon.builder.image.repository }}:{{ .Values.config.daemon.builder.image.tag | default .Chart.AppVersion }}"
        type: {{ .Values.config.daemon.builder.type | quote }}
        kubernetes:
          kubeconfig: ""
          namespace: {{ .Values.config.daemon.builder.kubernetes.namespace | quote }}
      gc:
        # if blob not associate with artifact
        retention: 72h
        # At 02:00 on Saturday
        cron: 0 2 * * 6
    storage:
      rootDirectory: ./storage
      type: s3
      filesystem:
        path: /
      s3:
        {{- if .Values.minio.enabled }}
        ak: {{ .Values.minio.auth.rootUser | quote }}
        sk: {{ .Values.minio.auth.rootPassword | quote }}
        endpoint: {{ printf "http://%s-minio-headless" (include "common.names.fullname" .)  }}:{{ .Values.minio.service.ports.api }}
        {{- range .Values.minio.provisioning.buckets }}
        region: {{ .region | quote }}
        bucket: {{ .name | quote }}
        {{- end }}
        forcePathStyle: true
        {{- else }}
        ak: {{ .Values.external.minio.ak | quote }}
        sk: {{ .Values.external.minio.sk | quote }}
        endpoint: {{ .Values.external.minio.endpoint | quote }}
        region: {{ .Values.external.minio.region | quote }}
        bucket: {{ .Values.external.minio.bucket | quote }}
        forcePathStyle: {{ .Values.external.minio.pathStyle | default false }}
        {{- end }}
    proxy:
      enabled: true
      endpoint: https://registry-1.docker.io
      tlsVerify: true
      username: ""
      password: ""
    workqueue:
      type: redis
    auth:
      user:
        password: ""
      internalUser:
        username: internal-sigma
        password: internal-sigma
      admin:
        username: sigma
        password: {{ randAlphaNum 8 | b64enc | trunc 8 }}
      token:
        realm: ""
        service: ""
      jwt:
        ttl: 1h
        refreshTtl: 24h
        privateKey: {{ genPrivateKey "rsa" | b64enc }}
